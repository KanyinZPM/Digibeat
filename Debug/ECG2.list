
ECG2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d370  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800d500  0800d500  0001d500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d904  0800d904  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d904  0800d904  0001d904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d90c  0800d90c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d90c  0800d90c  0001d90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d910  0800d910  0001d910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800d914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          000008c8  20000200  20000200  00020200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ac8  20000ac8  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001de34  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004175  00000000  00000000  0003e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  000421d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001700  00000000  00000000  00043a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006bb1  00000000  00000000  00045158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f73e  00000000  00000000  0004bd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d734c  00000000  00000000  0006b447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142793  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a38  00000000  00000000  001427e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d4e8 	.word	0x0800d4e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800d4e8 	.word	0x0800d4e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Send_Command>:
	double channel2_voltage_offset; // channel 2 offset millivolts
	double channel3_voltage_offset; // channel 3 offset millivolts
	double channel4_voltage_offset; // channel 4 offset millivolts

	// Function for sending command
	void Send_Command(uint8_t command) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET); // Select chip
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2110      	movs	r1, #16
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <Send_Command+0x48>)
 8000ebc:	f001 fb8e 	bl	80025dc <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f001 f80f 	bl	8001ee4 <HAL_Delay>
	  HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY); // Send command
 8000ec6:	1df9      	adds	r1, r7, #7
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	2201      	movs	r2, #1
 8000ece:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <Send_Command+0x4c>)
 8000ed0:	f004 fbed 	bl	80056ae <HAL_SPI_Transmit>
	  HAL_Delay(2);
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f001 f805 	bl	8001ee4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); // Deselect chip
 8000eda:	2201      	movs	r2, #1
 8000edc:	2110      	movs	r1, #16
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <Send_Command+0x48>)
 8000ee0:	f001 fb7c 	bl	80025dc <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f000 fffd 	bl	8001ee4 <HAL_Delay>
	}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	200002b8 	.word	0x200002b8

08000efc <Write_One_Register>:
   //Function for writing register values
   void Write_One_Register(unsigned char regAddress, unsigned char regValue) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET); // select chip
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2110      	movs	r1, #16
 8000f10:	4812      	ldr	r0, [pc, #72]	; (8000f5c <Write_One_Register+0x60>)
 8000f12:	f001 fb63 	bl	80025dc <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 ffe4 	bl	8001ee4 <HAL_Delay>
	  uint8_t txData[3];
	  txData[0] = ECG2_SPI_CMD_WRITE | regAddress; // send register address
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	733b      	strb	r3, [r7, #12]
	  txData[1] = 0x00; // write in one register
 8000f26:	2300      	movs	r3, #0
 8000f28:	737b      	strb	r3, [r7, #13]
	  txData[2] = regValue; // send register data
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_Transmit(&hspi1, txData, 3, HAL_MAX_DELAY);
 8000f2e:	f107 010c 	add.w	r1, r7, #12
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	2203      	movs	r2, #3
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <Write_One_Register+0x64>)
 8000f3a:	f004 fbb8 	bl	80056ae <HAL_SPI_Transmit>
	  HAL_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 ffd0 	bl	8001ee4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); // deselect chip
 8000f44:	2201      	movs	r2, #1
 8000f46:	2110      	movs	r1, #16
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <Write_One_Register+0x60>)
 8000f4a:	f001 fb47 	bl	80025dc <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000f4e:	2005      	movs	r0, #5
 8000f50:	f000 ffc8 	bl	8001ee4 <HAL_Delay>
	}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	200002b8 	.word	0x200002b8
 8000f64:	00000000 	.word	0x00000000

08000f68 <Read_Analog_Channel>:
	}

	// function  to  read channel voltage in millivolts from ADS1194 sample data
	// sampleArray - one sample data from ADS1194, placeInSample - where is in sampla channel data is
	// refV - reference voltage in millivolts, gain channel gain, offsetVoltage - channnel offset
	double Read_Analog_Channel(unsigned char *sampleArray, unsigned short placeInSample, double refV, double gain) {
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6178      	str	r0, [r7, #20]
 8000f70:	460b      	mov	r3, r1
 8000f72:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f76:	ed87 1b00 	vstr	d1, [r7]
 8000f7a:	827b      	strh	r3, [r7, #18]
	  int ADCvalue = sampleArray[placeInSample];
 8000f7c:	8a7b      	ldrh	r3, [r7, #18]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	61fb      	str	r3, [r7, #28]
	  ADCvalue <<= 8;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	61fb      	str	r3, [r7, #28]
	  ADCvalue |= sampleArray[placeInSample + 1];
 8000f8c:	8a7b      	ldrh	r3, [r7, #18]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61fb      	str	r3, [r7, #28]
	  return ( ((double)ADCvalue*(refV/(32768-1))) / gain);
 8000f9e:	69f8      	ldr	r0, [r7, #28]
 8000fa0:	f7ff fac0 	bl	8000524 <__aeabi_i2d>
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	460d      	mov	r5, r1
 8000fa8:	a30f      	add	r3, pc, #60	; (adr r3, 8000fe8 <Read_Analog_Channel+0x80>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb2:	f7ff fc4b 	bl	800084c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4620      	mov	r0, r4
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	f7ff fb1b 	bl	80005f8 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fce:	f7ff fc3d 	bl	800084c <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	ec43 2b17 	vmov	d7, r2, r3
	}
 8000fda:	eeb0 0a47 	vmov.f32	s0, s14
 8000fde:	eef0 0a67 	vmov.f32	s1, s15
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	40dfffc0 	.word	0x40dfffc0

08000ff0 <SPI1_Read>:

   //Function to generate SPI Clock
	unsigned short SPI1_Read(unsigned short dummyData) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
		uint8_t receivedData = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
		// Send the dummy data to generate the clock
	    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&dummyData, &receivedData, 1, HAL_MAX_DELAY);
 8000ffe:	f107 020f 	add.w	r2, r7, #15
 8001002:	1db9      	adds	r1, r7, #6
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <SPI1_Read+0x30>)
 800100e:	f004 fc8a 	bl	8005926 <HAL_SPI_TransmitReceive>
        return receivedData;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	b29b      	uxth	r3, r3
	}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200002b8 	.word	0x200002b8

08001024 <ECG_Setup>:

	void ECG_Setup() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
		    uint8_t temp_ctr;
		    // set configuration registers
              // setting configuration register 1
		  	Write_One_Register(0x01,0x06); // no clk output and sample rate is 125SPS, ECG data will be out every 8 millisecond
 8001028:	2106      	movs	r1, #6
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ff66 	bl	8000efc <Write_One_Register>
		  	  // setting configuration register 2
		  	Write_One_Register(0x02,0x20); //no test signal, default value
 8001030:	2120      	movs	r1, #32
 8001032:	2002      	movs	r0, #2
 8001034:	f7ff ff62 	bl	8000efc <Write_One_Register>
		  	  // setting configuration register 3
		  	Write_One_Register(0x03,0xCC); // RDL generate internal and enable, reference voltage is 2.4V, RLD signal source is internal
 8001038:	21cc      	movs	r1, #204	; 0xcc
 800103a:	2003      	movs	r0, #3
 800103c:	f7ff ff5e 	bl	8000efc <Write_One_Register>
		  	  // setting LOFF register
		  	Write_One_Register(0x04,0xF3);  // lead-off is in DC mode and using pull up and down resistors, comparators thresholds are set to 70% and 30%
 8001040:	21f3      	movs	r1, #243	; 0xf3
 8001042:	2004      	movs	r0, #4
 8001044:	f7ff ff5a 	bl	8000efc <Write_One_Register>
		  	  // channel 3 settings register
		  	  Write_One_Register(0x07,0x01); // channel is on and gain is 12, input shorted for offset measurements
		  	  // channel 4 settings register
		  	  Write_One_Register(0x08,0x01); // channel is on and gain is 12, input shorted for offset measurements*/
		  	  // channel 1 settings register
		  	Write_One_Register(0x05,0x60); // channel is on and gain is 12, normal electrode input
 8001048:	2160      	movs	r1, #96	; 0x60
 800104a:	2005      	movs	r0, #5
 800104c:	f7ff ff56 	bl	8000efc <Write_One_Register>
		  	  // channel 2 settings register
		  	Write_One_Register(0x06,0x60); // channel is on and gain is 12, normal electrode input
 8001050:	2160      	movs	r1, #96	; 0x60
 8001052:	2006      	movs	r0, #6
 8001054:	f7ff ff52 	bl	8000efc <Write_One_Register>
		  	  // channel 3 settings register
		  	Write_One_Register(0x07,0x60); // channel is on and gain is 12, normal electrode input
 8001058:	2160      	movs	r1, #96	; 0x60
 800105a:	2007      	movs	r0, #7
 800105c:	f7ff ff4e 	bl	8000efc <Write_One_Register>
		  	  // channel 4 settings register
		  	Write_One_Register(0x08,0x64); // channel is on and gain is 12, temperature sensor
 8001060:	2164      	movs	r1, #100	; 0x64
 8001062:	2008      	movs	r0, #8
 8001064:	f7ff ff4a 	bl	8000efc <Write_One_Register>
		  	  // RDL_SENSP
		  	Write_One_Register(0x0D,0x02); // channels 2 is use for RDL
 8001068:	2102      	movs	r1, #2
 800106a:	200d      	movs	r0, #13
 800106c:	f7ff ff46 	bl	8000efc <Write_One_Register>
		  	  // RDL_SENSN
		  	Write_One_Register(0x0E,0x02); // channels 2 is use for RDL
 8001070:	2102      	movs	r1, #2
 8001072:	200e      	movs	r0, #14
 8001074:	f7ff ff42 	bl	8000efc <Write_One_Register>
		  	  // LOFF_SENSP
		  	Write_One_Register(0x0F,0x05); // channel 3P use pull-up resistor for detect LL lead-off, channel 1P use pull-up resistor for detect LA lead-off,
 8001078:	2105      	movs	r1, #5
 800107a:	200f      	movs	r0, #15
 800107c:	f7ff ff3e 	bl	8000efc <Write_One_Register>
		  	  // LOFF_SENSN
		  	Write_One_Register(0x10,0x02); // channel 2N use pull-down resistor for detect RA lead-off
 8001080:	2102      	movs	r1, #2
 8001082:	2010      	movs	r0, #16
 8001084:	f7ff ff3a 	bl	8000efc <Write_One_Register>
		  	  // LOFF_FLIP
		  	Write_One_Register(0x11,0x00); // no flip
 8001088:	2100      	movs	r1, #0
 800108a:	2011      	movs	r0, #17
 800108c:	f7ff ff36 	bl	8000efc <Write_One_Register>
		  	  // GPIO settings
		  	Write_One_Register(0x14,0x0F); // GPIO are not use, default value
 8001090:	210f      	movs	r1, #15
 8001092:	2014      	movs	r0, #20
 8001094:	f7ff ff32 	bl	8000efc <Write_One_Register>
		  	  // PACE settings
		  	Write_One_Register(0x15,0x00); // PACE not use, default value
 8001098:	2100      	movs	r1, #0
 800109a:	2015      	movs	r0, #21
 800109c:	f7ff ff2e 	bl	8000efc <Write_One_Register>
		  	  // setting configuration register 4
		  	Write_One_Register(0x17,0x02); // continuous conversion mode, WCT no connect to RLD, LOFF comparators enable
 80010a0:	2102      	movs	r1, #2
 80010a2:	2017      	movs	r0, #23
 80010a4:	f7ff ff2a 	bl	8000efc <Write_One_Register>
			// channel 3 settings register
			Write_One_Register(0x07,0x60); // channel is on and gain is 12, normal electrode input
			// channel 4 settings register
			Write_One_Register(0x08,0x64); // channel is on and gain is 12, temperature sensor*/

			Send_Command(ECG2_START_CONVERSION ); // send START command
 80010a8:	2308      	movs	r3, #8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fefe 	bl	8000eac <Send_Command>
			HAL_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f000 ff17 	bl	8001ee4 <HAL_Delay>
			Send_Command(ECG2_ENABLE_READ_DATA_CONT_MODE); // enable read data in continuous mode
 80010b6:	2310      	movs	r3, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fef7 	bl	8000eac <Send_Command>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET); // chip select
 80010be:	2200      	movs	r2, #0
 80010c0:	2110      	movs	r1, #16
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <ECG_Setup+0xb0>)
 80010c4:	f001 fa8a 	bl	80025dc <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 ff0b 	bl	8001ee4 <HAL_Delay>
	}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020800 	.word	0x40020800

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t timer_val;
  uint16_t i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  char final_string[20];
  char time_string[20];
  double time_value = 0.0;
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  HAL_Delay(300);
 80010ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010f2:	f000 fef7 	bl	8001ee4 <HAL_Delay>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f000 fe83 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f923 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f000 fa6d 	bl	80015dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001102:	f000 f989 	bl	8001418 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001106:	f000 f9b5 	bl	8001474 <MX_I2S3_Init>
  MX_SPI1_Init();
 800110a:	f000 f9e3 	bl	80014d4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800110e:	f008 ffb7 	bl	800a080 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001112:	f000 fa39 	bl	8001588 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001116:	f000 fa13 	bl	8001540 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  //Start timer
  HAL_TIM_Base_Start(&htim10);
 800111a:	487d      	ldr	r0, [pc, #500]	; (8001310 <main+0x238>)
 800111c:	f004 fec0 	bl	8005ea0 <HAL_TIM_Base_Start>
  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 8001120:	4b7b      	ldr	r3, [pc, #492]	; (8001310 <main+0x238>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	85fb      	strh	r3, [r7, #46]	; 0x2e

  HAL_GPIO_WritePin(PWD_GPIO_Port, PWD_Pin, GPIO_PIN_SET); //ECG2 Powered up
 8001128:	2201      	movs	r2, #1
 800112a:	2102      	movs	r1, #2
 800112c:	4879      	ldr	r0, [pc, #484]	; (8001314 <main+0x23c>)
 800112e:	f001 fa55 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); //CS chip should be high by default
 8001132:	2201      	movs	r2, #1
 8001134:	2110      	movs	r1, #16
 8001136:	4878      	ldr	r0, [pc, #480]	; (8001318 <main+0x240>)
 8001138:	f001 fa50 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET); // pull RESET bit low for 18 CLK to RESET ECG device
 800113c:	2200      	movs	r2, #0
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	4876      	ldr	r0, [pc, #472]	; (800131c <main+0x244>)
 8001142:	f001 fa4b 	bl	80025dc <HAL_GPIO_WritePin>
  // issue RESET pulse
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);//0
 8001146:	2200      	movs	r2, #0
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	4874      	ldr	r0, [pc, #464]	; (800131c <main+0x244>)
 800114c:	f001 fa46 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f000 fec7 	bl	8001ee4 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);//1
 8001156:	2201      	movs	r2, #1
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	4870      	ldr	r0, [pc, #448]	; (800131c <main+0x244>)
 800115c:	f001 fa3e 	bl	80025dc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001164:	f000 febe 	bl	8001ee4 <HAL_Delay>
  // device is in RDATAC mode, set it to SDATAC mode to edit registers
  Send_Command(ECG2_STOP_DATA_CONT_MODE);
 8001168:	2311      	movs	r3, #17
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fe9e 	bl	8000eac <Send_Command>
  HAL_Delay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001174:	f000 feb6 	bl	8001ee4 <HAL_Delay>

  ECG_Setup();
 8001178:	f7ff ff54 	bl	8001024 <ECG_Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800117c:	f008 ffa6 	bl	800a0cc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

	   //Read_Register_Status(0x05);

       while (HAL_GPIO_ReadPin(DRDY_GPIO_Port, DRDY_Pin) == 1) {}
 8001180:	bf00      	nop
 8001182:	2101      	movs	r1, #1
 8001184:	4863      	ldr	r0, [pc, #396]	; (8001314 <main+0x23c>)
 8001186:	f001 fa11 	bl	80025ac <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d0f8      	beq.n	8001182 <main+0xaa>
	        //To check if one ms has elapsed
       //if (__HAL_TIM_GET_COUNTER(&htim10) - timer_val >= 10)
        //	{
        		for (i = 0; i < NUM_OF_BYTES_IN_SAMPLE; i++)  {ecg_data_sample[i] = SPI1_Read(0); } // read ADS1194 output data, one sample
 8001190:	2300      	movs	r3, #0
 8001192:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001194:	e00b      	b.n	80011ae <main+0xd6>
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff ff2a 	bl	8000ff0 <SPI1_Read>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80011a2:	b2d1      	uxtb	r1, r2
 80011a4:	4a5e      	ldr	r2, [pc, #376]	; (8001320 <main+0x248>)
 80011a6:	54d1      	strb	r1, [r2, r3]
 80011a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80011aa:	3301      	adds	r3, #1
 80011ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80011ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80011b0:	2b12      	cmp	r3, #18
 80011b2:	d9f0      	bls.n	8001196 <main+0xbe>
        		/*sprintf(final_string, "%.2d", ecg_data_sample[i]);
    	        HAL_UART_Transmit(&huart2, (uint8_t*)final_string, strlen(final_string), HAL_MAX_DELAY);
    	        char str[2] = "\r\n";
    	        HAL_UART_Transmit(&huart2, (uint8_t *)str, 2, HAL_MAX_DELAY);*/
        		time_value += 8.0; // increment time value
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <main+0x24c>)
 80011ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011be:	f7ff f865 	bl	800028c <__adddf3>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        		// calculate input voltage
              	// voltage LA RA
        		channel1_voltage = Read_Analog_Channel(ecg_data_sample, 3, v_ref, channel_gain);
 80011ca:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8001300 <main+0x228>
 80011ce:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8001308 <main+0x230>
 80011d2:	eeb0 1a46 	vmov.f32	s2, s12
 80011d6:	eef0 1a66 	vmov.f32	s3, s13
 80011da:	eeb0 0a47 	vmov.f32	s0, s14
 80011de:	eef0 0a67 	vmov.f32	s1, s15
 80011e2:	2103      	movs	r1, #3
 80011e4:	484e      	ldr	r0, [pc, #312]	; (8001320 <main+0x248>)
 80011e6:	f7ff febf 	bl	8000f68 <Read_Analog_Channel>
 80011ea:	eeb0 7a40 	vmov.f32	s14, s0
 80011ee:	eef0 7a60 	vmov.f32	s15, s1
 80011f2:	4b4d      	ldr	r3, [pc, #308]	; (8001328 <main+0x250>)
 80011f4:	ed83 7b00 	vstr	d7, [r3]
        		// voltage LL RA - channel 2 is usually used for simple ECG
        		channel2_voltage = Read_Analog_Channel(ecg_data_sample, 5, v_ref, channel_gain);
 80011f8:	ed9f 7b41 	vldr	d7, [pc, #260]	; 8001300 <main+0x228>
 80011fc:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001308 <main+0x230>
 8001200:	eeb0 1a46 	vmov.f32	s2, s12
 8001204:	eef0 1a66 	vmov.f32	s3, s13
 8001208:	eeb0 0a47 	vmov.f32	s0, s14
 800120c:	eef0 0a67 	vmov.f32	s1, s15
 8001210:	2105      	movs	r1, #5
 8001212:	4843      	ldr	r0, [pc, #268]	; (8001320 <main+0x248>)
 8001214:	f7ff fea8 	bl	8000f68 <Read_Analog_Channel>
 8001218:	eeb0 7a40 	vmov.f32	s14, s0
 800121c:	eef0 7a60 	vmov.f32	s15, s1
 8001220:	4b42      	ldr	r3, [pc, #264]	; (800132c <main+0x254>)
 8001222:	ed83 7b00 	vstr	d7, [r3]
    	        sprintf(final_string, "%.2f", channel2_voltage); // convert values to string and send to MikroPlot
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <main+0x254>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f107 0018 	add.w	r0, r7, #24
 8001230:	493f      	ldr	r1, [pc, #252]	; (8001330 <main+0x258>)
 8001232:	f009 ffc9 	bl	800b1c8 <siprintf>
    	        strcat(final_string, ",");
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	4618      	mov	r0, r3
 800123c:	f7fe ffc8 	bl	80001d0 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4413      	add	r3, r2
 800124a:	493a      	ldr	r1, [pc, #232]	; (8001334 <main+0x25c>)
 800124c:	461a      	mov	r2, r3
 800124e:	460b      	mov	r3, r1
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	8013      	strh	r3, [r2, #0]
    	        sprintf(time_string, "%.2f", time_value);
 8001254:	1d38      	adds	r0, r7, #4
 8001256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800125a:	4935      	ldr	r1, [pc, #212]	; (8001330 <main+0x258>)
 800125c:	f009 ffb4 	bl	800b1c8 <siprintf>
    	        strcat(final_string, time_string);
 8001260:	1d3a      	adds	r2, r7, #4
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f009 ffcd 	bl	800b208 <strcat>
    	        HAL_UART_Transmit(&huart2, (uint8_t *)final_string, strlen(final_string), HAL_MAX_DELAY);
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	4618      	mov	r0, r3
 8001274:	f7fe ffac 	bl	80001d0 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	f107 0118 	add.w	r1, r7, #24
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	482c      	ldr	r0, [pc, #176]	; (8001338 <main+0x260>)
 8001286:	f004 ff60 	bl	800614a <HAL_UART_Transmit>
    	        char str[2] = "\r\n";
 800128a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800128e:	803b      	strh	r3, [r7, #0]
    	        HAL_UART_Transmit(&huart2, (uint8_t *)str, 2, HAL_MAX_DELAY);
 8001290:	4639      	mov	r1, r7
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	2202      	movs	r2, #2
 8001298:	4827      	ldr	r0, [pc, #156]	; (8001338 <main+0x260>)
 800129a:	f004 ff56 	bl	800614a <HAL_UART_Transmit>
    	        // voltage LL LA
    	        channel3_voltage = Read_Analog_Channel(ecg_data_sample, 7, v_ref, channel_gain);
 800129e:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8001300 <main+0x228>
 80012a2:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001308 <main+0x230>
 80012a6:	eeb0 1a46 	vmov.f32	s2, s12
 80012aa:	eef0 1a66 	vmov.f32	s3, s13
 80012ae:	eeb0 0a47 	vmov.f32	s0, s14
 80012b2:	eef0 0a67 	vmov.f32	s1, s15
 80012b6:	2107      	movs	r1, #7
 80012b8:	4819      	ldr	r0, [pc, #100]	; (8001320 <main+0x248>)
 80012ba:	f7ff fe55 	bl	8000f68 <Read_Analog_Channel>
 80012be:	eeb0 7a40 	vmov.f32	s14, s0
 80012c2:	eef0 7a60 	vmov.f32	s15, s1
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <main+0x264>)
 80012c8:	ed83 7b00 	vstr	d7, [r3]
    	        // voltage from temperature sensor
    	        channel4_voltage = Read_Analog_Channel(ecg_data_sample, 9, v_ref, channel_gain);
 80012cc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001300 <main+0x228>
 80012d0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001308 <main+0x230>
 80012d4:	eeb0 1a46 	vmov.f32	s2, s12
 80012d8:	eef0 1a66 	vmov.f32	s3, s13
 80012dc:	eeb0 0a47 	vmov.f32	s0, s14
 80012e0:	eef0 0a67 	vmov.f32	s1, s15
 80012e4:	2109      	movs	r1, #9
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <main+0x248>)
 80012e8:	f7ff fe3e 	bl	8000f68 <Read_Analog_Channel>
 80012ec:	eeb0 7a40 	vmov.f32	s14, s0
 80012f0:	eef0 7a60 	vmov.f32	s15, s1
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <main+0x268>)
 80012f6:	ed83 7b00 	vstr	d7, [r3]
  {
 80012fa:	e73f      	b.n	800117c <main+0xa4>
 80012fc:	f3af 8000 	nop.w
 8001300:	00000000 	.word	0x00000000
 8001304:	40a2c000 	.word	0x40a2c000
 8001308:	00000000 	.word	0x00000000
 800130c:	40340000 	.word	0x40340000
 8001310:	20000310 	.word	0x20000310
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40021000 	.word	0x40021000
 8001320:	2000039c 	.word	0x2000039c
 8001324:	40200000 	.word	0x40200000
 8001328:	200003b0 	.word	0x200003b0
 800132c:	200003b8 	.word	0x200003b8
 8001330:	0800d500 	.word	0x0800d500
 8001334:	0800d508 	.word	0x0800d508
 8001338:	20000358 	.word	0x20000358
 800133c:	200003c0 	.word	0x200003c0
 8001340:	200003c8 	.word	0x200003c8

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f009 f9d6 	bl	800a704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <SystemClock_Config+0xcc>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <SystemClock_Config+0xcc>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <SystemClock_Config+0xcc>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <SystemClock_Config+0xd0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <SystemClock_Config+0xd0>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <SystemClock_Config+0xd0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013c2:	2307      	movs	r3, #7
 80013c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fb0e 	bl	80049ec <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013d6:	f000 fa23 	bl	8001820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2302      	movs	r3, #2
 80013e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80013e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2105      	movs	r1, #5
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fd6f 	bl	8004edc <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001404:	f000 fa0c 	bl	8001820 <Error_Handler>
  }
}
 8001408:	bf00      	nop
 800140a:	3750      	adds	r7, #80	; 0x50
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C1_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C1_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C1_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C1_Init+0x50>)
 8001456:	f002 fce5 	bl	8003e24 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 f9de 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000021c 	.word	0x2000021c
 800146c:	40005400 	.word	0x40005400
 8001470:	000186a0 	.word	0x000186a0

08001474 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <MX_I2S3_Init+0x54>)
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <MX_I2S3_Init+0x58>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2S3_Init+0x54>)
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_I2S3_Init+0x54>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_I2S3_Init+0x54>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_I2S3_Init+0x54>)
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_I2S3_Init+0x54>)
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <MX_I2S3_Init+0x5c>)
 800149e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_I2S3_Init+0x54>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_I2S3_Init+0x54>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_I2S3_Init+0x54>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_I2S3_Init+0x54>)
 80014b4:	f002 fdfa 	bl	80040ac <HAL_I2S_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80014be:	f000 f9af 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000270 	.word	0x20000270
 80014cc:	40003c00 	.word	0x40003c00
 80014d0:	00017700 	.word	0x00017700

080014d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_SPI1_Init+0x64>)
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <MX_SPI1_Init+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_SPI1_Init+0x64>)
 80014e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_SPI1_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_SPI1_Init+0x64>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_SPI1_Init+0x64>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_SPI1_Init+0x64>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_SPI1_Init+0x64>)
 8001500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001504:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_SPI1_Init+0x64>)
 8001508:	2238      	movs	r2, #56	; 0x38
 800150a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_SPI1_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_SPI1_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_SPI1_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_SPI1_Init+0x64>)
 8001520:	220a      	movs	r2, #10
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_SPI1_Init+0x64>)
 8001526:	f004 f839 	bl	800559c <HAL_SPI_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001530:	f000 f976 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200002b8 	.word	0x200002b8
 800153c:	40013000 	.word	0x40013000

08001540 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_TIM10_Init+0x40>)
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <MX_TIM10_Init+0x44>)
 8001548:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16800 - 1;
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <MX_TIM10_Init+0x40>)
 800154c:	f244 129f 	movw	r2, #16799	; 0x419f
 8001550:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_TIM10_Init+0x40>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65536 - 1;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_TIM10_Init+0x40>)
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_TIM10_Init+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_TIM10_Init+0x40>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_TIM10_Init+0x40>)
 800156e:	f004 fc47 	bl	8005e00 <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001578:	f000 f952 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000310 	.word	0x20000310
 8001584:	40014400 	.word	0x40014400

08001588 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART2_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 8001594:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015c0:	f004 fd76 	bl	80060b0 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f000 f929 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000358 	.word	0x20000358
 80015d8:	40004400 	.word	0x40004400

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08c      	sub	sp, #48	; 0x30
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	4b84      	ldr	r3, [pc, #528]	; (8001808 <MX_GPIO_Init+0x22c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a83      	ldr	r2, [pc, #524]	; (8001808 <MX_GPIO_Init+0x22c>)
 80015fc:	f043 0310 	orr.w	r3, r3, #16
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b81      	ldr	r3, [pc, #516]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a7c      	ldr	r2, [pc, #496]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a75      	ldr	r2, [pc, #468]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <MX_GPIO_Init+0x22c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <MX_GPIO_Init+0x22c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a6e      	ldr	r2, [pc, #440]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b68      	ldr	r3, [pc, #416]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a67      	ldr	r2, [pc, #412]	; (8001808 <MX_GPIO_Init+0x22c>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b61      	ldr	r3, [pc, #388]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a60      	ldr	r2, [pc, #384]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <MX_GPIO_Init+0x22c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2188      	movs	r1, #136	; 0x88
 800169e:	485b      	ldr	r0, [pc, #364]	; (800180c <MX_GPIO_Init+0x230>)
 80016a0:	f000 ff9c 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2101      	movs	r1, #1
 80016a8:	4859      	ldr	r0, [pc, #356]	; (8001810 <MX_GPIO_Init+0x234>)
 80016aa:	f000 ff97 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2110      	movs	r1, #16
 80016b2:	4857      	ldr	r0, [pc, #348]	; (8001810 <MX_GPIO_Init+0x234>)
 80016b4:	f000 ff92 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWD_GPIO_Port, PWD_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2102      	movs	r1, #2
 80016bc:	4855      	ldr	r0, [pc, #340]	; (8001814 <MX_GPIO_Init+0x238>)
 80016be:	f000 ff8d 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016c2:	2200      	movs	r2, #0
 80016c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80016c8:	4853      	ldr	r0, [pc, #332]	; (8001818 <MX_GPIO_Init+0x23c>)
 80016ca:	f000 ff87 	bl	80025dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin;
 80016ce:	2388      	movs	r3, #136	; 0x88
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4849      	ldr	r0, [pc, #292]	; (800180c <MX_GPIO_Init+0x230>)
 80016e6:	f000 fdc5 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_Pin;
 80016ea:	2311      	movs	r3, #17
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	4843      	ldr	r0, [pc, #268]	; (8001810 <MX_GPIO_Init+0x234>)
 8001702:	f000 fdb7 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001706:	2308      	movs	r3, #8
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001716:	2305      	movs	r3, #5
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	483b      	ldr	r0, [pc, #236]	; (8001810 <MX_GPIO_Init+0x234>)
 8001722:	f000 fda7 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001726:	2301      	movs	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800172a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800172e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	4838      	ldr	r0, [pc, #224]	; (800181c <MX_GPIO_Init+0x240>)
 800173c:	f000 fd9a 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRDY_Pin BOOT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|BOOT1_Pin;
 8001740:	2305      	movs	r3, #5
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	4830      	ldr	r0, [pc, #192]	; (8001814 <MX_GPIO_Init+0x238>)
 8001754:	f000 fd8e 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWD_Pin */
  GPIO_InitStruct.Pin = PWD_Pin;
 8001758:	2302      	movs	r3, #2
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWD_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	4829      	ldr	r0, [pc, #164]	; (8001814 <MX_GPIO_Init+0x238>)
 8001770:	f000 fd80 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PACE_Pin */
  GPIO_InitStruct.Pin = PACE_Pin;
 8001774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PACE_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4820      	ldr	r0, [pc, #128]	; (800180c <MX_GPIO_Init+0x230>)
 800178a:	f000 fd73 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800178e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a0:	2305      	movs	r3, #5
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	481a      	ldr	r0, [pc, #104]	; (8001814 <MX_GPIO_Init+0x238>)
 80017ac:	f000 fd62 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80017b0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80017b4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <MX_GPIO_Init+0x23c>)
 80017ca:	f000 fd53 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017ce:	2320      	movs	r3, #32
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <MX_GPIO_Init+0x23c>)
 80017e2:	f000 fd47 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_GPIO_Init+0x230>)
 80017fc:	f000 fd3a 	bl	8002274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001800:	bf00      	nop
 8001802:	3730      	adds	r7, #48	; 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40021000 	.word	0x40021000
 8001810:	40020800 	.word	0x40020800
 8001814:	40020400 	.word	0x40020400
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40020000 	.word	0x40020000

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	e7fe      	b.n	8001828 <Error_Handler+0x8>
	...

0800182c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_MspInit+0x4c>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_MspInit+0x4c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186a:	2007      	movs	r0, #7
 800186c:	f000 fc2e 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_I2C_MspInit+0x84>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12c      	bne.n	80018f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018cc:	2304      	movs	r3, #4
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <HAL_I2C_MspInit+0x8c>)
 80018d8:	f000 fccc 	bl	8002274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_I2C_MspInit+0x88>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40005400 	.word	0x40005400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400

0800190c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a31      	ldr	r2, [pc, #196]	; (80019fc <HAL_I2S_MspInit+0xf0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d15a      	bne.n	80019f2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800193c:	2301      	movs	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001940:	23c0      	movs	r3, #192	; 0xc0
 8001942:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001944:	2302      	movs	r3, #2
 8001946:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fce5 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001958:	f7ff ff62 	bl	8001820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 8001966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_I2S_MspInit+0xf4>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019b0:	2310      	movs	r3, #16
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019c0:	2306      	movs	r3, #6
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	480e      	ldr	r0, [pc, #56]	; (8001a04 <HAL_I2S_MspInit+0xf8>)
 80019cc:	f000 fc52 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80019d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019e2:	2306      	movs	r3, #6
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ea:	4619      	mov	r1, r3
 80019ec:	4806      	ldr	r0, [pc, #24]	; (8001a08 <HAL_I2S_MspInit+0xfc>)
 80019ee:	f000 fc41 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3738      	adds	r7, #56	; 0x38
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40003c00 	.word	0x40003c00
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020800 	.word	0x40020800

08001a0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_SPI_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12b      	bne.n	8001a86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a66:	23e0      	movs	r3, #224	; 0xe0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a76:	2305      	movs	r3, #5
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_SPI_MspInit+0x8c>)
 8001a82:	f000 fbf7 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40013000 	.word	0x40013000
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020000 	.word	0x40020000

08001a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_TIM_Base_MspInit+0x3c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10d      	bne.n	8001aca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_TIM_Base_MspInit+0x40>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_TIM_Base_MspInit+0x40>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <HAL_TIM_Base_MspInit+0x40>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40014400 	.word	0x40014400
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_UART_MspInit+0x94>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d133      	bne.n	8001b6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_UART_MspInit+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_UART_MspInit+0x98>)
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_UART_MspInit+0x98>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_UART_MspInit+0x98>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <HAL_UART_MspInit+0x98>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_UART_MspInit+0x98>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <HAL_UART_MspInit+0x9c>)
 8001b56:	f000 fb8d 	bl	8002274 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2026      	movs	r0, #38	; 0x26
 8001b60:	f000 fabf 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b64:	2026      	movs	r0, #38	; 0x26
 8001b66:	f000 fad8 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40004400 	.word	0x40004400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bcc:	f000 f96a 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <USART2_IRQHandler+0x10>)
 8001bda:	f004 fb49 	bl	8006270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000358 	.word	0x20000358

08001be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <OTG_FS_IRQHandler+0x10>)
 8001bee:	f000 ff79 	bl	8002ae4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200007b4 	.word	0x200007b4

08001bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_kill>:

int _kill(int pid, int sig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c16:	f008 fd3b 	bl	800a690 <__errno>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2216      	movs	r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_exit>:

void _exit (int status)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe7 	bl	8001c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c3e:	e7fe      	b.n	8001c3e <_exit+0x12>

08001c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e00a      	b.n	8001c68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c52:	f3af 8000 	nop.w
 8001c56:	4601      	mov	r1, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf0      	blt.n	8001c52 <_read+0x12>
  }

  return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e009      	b.n	8001ca0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dbf1      	blt.n	8001c8c <_write+0x12>
  }
  return len;
 8001ca8:	687b      	ldr	r3, [r7, #4]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_close>:

int _close(int file)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cda:	605a      	str	r2, [r3, #4]
  return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_isatty>:

int _isatty(int file)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d4c:	f008 fca0 	bl	800a690 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20020000 	.word	0x20020000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	200003d0 	.word	0x200003d0
 8001d84:	20000ac8 	.word	0x20000ac8

08001d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <SystemInit+0x20>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <SystemInit+0x20>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001db2:	490e      	ldr	r1, [pc, #56]	; (8001dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db4:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dc8:	4c0b      	ldr	r4, [pc, #44]	; (8001df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dd6:	f7ff ffd7 	bl	8001d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dda:	f008 fc5f 	bl	800a69c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dde:	f7ff f97b 	bl	80010d8 <main>
  bx  lr    
 8001de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001df0:	0800d914 	.word	0x0800d914
  ldr r2, =_sbss
 8001df4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001df8:	20000ac8 	.word	0x20000ac8

08001dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_Init+0x40>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_Init+0x40>)
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x40>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 f94f 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fcfa 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f967 	bl	8002136 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 f92f 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	200003d4 	.word	0x200003d4

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200003d4 	.word	0x200003d4

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000008 	.word	0x20000008

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <__NVIC_EnableIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff29 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff3e 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff31 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff feb6 	bl	8001ecc <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d008      	beq.n	8002180 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e052      	b.n	8002226 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0216 	bic.w	r2, r2, #22
 800218e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <HAL_DMA_Abort+0x62>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0208 	bic.w	r2, r2, #8
 80021be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d0:	e013      	b.n	80021fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d2:	f7ff fe7b 	bl	8001ecc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d90c      	bls.n	80021fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e015      	b.n	8002226 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e4      	bne.n	80021d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	223f      	movs	r2, #63	; 0x3f
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d004      	beq.n	800224c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00c      	b.n	8002266 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2205      	movs	r2, #5
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e16b      	b.n	8002568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	f040 815a 	bne.w	8002562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d005      	beq.n	80022c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d130      	bne.n	8002328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b03      	cmp	r3, #3
 8002332:	d017      	beq.n	8002364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d123      	bne.n	80023b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80b4 	beq.w	8002562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b60      	ldr	r3, [pc, #384]	; (8002580 <HAL_GPIO_Init+0x30c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a5f      	ldr	r2, [pc, #380]	; (8002580 <HAL_GPIO_Init+0x30c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <HAL_GPIO_Init+0x30c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002416:	4a5b      	ldr	r2, [pc, #364]	; (8002584 <HAL_GPIO_Init+0x310>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_GPIO_Init+0x314>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d02b      	beq.n	800249a <HAL_GPIO_Init+0x226>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a51      	ldr	r2, [pc, #324]	; (800258c <HAL_GPIO_Init+0x318>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d025      	beq.n	8002496 <HAL_GPIO_Init+0x222>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a50      	ldr	r2, [pc, #320]	; (8002590 <HAL_GPIO_Init+0x31c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d01f      	beq.n	8002492 <HAL_GPIO_Init+0x21e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4f      	ldr	r2, [pc, #316]	; (8002594 <HAL_GPIO_Init+0x320>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d019      	beq.n	800248e <HAL_GPIO_Init+0x21a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4e      	ldr	r2, [pc, #312]	; (8002598 <HAL_GPIO_Init+0x324>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0x216>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4d      	ldr	r2, [pc, #308]	; (800259c <HAL_GPIO_Init+0x328>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00d      	beq.n	8002486 <HAL_GPIO_Init+0x212>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4c      	ldr	r2, [pc, #304]	; (80025a0 <HAL_GPIO_Init+0x32c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d007      	beq.n	8002482 <HAL_GPIO_Init+0x20e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4b      	ldr	r2, [pc, #300]	; (80025a4 <HAL_GPIO_Init+0x330>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_GPIO_Init+0x20a>
 800247a:	2307      	movs	r3, #7
 800247c:	e00e      	b.n	800249c <HAL_GPIO_Init+0x228>
 800247e:	2308      	movs	r3, #8
 8002480:	e00c      	b.n	800249c <HAL_GPIO_Init+0x228>
 8002482:	2306      	movs	r3, #6
 8002484:	e00a      	b.n	800249c <HAL_GPIO_Init+0x228>
 8002486:	2305      	movs	r3, #5
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x228>
 800248a:	2304      	movs	r3, #4
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x228>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x228>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x228>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x228>
 800249a:	2300      	movs	r3, #0
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ac:	4935      	ldr	r1, [pc, #212]	; (8002584 <HAL_GPIO_Init+0x310>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_GPIO_Init+0x334>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_GPIO_Init+0x334>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_GPIO_Init+0x334>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002508:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <HAL_GPIO_Init+0x334>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_GPIO_Init+0x334>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_GPIO_Init+0x334>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_GPIO_Init+0x334>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <HAL_GPIO_Init+0x334>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	f67f ae90 	bls.w	8002290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40021400 	.word	0x40021400
 80025a0:	40021800 	.word	0x40021800
 80025a4:	40021c00 	.word	0x40021c00
 80025a8:	40013c00 	.word	0x40013c00

080025ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e001      	b.n	80025ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f8:	e003      	b.n	8002602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	619a      	str	r2, [r3, #24]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800260e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002610:	b08f      	sub	sp, #60	; 0x3c
 8002612:	af0a      	add	r7, sp, #40	; 0x28
 8002614:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e054      	b.n	80026ca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f007 fd7e 	bl	800a13c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2203      	movs	r2, #3
 8002644:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f004 fdac 	bl	80071bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	687e      	ldr	r6, [r7, #4]
 800266c:	466d      	mov	r5, sp
 800266e:	f106 0410 	add.w	r4, r6, #16
 8002672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800267e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002682:	1d33      	adds	r3, r6, #4
 8002684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002686:	6838      	ldr	r0, [r7, #0]
 8002688:	f004 fd26 	bl	80070d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f004 fda3 	bl	80071de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	687e      	ldr	r6, [r7, #4]
 80026a0:	466d      	mov	r5, sp
 80026a2:	f106 0410 	add.w	r4, r6, #16
 80026a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b6:	1d33      	adds	r3, r6, #4
 80026b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f004 ff2c 	bl	8007518 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026d2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80026d2:	b590      	push	{r4, r7, lr}
 80026d4:	b089      	sub	sp, #36	; 0x24
 80026d6:	af04      	add	r7, sp, #16
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	4608      	mov	r0, r1
 80026dc:	4611      	mov	r1, r2
 80026de:	461a      	mov	r2, r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	70fb      	strb	r3, [r7, #3]
 80026e4:	460b      	mov	r3, r1
 80026e6:	70bb      	strb	r3, [r7, #2]
 80026e8:	4613      	mov	r3, r2
 80026ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_HCD_HC_Init+0x28>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e076      	b.n	80027e8 <HAL_HCD_HC_Init+0x116>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333d      	adds	r3, #61	; 0x3d
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3338      	adds	r3, #56	; 0x38
 8002722:	787a      	ldrb	r2, [r7, #1]
 8002724:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3340      	adds	r3, #64	; 0x40
 8002734:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002736:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3339      	adds	r3, #57	; 0x39
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	333f      	adds	r3, #63	; 0x3f
 8002758:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800275c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	78ba      	ldrb	r2, [r7, #2]
 8002762:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002766:	b2d0      	uxtb	r0, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	333a      	adds	r3, #58	; 0x3a
 8002774:	4602      	mov	r2, r0
 8002776:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800277c:	2b00      	cmp	r3, #0
 800277e:	da09      	bge.n	8002794 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	333b      	adds	r3, #59	; 0x3b
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e008      	b.n	80027a6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	333b      	adds	r3, #59	; 0x3b
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	333c      	adds	r3, #60	; 0x3c
 80027b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027b8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	787c      	ldrb	r4, [r7, #1]
 80027c0:	78ba      	ldrb	r2, [r7, #2]
 80027c2:	78f9      	ldrb	r1, [r7, #3]
 80027c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4623      	mov	r3, r4
 80027d6:	f005 f825 	bl	8007824 <USB_HC_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd90      	pop	{r4, r7, pc}

080027f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_HCD_HC_Halt+0x1e>
 800280a:	2302      	movs	r3, #2
 800280c:	e00f      	b.n	800282e <HAL_HCD_HC_Halt+0x3e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f005 fa75 	bl	8007d0e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	4608      	mov	r0, r1
 8002842:	4611      	mov	r1, r2
 8002844:	461a      	mov	r2, r3
 8002846:	4603      	mov	r3, r0
 8002848:	70fb      	strb	r3, [r7, #3]
 800284a:	460b      	mov	r3, r1
 800284c:	70bb      	strb	r3, [r7, #2]
 800284e:	4613      	mov	r3, r2
 8002850:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	333b      	adds	r3, #59	; 0x3b
 8002860:	78ba      	ldrb	r2, [r7, #2]
 8002862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	333f      	adds	r3, #63	; 0x3f
 8002872:	787a      	ldrb	r2, [r7, #1]
 8002874:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002876:	7c3b      	ldrb	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d112      	bne.n	80028a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3342      	adds	r3, #66	; 0x42
 800288a:	2203      	movs	r2, #3
 800288c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	333d      	adds	r3, #61	; 0x3d
 800289c:	7f3a      	ldrb	r2, [r7, #28]
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e008      	b.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3342      	adds	r3, #66	; 0x42
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	f200 80c6 	bhi.w	8002a48 <HAL_HCD_HC_SubmitRequest+0x210>
 80028bc:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	08002a35 	.word	0x08002a35
 80028cc:	08002939 	.word	0x08002939
 80028d0:	080029b7 	.word	0x080029b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028d4:	7c3b      	ldrb	r3, [r7, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f040 80b8 	bne.w	8002a4c <HAL_HCD_HC_SubmitRequest+0x214>
 80028dc:	78bb      	ldrb	r3, [r7, #2]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 80b4 	bne.w	8002a4c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80028e4:	8b3b      	ldrh	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d108      	bne.n	80028fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3355      	adds	r3, #85	; 0x55
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3355      	adds	r3, #85	; 0x55
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3342      	adds	r3, #66	; 0x42
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002922:	e093      	b.n	8002a4c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3342      	adds	r3, #66	; 0x42
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
      break;
 8002936:	e089      	b.n	8002a4c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002938:	78bb      	ldrb	r3, [r7, #2]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11d      	bne.n	800297a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3355      	adds	r3, #85	; 0x55
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3342      	adds	r3, #66	; 0x42
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002964:	e073      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3342      	adds	r3, #66	; 0x42
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]
      break;
 8002978:	e069      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3354      	adds	r3, #84	; 0x54
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3342      	adds	r3, #66	; 0x42
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
      break;
 80029a0:	e055      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3342      	adds	r3, #66	; 0x42
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]
      break;
 80029b4:	e04b      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029b6:	78bb      	ldrb	r3, [r7, #2]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11d      	bne.n	80029f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3355      	adds	r3, #85	; 0x55
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d109      	bne.n	80029e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3342      	adds	r3, #66	; 0x42
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029e2:	e034      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3342      	adds	r3, #66	; 0x42
 80029f2:	2202      	movs	r2, #2
 80029f4:	701a      	strb	r2, [r3, #0]
      break;
 80029f6:	e02a      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3354      	adds	r3, #84	; 0x54
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3342      	adds	r3, #66	; 0x42
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
      break;
 8002a1e:	e016      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3342      	adds	r3, #66	; 0x42
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
      break;
 8002a32:	e00c      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3342      	adds	r3, #66	; 0x42
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002a48:	bf00      	nop
 8002a4a:	e000      	b.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002a4c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3344      	adds	r3, #68	; 0x44
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	8b3a      	ldrh	r2, [r7, #24]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	202c      	movs	r0, #44	; 0x2c
 8002a68:	fb00 f303 	mul.w	r3, r0, r3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334c      	adds	r3, #76	; 0x4c
 8002a70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3360      	adds	r3, #96	; 0x60
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3350      	adds	r3, #80	; 0x50
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3339      	adds	r3, #57	; 0x39
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3361      	adds	r3, #97	; 0x61
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	222c      	movs	r2, #44	; 0x2c
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	3338      	adds	r3, #56	; 0x38
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	18d1      	adds	r1, r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f004 ffc8 	bl	8007a68 <USB_HC_StartXfer>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop

08002ae4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 fcc9 	bl	8007492 <USB_GetMode>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	f040 80f6 	bne.w	8002cf4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fcad 	bl	800746c <USB_ReadInterrupts>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80ec 	beq.w	8002cf2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 fca4 	bl	800746c <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2e:	d104      	bne.n	8002b3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 fc94 	bl	800746c <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4e:	d104      	bne.n	8002b5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f004 fc84 	bl	800746c <USB_ReadInterrupts>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b6e:	d104      	bne.n	8002b7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 fc74 	bl	800746c <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d103      	bne.n	8002b96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2202      	movs	r2, #2
 8002b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fc66 	bl	800746c <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002baa:	d11c      	bne.n	8002be6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bb4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10f      	bne.n	8002be6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	6938      	ldr	r0, [r7, #16]
 8002bca:	f004 fb55 	bl	8007278 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002bce:	6938      	ldr	r0, [r7, #16]
 8002bd0:	f004 fb86 	bl	80072e0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 fd5c 	bl	8007698 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f007 fb29 	bl	800a238 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fc3e 	bl	800746c <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bfa:	d102      	bne.n	8002c02 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f001 f89e 	bl	8003d3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 fc30 	bl	800746c <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d106      	bne.n	8002c24 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f007 faf2 	bl	800a200 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2208      	movs	r2, #8
 8002c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f004 fc1f 	bl	800746c <USB_ReadInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d101      	bne.n	8002c3c <HAL_HCD_IRQHandler+0x158>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_HCD_IRQHandler+0x15a>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0210 	bic.w	r2, r2, #16
 8002c50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 ffa1 	bl	8003b9a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0210 	orr.w	r2, r2, #16
 8002c66:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fbfd 	bl	800746c <USB_ReadInterrupts>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c7c:	d13a      	bne.n	8002cf4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f005 f832 	bl	8007cec <USB_HC_ReadInterrupt>
 8002c88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e025      	b.n	8002cdc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d018      	beq.n	8002cd6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cba:	d106      	bne.n	8002cca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f8ab 	bl	8002e1e <HCD_HC_IN_IRQHandler>
 8002cc8:	e005      	b.n	8002cd6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fbf9 	bl	80034c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d3d4      	bcc.n	8002c90 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cee:	615a      	str	r2, [r3, #20]
 8002cf0:	e000      	b.n	8002cf4 <HAL_HCD_IRQHandler+0x210>
      return;
 8002cf2:	bf00      	nop
    }
  }
}
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_HCD_Start+0x16>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e013      	b.n	8002d38 <HAL_HCD_Start+0x3e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fd1e 	bl	8007760 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 fa36 	bl	800719a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_HCD_Stop+0x16>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e00d      	b.n	8002d72 <HAL_HCD_Stop+0x32>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f005 f90c 	bl	8007f80 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 fcc0 	bl	800770c <USB_ResetPort>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3360      	adds	r3, #96	; 0x60
 8002db0:	781b      	ldrb	r3, [r3, #0]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3350      	adds	r3, #80	; 0x50
 8002dd8:	681b      	ldr	r3, [r3, #0]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fd04 	bl	8007800 <USB_GetCurrentFrame>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 fcdf 	bl	80077d2 <USB_GetHostSpeed>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d11a      	bne.n	8002e84 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3361      	adds	r3, #97	; 0x61
 8002e6e:	2206      	movs	r2, #6
 8002e70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 ff46 	bl	8007d0e <USB_HC_Halt>
 8002e82:	e0af      	b.n	8002fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9a:	d11b      	bne.n	8002ed4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3361      	adds	r3, #97	; 0x61
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 ff1e 	bl	8007d0e <USB_HC_Halt>
 8002ed2:	e087      	b.n	8002fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d109      	bne.n	8002efe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2320      	movs	r3, #32
 8002efa:	6093      	str	r3, [r2, #8]
 8002efc:	e072      	b.n	8002fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d11a      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2308      	movs	r3, #8
 8002f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	3361      	adds	r3, #97	; 0x61
 8002f34:	2205      	movs	r2, #5
 8002f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fee3 	bl	8007d0e <USB_HC_Halt>
 8002f48:	e04c      	b.n	8002fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f60:	d11b      	bne.n	8002f9a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3361      	adds	r3, #97	; 0x61
 8002f84:	2208      	movs	r2, #8
 8002f86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 febb 	bl	8007d0e <USB_HC_Halt>
 8002f98:	e024      	b.n	8002fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d119      	bne.n	8002fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3361      	adds	r3, #97	; 0x61
 8002fd0:	2206      	movs	r2, #6
 8002fd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 fe95 	bl	8007d0e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffa:	d112      	bne.n	8003022 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f004 fe81 	bl	8007d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800301e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003020:	e24e      	b.n	80034c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	f040 80df 	bne.w	80031f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d019      	beq.n	8003076 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3348      	adds	r3, #72	; 0x48
 8003050:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0159      	lsls	r1, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	440b      	add	r3, r1
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	202c      	movs	r0, #44	; 0x2c
 800306c:	fb00 f303 	mul.w	r3, r0, r3
 8003070:	440b      	add	r3, r1
 8003072:	3350      	adds	r3, #80	; 0x50
 8003074:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3361      	adds	r3, #97	; 0x61
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	335c      	adds	r3, #92	; 0x5c
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	461a      	mov	r2, r3
 80030a8:	2301      	movs	r3, #1
 80030aa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	333f      	adds	r3, #63	; 0x3f
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	333f      	adds	r3, #63	; 0x3f
 80030ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d111      	bne.n	80030f8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 fe15 	bl	8007d0e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f0:	461a      	mov	r2, r3
 80030f2:	2310      	movs	r3, #16
 80030f4:	6093      	str	r3, [r2, #8]
 80030f6:	e03a      	b.n	800316e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	333f      	adds	r3, #63	; 0x3f
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d009      	beq.n	8003120 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	333f      	adds	r3, #63	; 0x3f
 800311a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800311c:	2b01      	cmp	r3, #1
 800311e:	d126      	bne.n	800316e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	0151      	lsls	r1, r2, #5
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	440a      	add	r2, r1
 8003136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800313a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800313e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3360      	adds	r3, #96	; 0x60
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	b2d9      	uxtb	r1, r3
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	202c      	movs	r0, #44	; 0x2c
 800315c:	fb00 f303 	mul.w	r3, r0, r3
 8003160:	4413      	add	r3, r2
 8003162:	3360      	adds	r3, #96	; 0x60
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f007 f873 	bl	800a254 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d12b      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3348      	adds	r3, #72	; 0x48
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	202c      	movs	r0, #44	; 0x2c
 800318c:	fb00 f202 	mul.w	r2, r0, r2
 8003190:	440a      	add	r2, r1
 8003192:	3240      	adds	r2, #64	; 0x40
 8003194:	8812      	ldrh	r2, [r2, #0]
 8003196:	fbb3 f3f2 	udiv	r3, r3, r2
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 818e 	beq.w	80034c0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3354      	adds	r3, #84	; 0x54
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2d8      	uxtb	r0, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3354      	adds	r3, #84	; 0x54
 80031c8:	4602      	mov	r2, r0
 80031ca:	701a      	strb	r2, [r3, #0]
}
 80031cc:	e178      	b.n	80034c0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	3354      	adds	r3, #84	; 0x54
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f083 0301 	eor.w	r3, r3, #1
 80031e2:	b2d8      	uxtb	r0, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3354      	adds	r3, #84	; 0x54
 80031f2:	4602      	mov	r2, r0
 80031f4:	701a      	strb	r2, [r3, #0]
}
 80031f6:	e163      	b.n	80034c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b02      	cmp	r3, #2
 800320c:	f040 80f6 	bne.w	80033fc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3361      	adds	r3, #97	; 0x61
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d109      	bne.n	8003238 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e0c9      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3361      	adds	r3, #97	; 0x61
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d109      	bne.n	8003260 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3360      	adds	r3, #96	; 0x60
 800325a:	2205      	movs	r2, #5
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e0b5      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3361      	adds	r3, #97	; 0x61
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b06      	cmp	r3, #6
 8003272:	d009      	beq.n	8003288 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3361      	adds	r3, #97	; 0x61
 8003282:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003284:	2b08      	cmp	r3, #8
 8003286:	d150      	bne.n	800332a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	335c      	adds	r3, #92	; 0x5c
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	202c      	movs	r0, #44	; 0x2c
 80032a0:	fb00 f303 	mul.w	r3, r0, r3
 80032a4:	440b      	add	r3, r1
 80032a6:	335c      	adds	r3, #92	; 0x5c
 80032a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	335c      	adds	r3, #92	; 0x5c
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d912      	bls.n	80032e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3360      	adds	r3, #96	; 0x60
 80032de:	2204      	movs	r2, #4
 80032e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032e2:	e073      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	3360      	adds	r3, #96	; 0x60
 80032f2:	2202      	movs	r2, #2
 80032f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800330c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003314:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003328:	e050      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	3361      	adds	r3, #97	; 0x61
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d122      	bne.n	8003384 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	3360      	adds	r3, #96	; 0x60
 800334c:	2202      	movs	r2, #2
 800334e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003366:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800336e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e023      	b.n	80033cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3361      	adds	r3, #97	; 0x61
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b07      	cmp	r3, #7
 8003396:	d119      	bne.n	80033cc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	335c      	adds	r3, #92	; 0x5c
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	202c      	movs	r0, #44	; 0x2c
 80033b0:	fb00 f303 	mul.w	r3, r0, r3
 80033b4:	440b      	add	r3, r1
 80033b6:	335c      	adds	r3, #92	; 0x5c
 80033b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3360      	adds	r3, #96	; 0x60
 80033c8:	2204      	movs	r2, #4
 80033ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d8:	461a      	mov	r2, r3
 80033da:	2302      	movs	r3, #2
 80033dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	b2d9      	uxtb	r1, r3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	202c      	movs	r0, #44	; 0x2c
 80033e8:	fb00 f303 	mul.w	r3, r0, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	3360      	adds	r3, #96	; 0x60
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f006 ff2d 	bl	800a254 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033fa:	e061      	b.n	80034c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b10      	cmp	r3, #16
 8003410:	d156      	bne.n	80034c0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	333f      	adds	r3, #63	; 0x3f
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d111      	bne.n	800344a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	335c      	adds	r3, #92	; 0x5c
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f004 fc63 	bl	8007d0e <USB_HC_Halt>
 8003448:	e031      	b.n	80034ae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	212c      	movs	r1, #44	; 0x2c
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	4413      	add	r3, r2
 8003456:	333f      	adds	r3, #63	; 0x3f
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	333f      	adds	r3, #63	; 0x3f
 800346c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800346e:	2b02      	cmp	r3, #2
 8003470:	d11d      	bne.n	80034ae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	335c      	adds	r3, #92	; 0x5c
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d110      	bne.n	80034ae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3361      	adds	r3, #97	; 0x61
 800349a:	2203      	movs	r2, #3
 800349c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 fc30 	bl	8007d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	461a      	mov	r2, r3
 80034bc:	2310      	movs	r3, #16
 80034be:	6093      	str	r3, [r2, #8]
}
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d11a      	bne.n	800352e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	461a      	mov	r2, r3
 8003506:	2304      	movs	r3, #4
 8003508:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	212c      	movs	r1, #44	; 0x2c
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	4413      	add	r3, r2
 8003516:	3361      	adds	r3, #97	; 0x61
 8003518:	2206      	movs	r2, #6
 800351a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f004 fbf1 	bl	8007d0e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800352c:	e331      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d12e      	bne.n	80035a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	461a      	mov	r2, r3
 8003552:	2320      	movs	r3, #32
 8003554:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	333d      	adds	r3, #61	; 0x3d
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b01      	cmp	r3, #1
 8003568:	f040 8313 	bne.w	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	333d      	adds	r3, #61	; 0x3d
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3360      	adds	r3, #96	; 0x60
 800358c:	2202      	movs	r2, #2
 800358e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f004 fbb7 	bl	8007d0e <USB_HC_Halt>
}
 80035a0:	e2f7      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d112      	bne.n	80035e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f004 fb98 	bl	8007d0e <USB_HC_Halt>
}
 80035de:	e2d8      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d140      	bne.n	8003678 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	335c      	adds	r3, #92	; 0x5c
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d111      	bne.n	8003642 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	333d      	adds	r3, #61	; 0x3d
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	461a      	mov	r2, r3
 800363e:	2340      	movs	r3, #64	; 0x40
 8003640:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	461a      	mov	r2, r3
 8003650:	2301      	movs	r3, #1
 8003652:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3361      	adds	r3, #97	; 0x61
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f004 fb4c 	bl	8007d0e <USB_HC_Halt>
}
 8003676:	e28c      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d12c      	bne.n	80036e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3361      	adds	r3, #97	; 0x61
 800369c:	2204      	movs	r2, #4
 800369e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	333d      	adds	r3, #61	; 0x3d
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	335c      	adds	r3, #92	; 0x5c
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fb1d 	bl	8007d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	2340      	movs	r3, #64	; 0x40
 80036e4:	6093      	str	r3, [r2, #8]
}
 80036e6:	e254      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d11a      	bne.n	8003734 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370a:	461a      	mov	r2, r3
 800370c:	2308      	movs	r3, #8
 800370e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3361      	adds	r3, #97	; 0x61
 800371e:	2205      	movs	r2, #5
 8003720:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f004 faee 	bl	8007d0e <USB_HC_Halt>
}
 8003732:	e22e      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d140      	bne.n	80037cc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	335c      	adds	r3, #92	; 0x5c
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3361      	adds	r3, #97	; 0x61
 800376a:	2203      	movs	r2, #3
 800376c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	333d      	adds	r3, #61	; 0x3d
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d112      	bne.n	80037a8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	333c      	adds	r3, #60	; 0x3c
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	333d      	adds	r3, #61	; 0x3d
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 faab 	bl	8007d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	2310      	movs	r3, #16
 80037c8:	6093      	str	r3, [r2, #8]
}
 80037ca:	e1e2      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d164      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d111      	bne.n	800380e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	3361      	adds	r3, #97	; 0x61
 80037f8:	2206      	movs	r2, #6
 80037fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f004 fa81 	bl	8007d0e <USB_HC_Halt>
 800380c:	e044      	b.n	8003898 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	335c      	adds	r3, #92	; 0x5c
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	202c      	movs	r0, #44	; 0x2c
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	440b      	add	r3, r1
 800382c:	335c      	adds	r3, #92	; 0x5c
 800382e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	335c      	adds	r3, #92	; 0x5c
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d920      	bls.n	8003886 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	335c      	adds	r3, #92	; 0x5c
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3360      	adds	r3, #96	; 0x60
 8003864:	2204      	movs	r2, #4
 8003866:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	b2d9      	uxtb	r1, r3
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	202c      	movs	r0, #44	; 0x2c
 8003872:	fb00 f303 	mul.w	r3, r0, r3
 8003876:	4413      	add	r3, r2
 8003878:	3360      	adds	r3, #96	; 0x60
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f006 fce8 	bl	800a254 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003884:	e008      	b.n	8003898 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3360      	adds	r3, #96	; 0x60
 8003894:	2202      	movs	r2, #2
 8003896:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	461a      	mov	r2, r3
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	6093      	str	r3, [r2, #8]
}
 80038aa:	e172      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d11b      	bne.n	80038fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	3361      	adds	r3, #97	; 0x61
 80038d2:	2208      	movs	r2, #8
 80038d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fa14 	bl	8007d0e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	461a      	mov	r2, r3
 80038f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f8:	6093      	str	r3, [r2, #8]
}
 80038fa:	e14a      	b.n	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	f040 813f 	bne.w	8003b92 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3361      	adds	r3, #97	; 0x61
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d17d      	bne.n	8003a24 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3360      	adds	r3, #96	; 0x60
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	333f      	adds	r3, #63	; 0x3f
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d00a      	beq.n	8003964 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	333f      	adds	r3, #63	; 0x3f
 800395c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800395e:	2b03      	cmp	r3, #3
 8003960:	f040 8100 	bne.w	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d113      	bne.n	8003994 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3355      	adds	r3, #85	; 0x55
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	f083 0301 	eor.w	r3, r3, #1
 8003980:	b2d8      	uxtb	r0, r3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	3355      	adds	r3, #85	; 0x55
 8003990:	4602      	mov	r2, r0
 8003992:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b01      	cmp	r3, #1
 800399a:	f040 80e3 	bne.w	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	334c      	adds	r3, #76	; 0x4c
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80d8 	beq.w	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	334c      	adds	r3, #76	; 0x4c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	202c      	movs	r0, #44	; 0x2c
 80039ca:	fb00 f202 	mul.w	r2, r0, r2
 80039ce:	440a      	add	r2, r1
 80039d0:	3240      	adds	r2, #64	; 0x40
 80039d2:	8812      	ldrh	r2, [r2, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	3b01      	subs	r3, #1
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	202c      	movs	r0, #44	; 0x2c
 80039de:	fb00 f202 	mul.w	r2, r0, r2
 80039e2:	440a      	add	r2, r1
 80039e4:	3240      	adds	r2, #64	; 0x40
 80039e6:	8812      	ldrh	r2, [r2, #0]
 80039e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80b5 	beq.w	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	212c      	movs	r1, #44	; 0x2c
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	3355      	adds	r3, #85	; 0x55
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2d8      	uxtb	r0, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3355      	adds	r3, #85	; 0x55
 8003a1e:	4602      	mov	r2, r0
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e09f      	b.n	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	3361      	adds	r3, #97	; 0x61
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d109      	bne.n	8003a4c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3360      	adds	r3, #96	; 0x60
 8003a46:	2202      	movs	r2, #2
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	e08b      	b.n	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3361      	adds	r3, #97	; 0x61
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d109      	bne.n	8003a74 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	212c      	movs	r1, #44	; 0x2c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3360      	adds	r3, #96	; 0x60
 8003a6e:	2202      	movs	r2, #2
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e077      	b.n	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3361      	adds	r3, #97	; 0x61
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d109      	bne.n	8003a9c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	212c      	movs	r1, #44	; 0x2c
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	3360      	adds	r3, #96	; 0x60
 8003a96:	2205      	movs	r2, #5
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e063      	b.n	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3361      	adds	r3, #97	; 0x61
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d009      	beq.n	8003ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3361      	adds	r3, #97	; 0x61
 8003abe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d14f      	bne.n	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	335c      	adds	r3, #92	; 0x5c
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	202c      	movs	r0, #44	; 0x2c
 8003adc:	fb00 f303 	mul.w	r3, r0, r3
 8003ae0:	440b      	add	r3, r1
 8003ae2:	335c      	adds	r3, #92	; 0x5c
 8003ae4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	335c      	adds	r3, #92	; 0x5c
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d912      	bls.n	8003b20 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	335c      	adds	r3, #92	; 0x5c
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3360      	adds	r3, #96	; 0x60
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e021      	b.n	8003b64 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	212c      	movs	r1, #44	; 0x2c
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3360      	adds	r3, #96	; 0x60
 8003b2e:	2202      	movs	r2, #2
 8003b30:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b48:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b50:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5e:	461a      	mov	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	461a      	mov	r2, r3
 8003b72:	2302      	movs	r3, #2
 8003b74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	b2d9      	uxtb	r1, r3
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	202c      	movs	r0, #44	; 0x2c
 8003b80:	fb00 f303 	mul.w	r3, r0, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	3360      	adds	r3, #96	; 0x60
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f006 fb61 	bl	800a254 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b92:	bf00      	nop
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b08a      	sub	sp, #40	; 0x28
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	0c5b      	lsrs	r3, r3, #17
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d004      	beq.n	8003be0 <HCD_RXQLVL_IRQHandler+0x46>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	f000 80a9 	beq.w	8003d30 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003bde:	e0aa      	b.n	8003d36 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80a6 	beq.w	8003d34 <HCD_RXQLVL_IRQHandler+0x19a>
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3344      	adds	r3, #68	; 0x44
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 809b 	beq.w	8003d34 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	3350      	adds	r3, #80	; 0x50
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	441a      	add	r2, r3
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	202c      	movs	r0, #44	; 0x2c
 8003c18:	fb00 f303 	mul.w	r3, r0, r3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334c      	adds	r3, #76	; 0x4c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d87a      	bhi.n	8003d1c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	3344      	adds	r3, #68	; 0x44
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f003 fbbc 	bl	80073bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	212c      	movs	r1, #44	; 0x2c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	3344      	adds	r3, #68	; 0x44
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	441a      	add	r2, r3
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	202c      	movs	r0, #44	; 0x2c
 8003c5e:	fb00 f303 	mul.w	r3, r0, r3
 8003c62:	440b      	add	r3, r1
 8003c64:	3344      	adds	r3, #68	; 0x44
 8003c66:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3350      	adds	r3, #80	; 0x50
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	202c      	movs	r0, #44	; 0x2c
 8003c82:	fb00 f303 	mul.w	r3, r0, r3
 8003c86:	440b      	add	r3, r1
 8003c88:	3350      	adds	r3, #80	; 0x50
 8003c8a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	0cdb      	lsrs	r3, r3, #19
 8003c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	3340      	adds	r3, #64	; 0x40
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d13c      	bne.n	8003d34 <HCD_RXQLVL_IRQHandler+0x19a>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d039      	beq.n	8003d34 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cd6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cde:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3354      	adds	r3, #84	; 0x54
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	f083 0301 	eor.w	r3, r3, #1
 8003d06:	b2d8      	uxtb	r0, r3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	3354      	adds	r3, #84	; 0x54
 8003d16:	4602      	mov	r2, r0
 8003d18:	701a      	strb	r2, [r3, #0]
      break;
 8003d1a:	e00b      	b.n	8003d34 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	212c      	movs	r1, #44	; 0x2c
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	3360      	adds	r3, #96	; 0x60
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	701a      	strb	r2, [r3, #0]
      break;
 8003d2e:	e001      	b.n	8003d34 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003d30:	bf00      	nop
 8003d32:	e000      	b.n	8003d36 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003d34:	bf00      	nop
  }
}
 8003d36:	bf00      	nop
 8003d38:	3728      	adds	r7, #40	; 0x28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d10b      	bne.n	8003d8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d102      	bne.n	8003d86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f006 fa4b 	bl	800a21c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d132      	bne.n	8003dfe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f043 0308 	orr.w	r3, r3, #8
 8003d9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d126      	bne.n	8003df8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d113      	bne.n	8003dda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003db8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dbc:	d106      	bne.n	8003dcc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 fc67 	bl	8007698 <USB_InitFSLSPClkSel>
 8003dca:	e011      	b.n	8003df0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f003 fc60 	bl	8007698 <USB_InitFSLSPClkSel>
 8003dd8:	e00a      	b.n	8003df0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d106      	bne.n	8003df0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003de8:	461a      	mov	r2, r3
 8003dea:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003dee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f006 fa3d 	bl	800a270 <HAL_HCD_PortEnabled_Callback>
 8003df6:	e002      	b.n	8003dfe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f006 fa47 	bl	800a28c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d103      	bne.n	8003e10 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f043 0320 	orr.w	r3, r3, #32
 8003e0e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6013      	str	r3, [r2, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e12b      	b.n	800408e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd fd16 	bl	800187c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e88:	f001 fa20 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a81      	ldr	r2, [pc, #516]	; (8004098 <HAL_I2C_Init+0x274>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d807      	bhi.n	8003ea8 <HAL_I2C_Init+0x84>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a80      	ldr	r2, [pc, #512]	; (800409c <HAL_I2C_Init+0x278>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	bf94      	ite	ls
 8003ea0:	2301      	movls	r3, #1
 8003ea2:	2300      	movhi	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e006      	b.n	8003eb6 <HAL_I2C_Init+0x92>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a7d      	ldr	r2, [pc, #500]	; (80040a0 <HAL_I2C_Init+0x27c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bf94      	ite	ls
 8003eb0:	2301      	movls	r3, #1
 8003eb2:	2300      	movhi	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e0e7      	b.n	800408e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a78      	ldr	r2, [pc, #480]	; (80040a4 <HAL_I2C_Init+0x280>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	0c9b      	lsrs	r3, r3, #18
 8003ec8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4a6a      	ldr	r2, [pc, #424]	; (8004098 <HAL_I2C_Init+0x274>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d802      	bhi.n	8003ef8 <HAL_I2C_Init+0xd4>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	e009      	b.n	8003f0c <HAL_I2C_Init+0xe8>
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	4a69      	ldr	r2, [pc, #420]	; (80040a8 <HAL_I2C_Init+0x284>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	495c      	ldr	r1, [pc, #368]	; (8004098 <HAL_I2C_Init+0x274>)
 8003f28:	428b      	cmp	r3, r1
 8003f2a:	d819      	bhi.n	8003f60 <HAL_I2C_Init+0x13c>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1e59      	subs	r1, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f3a:	1c59      	adds	r1, r3, #1
 8003f3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f40:	400b      	ands	r3, r1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_I2C_Init+0x138>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1e59      	subs	r1, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f54:	3301      	adds	r3, #1
 8003f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5a:	e051      	b.n	8004000 <HAL_I2C_Init+0x1dc>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	e04f      	b.n	8004000 <HAL_I2C_Init+0x1dc>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d111      	bne.n	8003f8c <HAL_I2C_Init+0x168>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1e58      	subs	r0, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	440b      	add	r3, r1
 8003f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e012      	b.n	8003fb2 <HAL_I2C_Init+0x18e>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1e58      	subs	r0, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	0099      	lsls	r1, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Init+0x196>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e022      	b.n	8004000 <HAL_I2C_Init+0x1dc>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10e      	bne.n	8003fe0 <HAL_I2C_Init+0x1bc>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1e58      	subs	r0, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	440b      	add	r3, r1
 8003fd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fde:	e00f      	b.n	8004000 <HAL_I2C_Init+0x1dc>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1e58      	subs	r0, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	0099      	lsls	r1, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	6809      	ldr	r1, [r1, #0]
 8004004:	4313      	orrs	r3, r2
 8004006:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800402e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6911      	ldr	r1, [r2, #16]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68d2      	ldr	r2, [r2, #12]
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	430b      	orrs	r3, r1
 8004042:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	000186a0 	.word	0x000186a0
 800409c:	001e847f 	.word	0x001e847f
 80040a0:	003d08ff 	.word	0x003d08ff
 80040a4:	431bde83 	.word	0x431bde83
 80040a8:	10624dd3 	.word	0x10624dd3

080040ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e128      	b.n	8004310 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a90      	ldr	r2, [pc, #576]	; (8004318 <HAL_I2S_Init+0x26c>)
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fd fc17 	bl	800190c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80040f4:	f023 030f 	bic.w	r3, r3, #15
 80040f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2202      	movs	r2, #2
 8004100:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d060      	beq.n	80041cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004112:	2310      	movs	r3, #16
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e001      	b.n	800411c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004118:	2320      	movs	r3, #32
 800411a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b20      	cmp	r3, #32
 8004122:	d802      	bhi.n	800412a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800412a:	2001      	movs	r0, #1
 800412c:	f001 f9d8 	bl	80054e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004130:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413a:	d125      	bne.n	8004188 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d010      	beq.n	8004166 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	fbb2 f2f3 	udiv	r2, r2, r3
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	461a      	mov	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	3305      	adds	r3, #5
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	e01f      	b.n	80041a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	3305      	adds	r3, #5
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e00e      	b.n	80041a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	461a      	mov	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	3305      	adds	r3, #5
 80041a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4a5c      	ldr	r2, [pc, #368]	; (800431c <HAL_I2S_Init+0x270>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	08db      	lsrs	r3, r3, #3
 80041b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	e003      	b.n	80041d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80041cc:	2302      	movs	r3, #2
 80041ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d902      	bls.n	80041e0 <HAL_I2S_Init+0x134>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	2bff      	cmp	r3, #255	; 0xff
 80041de:	d907      	bls.n	80041f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e4:	f043 0210 	orr.w	r2, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e08f      	b.n	8004310 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	ea42 0103 	orr.w	r1, r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	430a      	orrs	r2, r1
 8004202:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800420e:	f023 030f 	bic.w	r3, r3, #15
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6851      	ldr	r1, [r2, #4]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6892      	ldr	r2, [r2, #8]
 800421a:	4311      	orrs	r1, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68d2      	ldr	r2, [r2, #12]
 8004220:	4311      	orrs	r1, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6992      	ldr	r2, [r2, #24]
 8004226:	430a      	orrs	r2, r1
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004232:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d161      	bne.n	8004300 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a38      	ldr	r2, [pc, #224]	; (8004320 <HAL_I2S_Init+0x274>)
 8004240:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a37      	ldr	r2, [pc, #220]	; (8004324 <HAL_I2S_Init+0x278>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_I2S_Init+0x1a4>
 800424c:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_I2S_Init+0x27c>)
 800424e:	e001      	b.n	8004254 <HAL_I2S_Init+0x1a8>
 8004250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	4932      	ldr	r1, [pc, #200]	; (8004324 <HAL_I2S_Init+0x278>)
 800425c:	428a      	cmp	r2, r1
 800425e:	d101      	bne.n	8004264 <HAL_I2S_Init+0x1b8>
 8004260:	4a31      	ldr	r2, [pc, #196]	; (8004328 <HAL_I2S_Init+0x27c>)
 8004262:	e001      	b.n	8004268 <HAL_I2S_Init+0x1bc>
 8004264:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004268:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800426c:	f023 030f 	bic.w	r3, r3, #15
 8004270:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <HAL_I2S_Init+0x278>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d101      	bne.n	8004280 <HAL_I2S_Init+0x1d4>
 800427c:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_I2S_Init+0x27c>)
 800427e:	e001      	b.n	8004284 <HAL_I2S_Init+0x1d8>
 8004280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004284:	2202      	movs	r2, #2
 8004286:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <HAL_I2S_Init+0x278>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_I2S_Init+0x1ea>
 8004292:	4b25      	ldr	r3, [pc, #148]	; (8004328 <HAL_I2S_Init+0x27c>)
 8004294:	e001      	b.n	800429a <HAL_I2S_Init+0x1ee>
 8004296:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a6:	d003      	beq.n	80042b0 <HAL_I2S_Init+0x204>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80042b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e001      	b.n	80042bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042da:	4313      	orrs	r3, r2
 80042dc:	b29a      	uxth	r2, r3
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a0d      	ldr	r2, [pc, #52]	; (8004324 <HAL_I2S_Init+0x278>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_I2S_Init+0x24c>
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_I2S_Init+0x27c>)
 80042f6:	e001      	b.n	80042fc <HAL_I2S_Init+0x250>
 80042f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042fc:	897a      	ldrh	r2, [r7, #10]
 80042fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	08004423 	.word	0x08004423
 800431c:	cccccccd 	.word	0xcccccccd
 8004320:	08004539 	.word	0x08004539
 8004324:	40003800 	.word	0x40003800
 8004328:	40003400 	.word	0x40003400

0800432c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	881a      	ldrh	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10e      	bne.n	80043bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ffb8 	bl	800432c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	b292      	uxth	r2, r2
 80043d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	1c9a      	adds	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10e      	bne.n	800441a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800440a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff ff93 	bl	8004340 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b04      	cmp	r3, #4
 800443c:	d13a      	bne.n	80044b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b01      	cmp	r3, #1
 8004446:	d109      	bne.n	800445c <I2S_IRQHandler+0x3a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b40      	cmp	r3, #64	; 0x40
 8004454:	d102      	bne.n	800445c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff ffb4 	bl	80043c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d126      	bne.n	80044b4 <I2S_IRQHandler+0x92>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b20      	cmp	r3, #32
 8004472:	d11f      	bne.n	80044b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004482:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f043 0202 	orr.w	r2, r3, #2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ff50 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d136      	bne.n	800452e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d109      	bne.n	80044de <I2S_IRQHandler+0xbc>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d4:	2b80      	cmp	r3, #128	; 0x80
 80044d6:	d102      	bne.n	80044de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ff45 	bl	8004368 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d122      	bne.n	800452e <I2S_IRQHandler+0x10c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d11b      	bne.n	800452e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004504:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	f043 0204 	orr.w	r2, r3, #4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ff13 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800452e:	bf00      	nop
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a92      	ldr	r2, [pc, #584]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004552:	4b92      	ldr	r3, [pc, #584]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004554:	e001      	b.n	800455a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a8b      	ldr	r2, [pc, #556]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004570:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004572:	e001      	b.n	8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004584:	d004      	beq.n	8004590 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 8099 	bne.w	80046c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	d107      	bne.n	80045aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f925 	bl	80047f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9c8 	bl	8004954 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d13a      	bne.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d035      	beq.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6e      	ldr	r2, [pc, #440]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80045e2:	4b6e      	ldr	r3, [pc, #440]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045e4:	e001      	b.n	80045ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80045e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4969      	ldr	r1, [pc, #420]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f2:	428b      	cmp	r3, r1
 80045f4:	d101      	bne.n	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80045f6:	4b69      	ldr	r3, [pc, #420]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045f8:	e001      	b.n	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80045fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004602:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004612:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fe88 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b08      	cmp	r3, #8
 800464c:	f040 80c3 	bne.w	80047d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80bd 	beq.w	80047d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800466a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a49      	ldr	r2, [pc, #292]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004676:	4b49      	ldr	r3, [pc, #292]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004678:	e001      	b.n	800467e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800467a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4944      	ldr	r1, [pc, #272]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004686:	428b      	cmp	r3, r1
 8004688:	d101      	bne.n	800468e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800468a:	4b44      	ldr	r3, [pc, #272]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800468c:	e001      	b.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800468e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004692:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004696:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b2:	f043 0204 	orr.w	r2, r3, #4
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fe4a 	bl	8004354 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046c0:	e089      	b.n	80047d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d107      	bne.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8be 	bl	8004858 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8fd 	bl	80048f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d12f      	bne.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d02a      	beq.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004718:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004726:	e001      	b.n	800472c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004728:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4919      	ldr	r1, [pc, #100]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004734:	428b      	cmp	r3, r1
 8004736:	d101      	bne.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004738:	4b18      	ldr	r3, [pc, #96]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800473a:	e001      	b.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800473c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004740:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004744:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	f043 0202 	orr.w	r2, r3, #2
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fdfa 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b08      	cmp	r3, #8
 8004768:	d136      	bne.n	80047d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d031      	beq.n	80047d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a07      	ldr	r2, [pc, #28]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d101      	bne.n	8004782 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004780:	e001      	b.n	8004786 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4902      	ldr	r1, [pc, #8]	; (8004798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800478e:	428b      	cmp	r3, r1
 8004790:	d106      	bne.n	80047a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004792:	4b02      	ldr	r3, [pc, #8]	; (800479c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004794:	e006      	b.n	80047a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004796:	bf00      	nop
 8004798:	40003800 	.word	0x40003800
 800479c:	40003400 	.word	0x40003400
 80047a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	f043 0204 	orr.w	r2, r3, #4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fdc0 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047d4:	e000      	b.n	80047d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047d6:	bf00      	nop
}
 80047d8:	bf00      	nop
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c99      	adds	r1, r3, #2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6251      	str	r1, [r2, #36]	; 0x24
 8004806:	881a      	ldrh	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d113      	bne.n	800484e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004834:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff ffc9 	bl	80047e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	1c99      	adds	r1, r3, #2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6251      	str	r1, [r2, #36]	; 0x24
 800486a:	8819      	ldrh	r1, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <I2SEx_TxISR_I2SExt+0x90>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <I2SEx_TxISR_I2SExt+0x22>
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <I2SEx_TxISR_I2SExt+0x94>)
 8004878:	e001      	b.n	800487e <I2SEx_TxISR_I2SExt+0x26>
 800487a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800487e:	460a      	mov	r2, r1
 8004880:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d121      	bne.n	80048de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <I2SEx_TxISR_I2SExt+0x90>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d101      	bne.n	80048a8 <I2SEx_TxISR_I2SExt+0x50>
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <I2SEx_TxISR_I2SExt+0x94>)
 80048a6:	e001      	b.n	80048ac <I2SEx_TxISR_I2SExt+0x54>
 80048a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	490d      	ldr	r1, [pc, #52]	; (80048e8 <I2SEx_TxISR_I2SExt+0x90>)
 80048b4:	428b      	cmp	r3, r1
 80048b6:	d101      	bne.n	80048bc <I2SEx_TxISR_I2SExt+0x64>
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <I2SEx_TxISR_I2SExt+0x94>)
 80048ba:	e001      	b.n	80048c0 <I2SEx_TxISR_I2SExt+0x68>
 80048bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ff81 	bl	80047e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40003800 	.word	0x40003800
 80048ec:	40003400 	.word	0x40003400

080048f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68d8      	ldr	r0, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	1c99      	adds	r1, r3, #2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004908:	b282      	uxth	r2, r0
 800490a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d113      	bne.n	800494c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004932:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff ff4a 	bl	80047e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <I2SEx_RxISR_I2SExt+0x90>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d101      	bne.n	800496a <I2SEx_RxISR_I2SExt+0x16>
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <I2SEx_RxISR_I2SExt+0x94>)
 8004968:	e001      	b.n	800496e <I2SEx_RxISR_I2SExt+0x1a>
 800496a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800496e:	68d8      	ldr	r0, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	1c99      	adds	r1, r3, #2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	62d1      	str	r1, [r2, #44]	; 0x2c
 800497a:	b282      	uxth	r2, r0
 800497c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d121      	bne.n	80049da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <I2SEx_RxISR_I2SExt+0x90>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <I2SEx_RxISR_I2SExt+0x50>
 80049a0:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <I2SEx_RxISR_I2SExt+0x94>)
 80049a2:	e001      	b.n	80049a8 <I2SEx_RxISR_I2SExt+0x54>
 80049a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	490d      	ldr	r1, [pc, #52]	; (80049e4 <I2SEx_RxISR_I2SExt+0x90>)
 80049b0:	428b      	cmp	r3, r1
 80049b2:	d101      	bne.n	80049b8 <I2SEx_RxISR_I2SExt+0x64>
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <I2SEx_RxISR_I2SExt+0x94>)
 80049b6:	e001      	b.n	80049bc <I2SEx_RxISR_I2SExt+0x68>
 80049b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ff03 	bl	80047e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40003800 	.word	0x40003800
 80049e8:	40003400 	.word	0x40003400

080049ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e267      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d075      	beq.n	8004af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a0a:	4b88      	ldr	r3, [pc, #544]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d00c      	beq.n	8004a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a16:	4b85      	ldr	r3, [pc, #532]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d112      	bne.n	8004a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a22:	4b82      	ldr	r3, [pc, #520]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2e:	d10b      	bne.n	8004a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a30:	4b7e      	ldr	r3, [pc, #504]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d05b      	beq.n	8004af4 <HAL_RCC_OscConfig+0x108>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d157      	bne.n	8004af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e242      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d106      	bne.n	8004a60 <HAL_RCC_OscConfig+0x74>
 8004a52:	4b76      	ldr	r3, [pc, #472]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a75      	ldr	r2, [pc, #468]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e01d      	b.n	8004a9c <HAL_RCC_OscConfig+0xb0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x98>
 8004a6a:	4b70      	ldr	r3, [pc, #448]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6f      	ldr	r2, [pc, #444]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b6d      	ldr	r3, [pc, #436]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6c      	ldr	r2, [pc, #432]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0xb0>
 8004a84:	4b69      	ldr	r3, [pc, #420]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a68      	ldr	r2, [pc, #416]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b66      	ldr	r3, [pc, #408]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a65      	ldr	r2, [pc, #404]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fa12 	bl	8001ecc <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fd fa0e 	bl	8001ecc <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e207      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b5b      	ldr	r3, [pc, #364]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0xc0>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd f9fe 	bl	8001ecc <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd f9fa 	bl	8001ecc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e1f3      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae6:	4b51      	ldr	r3, [pc, #324]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0xe8>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d063      	beq.n	8004bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b02:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d11c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1a:	4b44      	ldr	r3, [pc, #272]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x152>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1c7      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4937      	ldr	r1, [pc, #220]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b52:	e03a      	b.n	8004bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b5c:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <HAL_RCC_OscConfig+0x244>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fd f9b3 	bl	8001ecc <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fd f9af 	bl	8001ecc <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1a8      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4925      	ldr	r1, [pc, #148]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCC_OscConfig+0x244>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd f992 	bl	8001ecc <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fd f98e 	bl	8001ecc <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e187      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d036      	beq.n	8004c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <HAL_RCC_OscConfig+0x248>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fd f972 	bl	8001ecc <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fd f96e 	bl	8001ecc <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e167      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_OscConfig+0x240>)
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x200>
 8004c0a:	e01b      	b.n	8004c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_OscConfig+0x248>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c12:	f7fd f95b 	bl	8001ecc <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c18:	e00e      	b.n	8004c38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c1a:	f7fd f957 	bl	8001ecc <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d907      	bls.n	8004c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e150      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	42470000 	.word	0x42470000
 8004c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b88      	ldr	r3, [pc, #544]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ea      	bne.n	8004c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8097 	beq.w	8004d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b81      	ldr	r3, [pc, #516]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	4b7d      	ldr	r3, [pc, #500]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	4a7c      	ldr	r2, [pc, #496]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	; 0x40
 8004c72:	4b7a      	ldr	r3, [pc, #488]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b77      	ldr	r3, [pc, #476]	; (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b74      	ldr	r3, [pc, #464]	; (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a73      	ldr	r2, [pc, #460]	; (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fd f917 	bl	8001ecc <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca2:	f7fd f913 	bl	8001ecc <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e10c      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b6a      	ldr	r3, [pc, #424]	; (8004e60 <HAL_RCC_OscConfig+0x474>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x2ea>
 8004cc8:	4b64      	ldr	r3, [pc, #400]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a63      	ldr	r2, [pc, #396]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x324>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x30c>
 8004cde:	4b5f      	ldr	r3, [pc, #380]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	4a5e      	ldr	r2, [pc, #376]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cea:	4b5c      	ldr	r3, [pc, #368]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a5b      	ldr	r2, [pc, #364]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x324>
 8004cf8:	4b58      	ldr	r3, [pc, #352]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	4a57      	ldr	r2, [pc, #348]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70
 8004d04:	4b55      	ldr	r3, [pc, #340]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a54      	ldr	r2, [pc, #336]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd f8d8 	bl	8001ecc <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fd f8d4 	bl	8001ecc <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0cb      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d36:	4b49      	ldr	r3, [pc, #292]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RCC_OscConfig+0x334>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d44:	f7fd f8c2 	bl	8001ecc <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fd f8be 	bl	8001ecc <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0b5      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	4b3e      	ldr	r3, [pc, #248]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d74:	4b39      	ldr	r3, [pc, #228]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	4a38      	ldr	r2, [pc, #224]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80a1 	beq.w	8004ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d8a:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d05c      	beq.n	8004e50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d141      	bne.n	8004e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da4:	f7fd f892 	bl	8001ecc <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fd f88e 	bl	8001ecc <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e087      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	3b01      	subs	r3, #1
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	491b      	ldr	r1, [pc, #108]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfa:	f7fd f867 	bl	8001ecc <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e02:	f7fd f863 	bl	8001ecc <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e05c      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e14:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f0      	beq.n	8004e02 <HAL_RCC_OscConfig+0x416>
 8004e20:	e054      	b.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <HAL_RCC_OscConfig+0x478>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fd f850 	bl	8001ecc <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e30:	f7fd f84c 	bl	8001ecc <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e045      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCC_OscConfig+0x470>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x444>
 8004e4e:	e03d      	b.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e038      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40007000 	.word	0x40007000
 8004e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <HAL_RCC_OscConfig+0x4ec>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d028      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d121      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d11a      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d111      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800

08004edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0cc      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b68      	ldr	r3, [pc, #416]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d90c      	bls.n	8004f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b65      	ldr	r3, [pc, #404]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b63      	ldr	r3, [pc, #396]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0b8      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f30:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a58      	ldr	r2, [pc, #352]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f48:	4b53      	ldr	r3, [pc, #332]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a52      	ldr	r2, [pc, #328]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b50      	ldr	r3, [pc, #320]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	494d      	ldr	r1, [pc, #308]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d044      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b47      	ldr	r3, [pc, #284]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d119      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d003      	beq.n	8004f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9a:	4b3f      	ldr	r3, [pc, #252]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e06f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004faa:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e067      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fba:	4b37      	ldr	r3, [pc, #220]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f023 0203 	bic.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4934      	ldr	r1, [pc, #208]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fcc:	f7fc ff7e 	bl	8001ecc <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd4:	f7fc ff7a 	bl	8001ecc <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e04f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	4b2b      	ldr	r3, [pc, #172]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 020c 	and.w	r2, r3, #12
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d1eb      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b25      	ldr	r3, [pc, #148]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d20c      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e032      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4916      	ldr	r1, [pc, #88]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	490e      	ldr	r1, [pc, #56]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005062:	f000 f821 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 8005066:	4602      	mov	r2, r0
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	490a      	ldr	r1, [pc, #40]	; (800509c <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	5ccb      	ldrb	r3, [r1, r3]
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fc fede 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023c00 	.word	0x40023c00
 8005098:	40023800 	.word	0x40023800
 800509c:	0800d510 	.word	0x0800d510
 80050a0:	20000000 	.word	0x20000000
 80050a4:	20000004 	.word	0x20000004

080050a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050ac:	b094      	sub	sp, #80	; 0x50
 80050ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	647b      	str	r3, [r7, #68]	; 0x44
 80050b4:	2300      	movs	r3, #0
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b8:	2300      	movs	r3, #0
 80050ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050c0:	4b79      	ldr	r3, [pc, #484]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d00d      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x40>
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	f200 80e1 	bhi.w	8005294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x34>
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d003      	beq.n	80050e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80050da:	e0db      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050dc:	4b73      	ldr	r3, [pc, #460]	; (80052ac <HAL_RCC_GetSysClockFreq+0x204>)
 80050de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050e0:	e0db      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050e2:	4b73      	ldr	r3, [pc, #460]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80050e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050e6:	e0d8      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e8:	4b6f      	ldr	r3, [pc, #444]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050f2:	4b6d      	ldr	r3, [pc, #436]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fe:	4b6a      	ldr	r3, [pc, #424]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	099b      	lsrs	r3, r3, #6
 8005104:	2200      	movs	r2, #0
 8005106:	63bb      	str	r3, [r7, #56]	; 0x38
 8005108:	63fa      	str	r2, [r7, #60]	; 0x3c
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005110:	633b      	str	r3, [r7, #48]	; 0x30
 8005112:	2300      	movs	r3, #0
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
 8005116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	f04f 0000 	mov.w	r0, #0
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	0159      	lsls	r1, r3, #5
 8005128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800512c:	0150      	lsls	r0, r2, #5
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4621      	mov	r1, r4
 8005134:	1a51      	subs	r1, r2, r1
 8005136:	6139      	str	r1, [r7, #16]
 8005138:	4629      	mov	r1, r5
 800513a:	eb63 0301 	sbc.w	r3, r3, r1
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800514c:	4659      	mov	r1, fp
 800514e:	018b      	lsls	r3, r1, #6
 8005150:	4651      	mov	r1, sl
 8005152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005156:	4651      	mov	r1, sl
 8005158:	018a      	lsls	r2, r1, #6
 800515a:	4651      	mov	r1, sl
 800515c:	ebb2 0801 	subs.w	r8, r2, r1
 8005160:	4659      	mov	r1, fp
 8005162:	eb63 0901 	sbc.w	r9, r3, r1
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800517a:	4690      	mov	r8, r2
 800517c:	4699      	mov	r9, r3
 800517e:	4623      	mov	r3, r4
 8005180:	eb18 0303 	adds.w	r3, r8, r3
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	462b      	mov	r3, r5
 8005188:	eb49 0303 	adc.w	r3, r9, r3
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800519a:	4629      	mov	r1, r5
 800519c:	024b      	lsls	r3, r1, #9
 800519e:	4621      	mov	r1, r4
 80051a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051a4:	4621      	mov	r1, r4
 80051a6:	024a      	lsls	r2, r1, #9
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ae:	2200      	movs	r2, #0
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051b8:	f7fb fcf6 	bl	8000ba8 <__aeabi_uldivmod>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4613      	mov	r3, r2
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c4:	e058      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c6:	4b38      	ldr	r3, [pc, #224]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	2200      	movs	r2, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	4611      	mov	r1, r2
 80051d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051d6:	623b      	str	r3, [r7, #32]
 80051d8:	2300      	movs	r3, #0
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
 80051dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	0159      	lsls	r1, r3, #5
 80051ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f2:	0150      	lsls	r0, r2, #5
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4641      	mov	r1, r8
 80051fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80051fe:	4649      	mov	r1, r9
 8005200:	eb63 0b01 	sbc.w	fp, r3, r1
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005218:	ebb2 040a 	subs.w	r4, r2, sl
 800521c:	eb63 050b 	sbc.w	r5, r3, fp
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	00eb      	lsls	r3, r5, #3
 800522a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522e:	00e2      	lsls	r2, r4, #3
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	4643      	mov	r3, r8
 8005236:	18e3      	adds	r3, r4, r3
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	464b      	mov	r3, r9
 800523c:	eb45 0303 	adc.w	r3, r5, r3
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800524e:	4629      	mov	r1, r5
 8005250:	028b      	lsls	r3, r1, #10
 8005252:	4621      	mov	r1, r4
 8005254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005258:	4621      	mov	r1, r4
 800525a:	028a      	lsls	r2, r1, #10
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005262:	2200      	movs	r2, #0
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	61fa      	str	r2, [r7, #28]
 8005268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526c:	f7fb fc9c 	bl	8000ba8 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	3301      	adds	r3, #1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800528a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005292:	e002      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005296:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800529c:	4618      	mov	r0, r3
 800529e:	3750      	adds	r7, #80	; 0x50
 80052a0:	46bd      	mov	sp, r7
 80052a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	007a1200 	.word	0x007a1200

080052b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000000 	.word	0x20000000

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0a9b      	lsrs	r3, r3, #10
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4903      	ldr	r1, [pc, #12]	; (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800
 80052f0:	0800d520 	.word	0x0800d520

080052f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052f8:	f7ff ffdc 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0b5b      	lsrs	r3, r3, #13
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	; (8005318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	0800d520 	.word	0x0800d520

0800531c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005340:	2b00      	cmp	r3, #0
 8005342:	d035      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005344:	4b62      	ldr	r3, [pc, #392]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800534a:	f7fc fdbf 	bl	8001ecc <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005352:	f7fc fdbb 	bl	8001ecc <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0b0      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005364:	4b5b      	ldr	r3, [pc, #364]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	019a      	lsls	r2, r3, #6
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	071b      	lsls	r3, r3, #28
 800537c:	4955      	ldr	r1, [pc, #340]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005384:	4b52      	ldr	r3, [pc, #328]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800538a:	f7fc fd9f 	bl	8001ecc <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005392:	f7fc fd9b 	bl	8001ecc <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e090      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a4:	4b4b      	ldr	r3, [pc, #300]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8083 	beq.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	4b44      	ldr	r3, [pc, #272]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	4a43      	ldr	r2, [pc, #268]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053cc:	6413      	str	r3, [r2, #64]	; 0x40
 80053ce:	4b41      	ldr	r3, [pc, #260]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053da:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3e      	ldr	r2, [pc, #248]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053e6:	f7fc fd71 	bl	8001ecc <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053ee:	f7fc fd6d 	bl	8001ecc <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e062      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005400:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800540c:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005414:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02f      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	429a      	cmp	r2, r3
 8005428:	d028      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800542a:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005432:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005434:	4b29      	ldr	r3, [pc, #164]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800543a:	4b28      	ldr	r3, [pc, #160]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005440:	4a24      	ldr	r2, [pc, #144]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005446:	4b23      	ldr	r3, [pc, #140]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d114      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005452:	f7fc fd3b 	bl	8001ecc <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005458:	e00a      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc fd37 	bl	8001ecc <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	; 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e02a      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ee      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005488:	d10d      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800549a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549e:	490d      	ldr	r1, [pc, #52]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]
 80054a4:	e005      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054b0:	6093      	str	r3, [r2, #8]
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054be:	4905      	ldr	r1, [pc, #20]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	42470068 	.word	0x42470068
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40007000 	.word	0x40007000
 80054dc:	42470e40 	.word	0x42470e40

080054e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d13e      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80054fe:	4b23      	ldr	r3, [pc, #140]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d12f      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005514:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005516:	617b      	str	r3, [r7, #20]
          break;
 8005518:	e02f      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800551a:	4b1c      	ldr	r3, [pc, #112]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005526:	d108      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005528:	4b18      	ldr	r3, [pc, #96]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	e007      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005542:	4a15      	ldr	r2, [pc, #84]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800554a:	4b10      	ldr	r3, [pc, #64]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800554c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005564:	0f1b      	lsrs	r3, r3, #28
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	617b      	str	r3, [r7, #20]
          break;
 8005572:	e002      	b.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
          break;
 8005578:	bf00      	nop
        }
      }
      break;
 800557a:	bf00      	nop
    }
  }
  return frequency;
 800557c:	697b      	ldr	r3, [r7, #20]
}
 800557e:	4618      	mov	r0, r3
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800
 8005590:	00bb8000 	.word	0x00bb8000
 8005594:	007a1200 	.word	0x007a1200
 8005598:	00f42400 	.word	0x00f42400

0800559c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e07b      	b.n	80056a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d108      	bne.n	80055c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055be:	d009      	beq.n	80055d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	61da      	str	r2, [r3, #28]
 80055c6:	e005      	b.n	80055d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc fa0c 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800560a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	ea42 0103 	orr.w	r1, r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	0c1b      	lsrs	r3, r3, #16
 8005672:	f003 0104 	and.w	r1, r3, #4
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	f003 0210 	and.w	r2, r3, #16
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005694:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b088      	sub	sp, #32
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_SPI_Transmit+0x22>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e126      	b.n	800591e <HAL_SPI_Transmit+0x270>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d8:	f7fc fbf8 	bl	8001ecc <HAL_GetTick>
 80056dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d002      	beq.n	80056f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
 80056f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056f2:	e10b      	b.n	800590c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_SPI_Transmit+0x52>
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005704:	e102      	b.n	800590c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2203      	movs	r2, #3
 800570a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	88fa      	ldrh	r2, [r7, #6]
 800571e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800574c:	d10f      	bne.n	800576e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800576c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d007      	beq.n	800578c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800578a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005794:	d14b      	bne.n	800582e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_SPI_Transmit+0xf6>
 800579e:	8afb      	ldrh	r3, [r7, #22]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d13e      	bne.n	8005822 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	881a      	ldrh	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	1c9a      	adds	r2, r3, #2
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057c8:	e02b      	b.n	8005822 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d112      	bne.n	80057fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057dc:	881a      	ldrh	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	1c9a      	adds	r2, r3, #2
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80057fc:	e011      	b.n	8005822 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057fe:	f7fc fb65 	bl	8001ecc <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d803      	bhi.n	8005816 <HAL_SPI_Transmit+0x168>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d102      	bne.n	800581c <HAL_SPI_Transmit+0x16e>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005820:	e074      	b.n	800590c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1ce      	bne.n	80057ca <HAL_SPI_Transmit+0x11c>
 800582c:	e04c      	b.n	80058c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <HAL_SPI_Transmit+0x18e>
 8005836:	8afb      	ldrh	r3, [r7, #22]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d140      	bne.n	80058be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	7812      	ldrb	r2, [r2, #0]
 8005848:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005862:	e02c      	b.n	80058be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d113      	bne.n	800589a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	86da      	strh	r2, [r3, #54]	; 0x36
 8005898:	e011      	b.n	80058be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800589a:	f7fc fb17 	bl	8001ecc <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d803      	bhi.n	80058b2 <HAL_SPI_Transmit+0x204>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d102      	bne.n	80058b8 <HAL_SPI_Transmit+0x20a>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058bc:	e026      	b.n	800590c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1cd      	bne.n	8005864 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fa55 	bl	8005d7c <SPI_EndRxTxTransaction>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e000      	b.n	800590c <HAL_SPI_Transmit+0x25e>
  }

error:
 800590a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800591c:	7ffb      	ldrb	r3, [r7, #31]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b08c      	sub	sp, #48	; 0x30
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005934:	2301      	movs	r3, #1
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_SPI_TransmitReceive+0x26>
 8005948:	2302      	movs	r3, #2
 800594a:	e18a      	b.n	8005c62 <HAL_SPI_TransmitReceive+0x33c>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005954:	f7fc faba 	bl	8001ecc <HAL_GetTick>
 8005958:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800596a:	887b      	ldrh	r3, [r7, #2]
 800596c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800596e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005972:	2b01      	cmp	r3, #1
 8005974:	d00f      	beq.n	8005996 <HAL_SPI_TransmitReceive+0x70>
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597c:	d107      	bne.n	800598e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d103      	bne.n	800598e <HAL_SPI_TransmitReceive+0x68>
 8005986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800598a:	2b04      	cmp	r3, #4
 800598c:	d003      	beq.n	8005996 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800598e:	2302      	movs	r3, #2
 8005990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005994:	e15b      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_SPI_TransmitReceive+0x82>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_TransmitReceive+0x82>
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059ae:	e14e      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d003      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2205      	movs	r2, #5
 80059c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	887a      	ldrh	r2, [r7, #2]
 80059d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	887a      	ldrh	r2, [r7, #2]
 80059da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	887a      	ldrh	r2, [r7, #2]
 80059e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	887a      	ldrh	r2, [r7, #2]
 80059ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	d007      	beq.n	8005a18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a20:	d178      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x10a>
 8005a2a:	8b7b      	ldrh	r3, [r7, #26]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d166      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	881a      	ldrh	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	1c9a      	adds	r2, r3, #2
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a54:	e053      	b.n	8005afe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d11b      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x176>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <HAL_SPI_TransmitReceive+0x176>
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d113      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	881a      	ldrh	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	1c9a      	adds	r2, r3, #2
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d119      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x1b8>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d014      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	b292      	uxth	r2, r2
 8005ac0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	1c9a      	adds	r2, r3, #2
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ada:	2301      	movs	r3, #1
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ade:	f7fc f9f5 	bl	8001ecc <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d807      	bhi.n	8005afe <HAL_SPI_TransmitReceive+0x1d8>
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d003      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005afc:	e0a7      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1a6      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x130>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1a1      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x130>
 8005b12:	e07c      	b.n	8005c0e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_TransmitReceive+0x1fc>
 8005b1c:	8b7b      	ldrh	r3, [r7, #26]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d16b      	bne.n	8005bfa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b48:	e057      	b.n	8005bfa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d11c      	bne.n	8005b92 <HAL_SPI_TransmitReceive+0x26c>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d017      	beq.n	8005b92 <HAL_SPI_TransmitReceive+0x26c>
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d114      	bne.n	8005b92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	7812      	ldrb	r2, [r2, #0]
 8005b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d119      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x2ae>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d014      	beq.n	8005bd4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bd4:	f7fc f97a 	bl	8001ecc <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d803      	bhi.n	8005bec <HAL_SPI_TransmitReceive+0x2c6>
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d102      	bne.n	8005bf2 <HAL_SPI_TransmitReceive+0x2cc>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bf8:	e029      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1a2      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x224>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d19d      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8b2 	bl	8005d7c <SPI_EndRxTxTransaction>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d006      	beq.n	8005c2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c2a:	e010      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	e000      	b.n	8005c4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3730      	adds	r7, #48	; 0x30
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c7c:	f7fc f926 	bl	8001ecc <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	4413      	add	r3, r2
 8005c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c8c:	f7fc f91e 	bl	8001ecc <HAL_GetTick>
 8005c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c92:	4b39      	ldr	r3, [pc, #228]	; (8005d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	015b      	lsls	r3, r3, #5
 8005c98:	0d1b      	lsrs	r3, r3, #20
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	e054      	b.n	8005d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d050      	beq.n	8005d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cac:	f7fc f90e 	bl	8001ecc <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d902      	bls.n	8005cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d13d      	bne.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cda:	d111      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce4:	d004      	beq.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cee:	d107      	bne.n	8005d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d08:	d10f      	bne.n	8005d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e017      	b.n	8005d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4013      	ands	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2301      	moveq	r3, #1
 8005d60:	2300      	movne	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d19b      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3720      	adds	r7, #32
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000000 	.word	0x20000000

08005d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d88:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <SPI_EndRxTxTransaction+0x7c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <SPI_EndRxTxTransaction+0x80>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0d5b      	lsrs	r3, r3, #21
 8005d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da6:	d112      	bne.n	8005dce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2200      	movs	r2, #0
 8005db0:	2180      	movs	r1, #128	; 0x80
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff ff5a 	bl	8005c6c <SPI_WaitFlagStateUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	f043 0220 	orr.w	r2, r3, #32
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e00f      	b.n	8005dee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d0f2      	beq.n	8005dce <SPI_EndRxTxTransaction+0x52>
 8005de8:	e000      	b.n	8005dec <SPI_EndRxTxTransaction+0x70>
        break;
 8005dea:	bf00      	nop
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000000 	.word	0x20000000
 8005dfc:	165e9f81 	.word	0x165e9f81

08005e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e041      	b.n	8005e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fb fe38 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f000 f896 	bl	8005f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d001      	beq.n	8005eb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e046      	b.n	8005f46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a23      	ldr	r2, [pc, #140]	; (8005f54 <HAL_TIM_Base_Start+0xb4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d022      	beq.n	8005f10 <HAL_TIM_Base_Start+0x70>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed2:	d01d      	beq.n	8005f10 <HAL_TIM_Base_Start+0x70>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <HAL_TIM_Base_Start+0xb8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d018      	beq.n	8005f10 <HAL_TIM_Base_Start+0x70>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <HAL_TIM_Base_Start+0xbc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <HAL_TIM_Base_Start+0x70>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1c      	ldr	r2, [pc, #112]	; (8005f60 <HAL_TIM_Base_Start+0xc0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00e      	beq.n	8005f10 <HAL_TIM_Base_Start+0x70>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_TIM_Base_Start+0xc4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d009      	beq.n	8005f10 <HAL_TIM_Base_Start+0x70>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a19      	ldr	r2, [pc, #100]	; (8005f68 <HAL_TIM_Base_Start+0xc8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d004      	beq.n	8005f10 <HAL_TIM_Base_Start+0x70>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <HAL_TIM_Base_Start+0xcc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d111      	bne.n	8005f34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b06      	cmp	r3, #6
 8005f20:	d010      	beq.n	8005f44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0201 	orr.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f32:	e007      	b.n	8005f44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40001800 	.word	0x40001800

08005f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a40      	ldr	r2, [pc, #256]	; (8006084 <TIM_Base_SetConfig+0x114>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8e:	d00f      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3d      	ldr	r2, [pc, #244]	; (8006088 <TIM_Base_SetConfig+0x118>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a3c      	ldr	r2, [pc, #240]	; (800608c <TIM_Base_SetConfig+0x11c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a3b      	ldr	r2, [pc, #236]	; (8006090 <TIM_Base_SetConfig+0x120>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a3a      	ldr	r2, [pc, #232]	; (8006094 <TIM_Base_SetConfig+0x124>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d108      	bne.n	8005fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2f      	ldr	r2, [pc, #188]	; (8006084 <TIM_Base_SetConfig+0x114>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d02b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d027      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <TIM_Base_SetConfig+0x118>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d023      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	; (800608c <TIM_Base_SetConfig+0x11c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01f      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <TIM_Base_SetConfig+0x120>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a29      	ldr	r2, [pc, #164]	; (8006094 <TIM_Base_SetConfig+0x124>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d017      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a28      	ldr	r2, [pc, #160]	; (8006098 <TIM_Base_SetConfig+0x128>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d013      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a27      	ldr	r2, [pc, #156]	; (800609c <TIM_Base_SetConfig+0x12c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00f      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <TIM_Base_SetConfig+0x130>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00b      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a25      	ldr	r2, [pc, #148]	; (80060a4 <TIM_Base_SetConfig+0x134>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a24      	ldr	r2, [pc, #144]	; (80060a8 <TIM_Base_SetConfig+0x138>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a23      	ldr	r2, [pc, #140]	; (80060ac <TIM_Base_SetConfig+0x13c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d108      	bne.n	8006034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a0a      	ldr	r2, [pc, #40]	; (8006084 <TIM_Base_SetConfig+0x114>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <TIM_Base_SetConfig+0x124>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d103      	bne.n	8006070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	615a      	str	r2, [r3, #20]
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40010000 	.word	0x40010000
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800
 8006090:	40000c00 	.word	0x40000c00
 8006094:	40010400 	.word	0x40010400
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800
 80060a4:	40001800 	.word	0x40001800
 80060a8:	40001c00 	.word	0x40001c00
 80060ac:	40002000 	.word	0x40002000

080060b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e03f      	b.n	8006142 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fb fd02 	bl	8001ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2224      	movs	r2, #36	; 0x24
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fd7b 	bl	8006bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b08a      	sub	sp, #40	; 0x28
 800614e:	af02      	add	r7, sp, #8
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b20      	cmp	r3, #32
 8006168:	d17c      	bne.n	8006264 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <HAL_UART_Transmit+0x2c>
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e075      	b.n	8006266 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_UART_Transmit+0x3e>
 8006184:	2302      	movs	r3, #2
 8006186:	e06e      	b.n	8006266 <HAL_UART_Transmit+0x11c>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2221      	movs	r2, #33	; 0x21
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800619e:	f7fb fe95 	bl	8001ecc <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d108      	bne.n	80061cc <HAL_UART_Transmit+0x82>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e003      	b.n	80061d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061dc:	e02a      	b.n	8006234 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2180      	movs	r1, #128	; 0x80
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 faf9 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e036      	b.n	8006266 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	3302      	adds	r3, #2
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e007      	b.n	8006226 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	781a      	ldrb	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1cf      	bne.n	80061de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	2140      	movs	r1, #64	; 0x40
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fac9 	bl	80067e0 <UART_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e006      	b.n	8006266 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	e000      	b.n	8006266 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006264:	2302      	movs	r3, #2
  }
}
 8006266:	4618      	mov	r0, r3
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b0ba      	sub	sp, #232	; 0xe8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006296:	2300      	movs	r3, #0
 8006298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800629c:	2300      	movs	r3, #0
 800629e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <HAL_UART_IRQHandler+0x66>
 80062c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fbd3 	bl	8006a7a <UART_Receive_IT>
      return;
 80062d4:	e256      	b.n	8006784 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80de 	beq.w	800649c <HAL_UART_IRQHandler+0x22c>
 80062e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80d1 	beq.w	800649c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0xae>
 8006306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f043 0201 	orr.w	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_UART_IRQHandler+0xd2>
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0202 	orr.w	r2, r3, #2
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <HAL_UART_IRQHandler+0xf6>
 800634e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f043 0204 	orr.w	r2, r3, #4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d011      	beq.n	8006396 <HAL_UART_IRQHandler+0x126>
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800637e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f043 0208 	orr.w	r2, r3, #8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 81ed 	beq.w	800677a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_UART_IRQHandler+0x14e>
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fb5e 	bl	8006a7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	bf0c      	ite	eq
 80063cc:	2301      	moveq	r3, #1
 80063ce:	2300      	movne	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d103      	bne.n	80063ea <HAL_UART_IRQHandler+0x17a>
 80063e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d04f      	beq.n	800648a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa66 	bl	80068bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d141      	bne.n	8006482 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3314      	adds	r3, #20
 8006404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800642a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800642e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1d9      	bne.n	80063fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	2b00      	cmp	r3, #0
 8006450:	d013      	beq.n	800647a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	4a7d      	ldr	r2, [pc, #500]	; (800664c <HAL_UART_IRQHandler+0x3dc>)
 8006458:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	4618      	mov	r0, r3
 8006460:	f7fb fee5 	bl	800222e <HAL_DMA_Abort_IT>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	e00e      	b.n	8006498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f99a 	bl	80067b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	e00a      	b.n	8006498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f996 	bl	80067b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	e006      	b.n	8006498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f992 	bl	80067b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006496:	e170      	b.n	800677a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006498:	bf00      	nop
    return;
 800649a:	e16e      	b.n	800677a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	f040 814a 	bne.w	800673a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8143 	beq.w	800673a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 813c 	beq.w	800673a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064c2:	2300      	movs	r3, #0
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	f040 80b4 	bne.w	8006650 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8140 	beq.w	800677e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006506:	429a      	cmp	r2, r3
 8006508:	f080 8139 	bcs.w	800677e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006512:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651e:	f000 8088 	beq.w	8006632 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800653c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800654e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800655a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1d9      	bne.n	8006522 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3314      	adds	r3, #20
 8006574:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800657e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3314      	adds	r3, #20
 800658e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006592:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006596:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800659a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e1      	bne.n	800656e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3314      	adds	r3, #20
 80065b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3314      	adds	r3, #20
 80065ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e3      	bne.n	80065aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	330c      	adds	r3, #12
 80065f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006602:	f023 0310 	bic.w	r3, r3, #16
 8006606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	330c      	adds	r3, #12
 8006610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006614:	65ba      	str	r2, [r7, #88]	; 0x58
 8006616:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800661a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e3      	bne.n	80065f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	4618      	mov	r0, r3
 800662e:	f7fb fd8e 	bl	800214e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800663a:	b29b      	uxth	r3, r3
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	b29b      	uxth	r3, r3
 8006640:	4619      	mov	r1, r3
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f8c0 	bl	80067c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006648:	e099      	b.n	800677e <HAL_UART_IRQHandler+0x50e>
 800664a:	bf00      	nop
 800664c:	08006983 	.word	0x08006983
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006658:	b29b      	uxth	r3, r3
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 808b 	beq.w	8006782 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800666c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8086 	beq.w	8006782 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800668c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800669a:	647a      	str	r2, [r7, #68]	; 0x44
 800669c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e3      	bne.n	8006676 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	623b      	str	r3, [r7, #32]
   return(result);
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3314      	adds	r3, #20
 80066ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066d2:	633a      	str	r2, [r7, #48]	; 0x30
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e3      	bne.n	80066ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	60fb      	str	r3, [r7, #12]
   return(result);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0310 	bic.w	r3, r3, #16
 800670a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006718:	61fa      	str	r2, [r7, #28]
 800671a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	69b9      	ldr	r1, [r7, #24]
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	617b      	str	r3, [r7, #20]
   return(result);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e3      	bne.n	80066f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800672c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f848 	bl	80067c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006738:	e023      	b.n	8006782 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_UART_IRQHandler+0x4ea>
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f929 	bl	80069aa <UART_Transmit_IT>
    return;
 8006758:	e014      	b.n	8006784 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <HAL_UART_IRQHandler+0x514>
 8006766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f969 	bl	8006a4a <UART_EndTransmit_IT>
    return;
 8006778:	e004      	b.n	8006784 <HAL_UART_IRQHandler+0x514>
    return;
 800677a:	bf00      	nop
 800677c:	e002      	b.n	8006784 <HAL_UART_IRQHandler+0x514>
      return;
 800677e:	bf00      	nop
 8006780:	e000      	b.n	8006784 <HAL_UART_IRQHandler+0x514>
      return;
 8006782:	bf00      	nop
  }
}
 8006784:	37e8      	adds	r7, #232	; 0xe8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop

0800678c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b090      	sub	sp, #64	; 0x40
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	603b      	str	r3, [r7, #0]
 80067ec:	4613      	mov	r3, r2
 80067ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f0:	e050      	b.n	8006894 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d04c      	beq.n	8006894 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <UART_WaitOnFlagUntilTimeout+0x30>
 8006800:	f7fb fb64 	bl	8001ecc <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800680c:	429a      	cmp	r2, r3
 800680e:	d241      	bcs.n	8006894 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	330c      	adds	r3, #12
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	330c      	adds	r3, #12
 800682e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006830:	637a      	str	r2, [r7, #52]	; 0x34
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e5      	bne.n	8006810 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3314      	adds	r3, #20
 800684a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	613b      	str	r3, [r7, #16]
   return(result);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	63bb      	str	r3, [r7, #56]	; 0x38
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3314      	adds	r3, #20
 8006862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006864:	623a      	str	r2, [r7, #32]
 8006866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	69f9      	ldr	r1, [r7, #28]
 800686a:	6a3a      	ldr	r2, [r7, #32]
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	61bb      	str	r3, [r7, #24]
   return(result);
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e5      	bne.n	8006844 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e00f      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4013      	ands	r3, r2
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	bf0c      	ite	eq
 80068a4:	2301      	moveq	r3, #1
 80068a6:	2300      	movne	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d09f      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3740      	adds	r7, #64	; 0x40
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b095      	sub	sp, #84	; 0x54
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068e4:	643a      	str	r2, [r7, #64]	; 0x40
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3314      	adds	r3, #20
 80068fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	61fb      	str	r3, [r7, #28]
   return(result);
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f023 0301 	bic.w	r3, r3, #1
 800690e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3314      	adds	r3, #20
 8006916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800691e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e5      	bne.n	80068f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	2b01      	cmp	r3, #1
 8006932:	d119      	bne.n	8006968 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	60bb      	str	r3, [r7, #8]
   return(result);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f023 0310 	bic.w	r3, r3, #16
 800694a:	647b      	str	r3, [r7, #68]	; 0x44
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	330c      	adds	r3, #12
 8006952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006954:	61ba      	str	r2, [r7, #24]
 8006956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6979      	ldr	r1, [r7, #20]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	613b      	str	r3, [r7, #16]
   return(result);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e5      	bne.n	8006934 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006976:	bf00      	nop
 8006978:	3754      	adds	r7, #84	; 0x54
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff ff09 	bl	80067b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b085      	sub	sp, #20
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b21      	cmp	r3, #33	; 0x21
 80069bc:	d13e      	bne.n	8006a3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c6:	d114      	bne.n	80069f2 <UART_Transmit_IT+0x48>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d110      	bne.n	80069f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	1c9a      	adds	r2, r3, #2
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	621a      	str	r2, [r3, #32]
 80069f0:	e008      	b.n	8006a04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6211      	str	r1, [r2, #32]
 80069fc:	781a      	ldrb	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4619      	mov	r1, r3
 8006a12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10f      	bne.n	8006a38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e000      	b.n	8006a3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a3c:	2302      	movs	r3, #2
  }
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fe8e 	bl	800678c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b08c      	sub	sp, #48	; 0x30
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b22      	cmp	r3, #34	; 0x22
 8006a8c:	f040 80ab 	bne.w	8006be6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a98:	d117      	bne.n	8006aca <UART_Receive_IT+0x50>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d113      	bne.n	8006aca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	1c9a      	adds	r2, r3, #2
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ac8:	e026      	b.n	8006b18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006adc:	d007      	beq.n	8006aee <UART_Receive_IT+0x74>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <UART_Receive_IT+0x82>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	e008      	b.n	8006b0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	4619      	mov	r1, r3
 8006b26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d15a      	bne.n	8006be2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0220 	bic.w	r2, r2, #32
 8006b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695a      	ldr	r2, [r3, #20]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 0201 	bic.w	r2, r2, #1
 8006b5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d135      	bne.n	8006bd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	613b      	str	r3, [r7, #16]
   return(result);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f023 0310 	bic.w	r3, r3, #16
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	330c      	adds	r3, #12
 8006b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b92:	623a      	str	r2, [r7, #32]
 8006b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	69f9      	ldr	r1, [r7, #28]
 8006b98:	6a3a      	ldr	r2, [r7, #32]
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e5      	bne.n	8006b72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d10a      	bne.n	8006bca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fdf9 	bl	80067c8 <HAL_UARTEx_RxEventCallback>
 8006bd6:	e002      	b.n	8006bde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff fde1 	bl	80067a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e002      	b.n	8006be8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3730      	adds	r7, #48	; 0x30
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf4:	b0c0      	sub	sp, #256	; 0x100
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	68d9      	ldr	r1, [r3, #12]
 8006c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	ea40 0301 	orr.w	r3, r0, r1
 8006c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c48:	f021 010c 	bic.w	r1, r1, #12
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c56:	430b      	orrs	r3, r1
 8006c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6a:	6999      	ldr	r1, [r3, #24]
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	ea40 0301 	orr.w	r3, r0, r1
 8006c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4b8f      	ldr	r3, [pc, #572]	; (8006ebc <UART_SetConfig+0x2cc>)
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d005      	beq.n	8006c90 <UART_SetConfig+0xa0>
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b8d      	ldr	r3, [pc, #564]	; (8006ec0 <UART_SetConfig+0x2d0>)
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d104      	bne.n	8006c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c90:	f7fe fb30 	bl	80052f4 <HAL_RCC_GetPCLK2Freq>
 8006c94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c98:	e003      	b.n	8006ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c9a:	f7fe fb17 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8006c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cac:	f040 810c 	bne.w	8006ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	1891      	adds	r1, r2, r2
 8006cc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cca:	415b      	adcs	r3, r3
 8006ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	eb12 0801 	adds.w	r8, r2, r1
 8006cd8:	4629      	mov	r1, r5
 8006cda:	eb43 0901 	adc.w	r9, r3, r1
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cf2:	4690      	mov	r8, r2
 8006cf4:	4699      	mov	r9, r3
 8006cf6:	4623      	mov	r3, r4
 8006cf8:	eb18 0303 	adds.w	r3, r8, r3
 8006cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d00:	462b      	mov	r3, r5
 8006d02:	eb49 0303 	adc.w	r3, r9, r3
 8006d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d1e:	460b      	mov	r3, r1
 8006d20:	18db      	adds	r3, r3, r3
 8006d22:	653b      	str	r3, [r7, #80]	; 0x50
 8006d24:	4613      	mov	r3, r2
 8006d26:	eb42 0303 	adc.w	r3, r2, r3
 8006d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d34:	f7f9 ff38 	bl	8000ba8 <__aeabi_uldivmod>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4b61      	ldr	r3, [pc, #388]	; (8006ec4 <UART_SetConfig+0x2d4>)
 8006d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	011c      	lsls	r4, r3, #4
 8006d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d58:	4642      	mov	r2, r8
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	1891      	adds	r1, r2, r2
 8006d5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d60:	415b      	adcs	r3, r3
 8006d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d68:	4641      	mov	r1, r8
 8006d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d6e:	4649      	mov	r1, r9
 8006d70:	eb43 0b01 	adc.w	fp, r3, r1
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d88:	4692      	mov	sl, r2
 8006d8a:	469b      	mov	fp, r3
 8006d8c:	4643      	mov	r3, r8
 8006d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d96:	464b      	mov	r3, r9
 8006d98:	eb4b 0303 	adc.w	r3, fp, r3
 8006d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006db4:	460b      	mov	r3, r1
 8006db6:	18db      	adds	r3, r3, r3
 8006db8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dba:	4613      	mov	r3, r2
 8006dbc:	eb42 0303 	adc.w	r3, r2, r3
 8006dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006dca:	f7f9 feed 	bl	8000ba8 <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4611      	mov	r1, r2
 8006dd4:	4b3b      	ldr	r3, [pc, #236]	; (8006ec4 <UART_SetConfig+0x2d4>)
 8006dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	2264      	movs	r2, #100	; 0x64
 8006dde:	fb02 f303 	mul.w	r3, r2, r3
 8006de2:	1acb      	subs	r3, r1, r3
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006dea:	4b36      	ldr	r3, [pc, #216]	; (8006ec4 <UART_SetConfig+0x2d4>)
 8006dec:	fba3 2302 	umull	r2, r3, r3, r2
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006df8:	441c      	add	r4, r3
 8006dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	464b      	mov	r3, r9
 8006e10:	1891      	adds	r1, r2, r2
 8006e12:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e14:	415b      	adcs	r3, r3
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	1851      	adds	r1, r2, r1
 8006e20:	6339      	str	r1, [r7, #48]	; 0x30
 8006e22:	4649      	mov	r1, r9
 8006e24:	414b      	adcs	r3, r1
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e34:	4659      	mov	r1, fp
 8006e36:	00cb      	lsls	r3, r1, #3
 8006e38:	4651      	mov	r1, sl
 8006e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3e:	4651      	mov	r1, sl
 8006e40:	00ca      	lsls	r2, r1, #3
 8006e42:	4610      	mov	r0, r2
 8006e44:	4619      	mov	r1, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	4642      	mov	r2, r8
 8006e4a:	189b      	adds	r3, r3, r2
 8006e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e50:	464b      	mov	r3, r9
 8006e52:	460a      	mov	r2, r1
 8006e54:	eb42 0303 	adc.w	r3, r2, r3
 8006e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e70:	460b      	mov	r3, r1
 8006e72:	18db      	adds	r3, r3, r3
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e76:	4613      	mov	r3, r2
 8006e78:	eb42 0303 	adc.w	r3, r2, r3
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e86:	f7f9 fe8f 	bl	8000ba8 <__aeabi_uldivmod>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <UART_SetConfig+0x2d4>)
 8006e90:	fba3 1302 	umull	r1, r3, r3, r2
 8006e94:	095b      	lsrs	r3, r3, #5
 8006e96:	2164      	movs	r1, #100	; 0x64
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	3332      	adds	r3, #50	; 0x32
 8006ea2:	4a08      	ldr	r2, [pc, #32]	; (8006ec4 <UART_SetConfig+0x2d4>)
 8006ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f003 0207 	and.w	r2, r3, #7
 8006eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4422      	add	r2, r4
 8006eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb8:	e105      	b.n	80070c6 <UART_SetConfig+0x4d6>
 8006eba:	bf00      	nop
 8006ebc:	40011000 	.word	0x40011000
 8006ec0:	40011400 	.word	0x40011400
 8006ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006eda:	4642      	mov	r2, r8
 8006edc:	464b      	mov	r3, r9
 8006ede:	1891      	adds	r1, r2, r2
 8006ee0:	6239      	str	r1, [r7, #32]
 8006ee2:	415b      	adcs	r3, r3
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eea:	4641      	mov	r1, r8
 8006eec:	1854      	adds	r4, r2, r1
 8006eee:	4649      	mov	r1, r9
 8006ef0:	eb43 0501 	adc.w	r5, r3, r1
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	f04f 0300 	mov.w	r3, #0
 8006efc:	00eb      	lsls	r3, r5, #3
 8006efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f02:	00e2      	lsls	r2, r4, #3
 8006f04:	4614      	mov	r4, r2
 8006f06:	461d      	mov	r5, r3
 8006f08:	4643      	mov	r3, r8
 8006f0a:	18e3      	adds	r3, r4, r3
 8006f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f10:	464b      	mov	r3, r9
 8006f12:	eb45 0303 	adc.w	r3, r5, r3
 8006f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f36:	4629      	mov	r1, r5
 8006f38:	008b      	lsls	r3, r1, #2
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f40:	4621      	mov	r1, r4
 8006f42:	008a      	lsls	r2, r1, #2
 8006f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f48:	f7f9 fe2e 	bl	8000ba8 <__aeabi_uldivmod>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4b60      	ldr	r3, [pc, #384]	; (80070d4 <UART_SetConfig+0x4e4>)
 8006f52:	fba3 2302 	umull	r2, r3, r3, r2
 8006f56:	095b      	lsrs	r3, r3, #5
 8006f58:	011c      	lsls	r4, r3, #4
 8006f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	1891      	adds	r1, r2, r2
 8006f72:	61b9      	str	r1, [r7, #24]
 8006f74:	415b      	adcs	r3, r3
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	1851      	adds	r1, r2, r1
 8006f80:	6139      	str	r1, [r7, #16]
 8006f82:	4649      	mov	r1, r9
 8006f84:	414b      	adcs	r3, r1
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f94:	4659      	mov	r1, fp
 8006f96:	00cb      	lsls	r3, r1, #3
 8006f98:	4651      	mov	r1, sl
 8006f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9e:	4651      	mov	r1, sl
 8006fa0:	00ca      	lsls	r2, r1, #3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4642      	mov	r2, r8
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	eb42 0303 	adc.w	r3, r2, r3
 8006fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	008b      	lsls	r3, r1, #2
 8006fd8:	4641      	mov	r1, r8
 8006fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fde:	4641      	mov	r1, r8
 8006fe0:	008a      	lsls	r2, r1, #2
 8006fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fe6:	f7f9 fddf 	bl	8000ba8 <__aeabi_uldivmod>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4b39      	ldr	r3, [pc, #228]	; (80070d4 <UART_SetConfig+0x4e4>)
 8006ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	2164      	movs	r1, #100	; 0x64
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	3332      	adds	r3, #50	; 0x32
 8007002:	4a34      	ldr	r2, [pc, #208]	; (80070d4 <UART_SetConfig+0x4e4>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800700e:	441c      	add	r4, r3
 8007010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007014:	2200      	movs	r2, #0
 8007016:	673b      	str	r3, [r7, #112]	; 0x70
 8007018:	677a      	str	r2, [r7, #116]	; 0x74
 800701a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800701e:	4642      	mov	r2, r8
 8007020:	464b      	mov	r3, r9
 8007022:	1891      	adds	r1, r2, r2
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	415b      	adcs	r3, r3
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800702e:	4641      	mov	r1, r8
 8007030:	1851      	adds	r1, r2, r1
 8007032:	6039      	str	r1, [r7, #0]
 8007034:	4649      	mov	r1, r9
 8007036:	414b      	adcs	r3, r1
 8007038:	607b      	str	r3, [r7, #4]
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007046:	4659      	mov	r1, fp
 8007048:	00cb      	lsls	r3, r1, #3
 800704a:	4651      	mov	r1, sl
 800704c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007050:	4651      	mov	r1, sl
 8007052:	00ca      	lsls	r2, r1, #3
 8007054:	4610      	mov	r0, r2
 8007056:	4619      	mov	r1, r3
 8007058:	4603      	mov	r3, r0
 800705a:	4642      	mov	r2, r8
 800705c:	189b      	adds	r3, r3, r2
 800705e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007060:	464b      	mov	r3, r9
 8007062:	460a      	mov	r2, r1
 8007064:	eb42 0303 	adc.w	r3, r2, r3
 8007068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800706a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	663b      	str	r3, [r7, #96]	; 0x60
 8007074:	667a      	str	r2, [r7, #100]	; 0x64
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007082:	4649      	mov	r1, r9
 8007084:	008b      	lsls	r3, r1, #2
 8007086:	4641      	mov	r1, r8
 8007088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800708c:	4641      	mov	r1, r8
 800708e:	008a      	lsls	r2, r1, #2
 8007090:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007094:	f7f9 fd88 	bl	8000ba8 <__aeabi_uldivmod>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <UART_SetConfig+0x4e4>)
 800709e:	fba3 1302 	umull	r1, r3, r3, r2
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	2164      	movs	r1, #100	; 0x64
 80070a6:	fb01 f303 	mul.w	r3, r1, r3
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	3332      	adds	r3, #50	; 0x32
 80070b0:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <UART_SetConfig+0x4e4>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4422      	add	r2, r4
 80070c4:	609a      	str	r2, [r3, #8]
}
 80070c6:	bf00      	nop
 80070c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070cc:	46bd      	mov	sp, r7
 80070ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070d2:	bf00      	nop
 80070d4:	51eb851f 	.word	0x51eb851f

080070d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070d8:	b084      	sub	sp, #16
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	f107 001c 	add.w	r0, r7, #28
 80070e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d122      	bne.n	8007136 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800711a:	2b01      	cmp	r3, #1
 800711c:	d105      	bne.n	800712a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f9c0 	bl	80074b0 <USB_CoreReset>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
 8007134:	e01a      	b.n	800716c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f9b4 	bl	80074b0 <USB_CoreReset>
 8007148:	4603      	mov	r3, r0
 800714a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800714c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
 800715e:	e005      	b.n	800716c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	2b01      	cmp	r3, #1
 8007170:	d10b      	bne.n	800718a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f043 0206 	orr.w	r2, r3, #6
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f043 0220 	orr.w	r2, r3, #32
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007196:	b004      	add	sp, #16
 8007198:	4770      	bx	lr

0800719a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f043 0201 	orr.w	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f023 0201 	bic.w	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d115      	bne.n	800722c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800720c:	2001      	movs	r0, #1
 800720e:	f7fa fe69 	bl	8001ee4 <HAL_Delay>
      ms++;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3301      	adds	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f93a 	bl	8007492 <USB_GetMode>
 800721e:	4603      	mov	r3, r0
 8007220:	2b01      	cmp	r3, #1
 8007222:	d01e      	beq.n	8007262 <USB_SetCurrentMode+0x84>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b31      	cmp	r3, #49	; 0x31
 8007228:	d9f0      	bls.n	800720c <USB_SetCurrentMode+0x2e>
 800722a:	e01a      	b.n	8007262 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d115      	bne.n	800725e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800723e:	2001      	movs	r0, #1
 8007240:	f7fa fe50 	bl	8001ee4 <HAL_Delay>
      ms++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f921 	bl	8007492 <USB_GetMode>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <USB_SetCurrentMode+0x84>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b31      	cmp	r3, #49	; 0x31
 800725a:	d9f0      	bls.n	800723e <USB_SetCurrentMode+0x60>
 800725c:	e001      	b.n	8007262 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e005      	b.n	800726e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b32      	cmp	r3, #50	; 0x32
 8007266:	d101      	bne.n	800726c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a13      	ldr	r2, [pc, #76]	; (80072dc <USB_FlushTxFifo+0x64>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d901      	bls.n	8007298 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e01b      	b.n	80072d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	daf2      	bge.n	8007286 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	019b      	lsls	r3, r3, #6
 80072a8:	f043 0220 	orr.w	r2, r3, #32
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4a08      	ldr	r2, [pc, #32]	; (80072dc <USB_FlushTxFifo+0x64>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d901      	bls.n	80072c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e006      	b.n	80072d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d0f0      	beq.n	80072b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	00030d40 	.word	0x00030d40

080072e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4a11      	ldr	r2, [pc, #68]	; (800733c <USB_FlushRxFifo+0x5c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d901      	bls.n	80072fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e018      	b.n	8007330 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	daf2      	bge.n	80072ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2210      	movs	r2, #16
 800730e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a08      	ldr	r2, [pc, #32]	; (800733c <USB_FlushRxFifo+0x5c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e006      	b.n	8007330 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0310 	and.w	r3, r3, #16
 800732a:	2b10      	cmp	r3, #16
 800732c:	d0f0      	beq.n	8007310 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	00030d40 	.word	0x00030d40

08007340 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007340:	b480      	push	{r7}
 8007342:	b089      	sub	sp, #36	; 0x24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	4611      	mov	r1, r2
 800734c:	461a      	mov	r2, r3
 800734e:	460b      	mov	r3, r1
 8007350:	71fb      	strb	r3, [r7, #7]
 8007352:	4613      	mov	r3, r2
 8007354:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800735e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d123      	bne.n	80073ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007366:	88bb      	ldrh	r3, [r7, #4]
 8007368:	3303      	adds	r3, #3
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e018      	b.n	80073a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	031a      	lsls	r2, r3, #12
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007380:	461a      	mov	r2, r3
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	3301      	adds	r3, #1
 800738c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3301      	adds	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	3301      	adds	r3, #1
 8007398:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	3301      	adds	r3, #1
 800739e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	3301      	adds	r3, #1
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d3e2      	bcc.n	8007374 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3724      	adds	r7, #36	; 0x24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073bc:	b480      	push	{r7}
 80073be:	b08b      	sub	sp, #44	; 0x2c
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	089b      	lsrs	r3, r3, #2
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073e2:	2300      	movs	r3, #0
 80073e4:	623b      	str	r3, [r7, #32]
 80073e6:	e014      	b.n	8007412 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	3301      	adds	r3, #1
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	3301      	adds	r3, #1
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	3301      	adds	r3, #1
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	3301      	adds	r3, #1
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	3301      	adds	r3, #1
 8007410:	623b      	str	r3, [r7, #32]
 8007412:	6a3a      	ldr	r2, [r7, #32]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	429a      	cmp	r2, r3
 8007418:	d3e6      	bcc.n	80073e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800741a:	8bfb      	ldrh	r3, [r7, #30]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01e      	beq.n	800745e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742a:	461a      	mov	r2, r3
 800742c:	f107 0310 	add.w	r3, r7, #16
 8007430:	6812      	ldr	r2, [r2, #0]
 8007432:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
 8007440:	b2da      	uxtb	r2, r3
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	701a      	strb	r2, [r3, #0]
      i++;
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	3301      	adds	r3, #1
 800744a:	623b      	str	r3, [r7, #32]
      pDest++;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	3301      	adds	r3, #1
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007452:	8bfb      	ldrh	r3, [r7, #30]
 8007454:	3b01      	subs	r3, #1
 8007456:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007458:	8bfb      	ldrh	r3, [r7, #30]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1ea      	bne.n	8007434 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007460:	4618      	mov	r0, r3
 8007462:	372c      	adds	r7, #44	; 0x2c
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4013      	ands	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007484:	68fb      	ldr	r3, [r7, #12]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	f003 0301 	and.w	r3, r3, #1
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a13      	ldr	r2, [pc, #76]	; (8007514 <USB_CoreReset+0x64>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d901      	bls.n	80074ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e01b      	b.n	8007506 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	daf2      	bge.n	80074bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	f043 0201 	orr.w	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4a09      	ldr	r2, [pc, #36]	; (8007514 <USB_CoreReset+0x64>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d901      	bls.n	80074f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e006      	b.n	8007506 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b01      	cmp	r3, #1
 8007502:	d0f0      	beq.n	80074e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	00030d40 	.word	0x00030d40

08007518 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007518:	b084      	sub	sp, #16
 800751a:	b580      	push	{r7, lr}
 800751c:	b086      	sub	sp, #24
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007538:	461a      	mov	r2, r3
 800753a:	2300      	movs	r3, #0
 800753c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756a:	2b00      	cmp	r3, #0
 800756c:	d018      	beq.n	80075a0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10a      	bne.n	800758a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007582:	f043 0304 	orr.w	r3, r3, #4
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	e014      	b.n	80075b4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007598:	f023 0304 	bic.w	r3, r3, #4
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	e009      	b.n	80075b4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075ae:	f023 0304 	bic.w	r3, r3, #4
 80075b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075b4:	2110      	movs	r1, #16
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff fe5e 	bl	8007278 <USB_FlushTxFifo>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff fe8a 	bl	80072e0 <USB_FlushRxFifo>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	e015      	b.n	8007608 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e8:	461a      	mov	r2, r3
 80075ea:	f04f 33ff 	mov.w	r3, #4294967295
 80075ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fc:	461a      	mov	r2, r3
 80075fe:	2300      	movs	r3, #0
 8007600:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	3301      	adds	r3, #1
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	429a      	cmp	r2, r3
 800760e:	d3e5      	bcc.n	80075dc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f04f 32ff 	mov.w	r2, #4294967295
 800761c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007630:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a13      	ldr	r2, [pc, #76]	; (8007684 <USB_HostInit+0x16c>)
 8007636:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a13      	ldr	r2, [pc, #76]	; (8007688 <USB_HostInit+0x170>)
 800763c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007640:	e009      	b.n	8007656 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2280      	movs	r2, #128	; 0x80
 8007646:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a10      	ldr	r2, [pc, #64]	; (800768c <USB_HostInit+0x174>)
 800764c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a0f      	ldr	r2, [pc, #60]	; (8007690 <USB_HostInit+0x178>)
 8007652:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	2b00      	cmp	r3, #0
 800765a:	d105      	bne.n	8007668 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	f043 0210 	orr.w	r2, r3, #16
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	4b09      	ldr	r3, [pc, #36]	; (8007694 <USB_HostInit+0x17c>)
 800766e:	4313      	orrs	r3, r2
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007680:	b004      	add	sp, #16
 8007682:	4770      	bx	lr
 8007684:	01000200 	.word	0x01000200
 8007688:	00e00300 	.word	0x00e00300
 800768c:	00600080 	.word	0x00600080
 8007690:	004000e0 	.word	0x004000e0
 8007694:	a3200008 	.word	0xa3200008

08007698 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	68f9      	ldr	r1, [r7, #12]
 80076cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80076d0:	4313      	orrs	r3, r2
 80076d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d107      	bne.n	80076ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e0:	461a      	mov	r2, r3
 80076e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80076e6:	6053      	str	r3, [r2, #4]
 80076e8:	e009      	b.n	80076fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d106      	bne.n	80076fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f6:	461a      	mov	r2, r3
 80076f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80076fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800772c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800773a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800773c:	2064      	movs	r0, #100	; 0x64
 800773e:	f7fa fbd1 	bl	8001ee4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800774a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800774e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007750:	200a      	movs	r0, #10
 8007752:	f7fa fbc7 	bl	8001ee4 <HAL_Delay>

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007784:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d109      	bne.n	80077a4 <USB_DriveVbus+0x44>
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d106      	bne.n	80077a4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800779e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077a2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ae:	d109      	bne.n	80077c4 <USB_DriveVbus+0x64>
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077c2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	0c5b      	lsrs	r3, r3, #17
 80077f0:	f003 0303 	and.w	r3, r3, #3
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	b29b      	uxth	r3, r3
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
	...

08007824 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	4608      	mov	r0, r1
 800782e:	4611      	mov	r1, r2
 8007830:	461a      	mov	r2, r3
 8007832:	4603      	mov	r3, r0
 8007834:	70fb      	strb	r3, [r7, #3]
 8007836:	460b      	mov	r3, r1
 8007838:	70bb      	strb	r3, [r7, #2]
 800783a:	4613      	mov	r3, r2
 800783c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007846:	78fb      	ldrb	r3, [r7, #3]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4413      	add	r3, r2
 800784e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007852:	461a      	mov	r2, r3
 8007854:	f04f 33ff 	mov.w	r3, #4294967295
 8007858:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800785a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800785e:	2b03      	cmp	r3, #3
 8007860:	d87e      	bhi.n	8007960 <USB_HC_Init+0x13c>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <USB_HC_Init+0x44>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007879 	.word	0x08007879
 800786c:	08007923 	.word	0x08007923
 8007870:	08007879 	.word	0x08007879
 8007874:	080078e5 	.word	0x080078e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007884:	461a      	mov	r2, r3
 8007886:	f240 439d 	movw	r3, #1181	; 0x49d
 800788a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800788c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007890:	2b00      	cmp	r3, #0
 8007892:	da10      	bge.n	80078b6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	4413      	add	r3, r2
 800789c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	78fa      	ldrb	r2, [r7, #3]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80078b4:	e057      	b.n	8007966 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d051      	beq.n	8007966 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	78fa      	ldrb	r2, [r7, #3]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078e0:	60d3      	str	r3, [r2, #12]
      break;
 80078e2:	e040      	b.n	8007966 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f0:	461a      	mov	r2, r3
 80078f2:	f240 639d 	movw	r3, #1693	; 0x69d
 80078f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	da34      	bge.n	800796a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	4413      	add	r3, r2
 8007908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	440a      	add	r2, r1
 8007916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800791a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800791e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007920:	e023      	b.n	800796a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4413      	add	r3, r2
 800792a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792e:	461a      	mov	r2, r3
 8007930:	f240 2325 	movw	r3, #549	; 0x225
 8007934:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007936:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800793a:	2b00      	cmp	r3, #0
 800793c:	da17      	bge.n	800796e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	78fa      	ldrb	r2, [r7, #3]
 800794e:	0151      	lsls	r1, r2, #5
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	440a      	add	r2, r1
 8007954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007958:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800795c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800795e:	e006      	b.n	800796e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	77fb      	strb	r3, [r7, #31]
      break;
 8007964:	e004      	b.n	8007970 <USB_HC_Init+0x14c>
      break;
 8007966:	bf00      	nop
 8007968:	e002      	b.n	8007970 <USB_HC_Init+0x14c>
      break;
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <USB_HC_Init+0x14c>
      break;
 800796e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	4413      	add	r3, r2
 8007978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	440a      	add	r2, r1
 8007986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800798a:	f043 0302 	orr.w	r3, r3, #2
 800798e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	2101      	movs	r1, #1
 80079a0:	fa01 f303 	lsl.w	r3, r1, r3
 80079a4:	6939      	ldr	r1, [r7, #16]
 80079a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079aa:	4313      	orrs	r3, r2
 80079ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80079ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da03      	bge.n	80079ca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80079c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	e001      	b.n	80079ce <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff feff 	bl	80077d2 <USB_GetHostSpeed>
 80079d4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80079d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d106      	bne.n	80079ec <USB_HC_Init+0x1c8>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d003      	beq.n	80079ec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80079e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	e001      	b.n	80079f0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079f0:	787b      	ldrb	r3, [r7, #1]
 80079f2:	059b      	lsls	r3, r3, #22
 80079f4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80079f8:	78bb      	ldrb	r3, [r7, #2]
 80079fa:	02db      	lsls	r3, r3, #11
 80079fc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a00:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a06:	049b      	lsls	r3, r3, #18
 8007a08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	0159      	lsls	r1, r3, #5
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	440b      	add	r3, r1
 8007a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a26:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a2c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d003      	beq.n	8007a3e <USB_HC_Init+0x21a>
 8007a36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10f      	bne.n	8007a5e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3720      	adds	r7, #32
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08c      	sub	sp, #48	; 0x30
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d02d      	beq.n	8007aee <USB_HC_StartXfer+0x86>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d129      	bne.n	8007aee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d117      	bne.n	8007ad0 <USB_HC_StartXfer+0x68>
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	79db      	ldrb	r3, [r3, #7]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <USB_HC_StartXfer+0x48>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	79db      	ldrb	r3, [r3, #7]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d10f      	bne.n	8007ad0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	0151      	lsls	r1, r2, #5
 8007ac2:	6a3a      	ldr	r2, [r7, #32]
 8007ac4:	440a      	add	r2, r1
 8007ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ace:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10b      	bne.n	8007aee <USB_HC_StartXfer+0x86>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	795b      	ldrb	r3, [r3, #5]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d107      	bne.n	8007aee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 fa0f 	bl	8007f08 <USB_DoPing>
      return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e0f8      	b.n	8007ce0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d018      	beq.n	8007b28 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	8912      	ldrh	r2, [r2, #8]
 8007afe:	4413      	add	r3, r2
 8007b00:	3b01      	subs	r3, #1
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	8912      	ldrh	r2, [r2, #8]
 8007b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b0a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b0e:	8b7b      	ldrh	r3, [r7, #26]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d90b      	bls.n	8007b2c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b14:	8b7b      	ldrh	r3, [r7, #26]
 8007b16:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	8912      	ldrh	r2, [r2, #8]
 8007b1e:	fb03 f202 	mul.w	r2, r3, r2
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	611a      	str	r2, [r3, #16]
 8007b26:	e001      	b.n	8007b2c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	78db      	ldrb	r3, [r3, #3]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	8912      	ldrh	r2, [r2, #8]
 8007b3a:	fb03 f202 	mul.w	r2, r3, r2
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	611a      	str	r2, [r3, #16]
 8007b42:	e003      	b.n	8007b4c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	695a      	ldr	r2, [r3, #20]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b56:	04d9      	lsls	r1, r3, #19
 8007b58:	4b63      	ldr	r3, [pc, #396]	; (8007ce8 <USB_HC_StartXfer+0x280>)
 8007b5a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b5c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	7a9b      	ldrb	r3, [r3, #10]
 8007b62:	075b      	lsls	r3, r3, #29
 8007b64:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b68:	69f9      	ldr	r1, [r7, #28]
 8007b6a:	0148      	lsls	r0, r1, #5
 8007b6c:	6a39      	ldr	r1, [r7, #32]
 8007b6e:	4401      	add	r1, r0
 8007b70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b74:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b76:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	68d9      	ldr	r1, [r3, #12]
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8e:	460a      	mov	r2, r1
 8007b90:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf0c      	ite	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	2300      	movne	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	0151      	lsls	r1, r2, #5
 8007bbc:	6a3a      	ldr	r2, [r7, #32]
 8007bbe:	440a      	add	r2, r1
 8007bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bc8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	7e7b      	ldrb	r3, [r7, #25]
 8007bda:	075b      	lsls	r3, r3, #29
 8007bdc:	69f9      	ldr	r1, [r7, #28]
 8007bde:	0148      	lsls	r0, r1, #5
 8007be0:	6a39      	ldr	r1, [r7, #32]
 8007be2:	4401      	add	r1, r0
 8007be4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007be8:	4313      	orrs	r3, r2
 8007bea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c02:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	78db      	ldrb	r3, [r3, #3]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	e003      	b.n	8007c1e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c1c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c24:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c32:	461a      	mov	r2, r3
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e04e      	b.n	8007ce0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	78db      	ldrb	r3, [r3, #3]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d149      	bne.n	8007cde <USB_HC_StartXfer+0x276>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d045      	beq.n	8007cde <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	79db      	ldrb	r3, [r3, #7]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d830      	bhi.n	8007cbc <USB_HC_StartXfer+0x254>
 8007c5a:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <USB_HC_StartXfer+0x1f8>)
 8007c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c60:	08007c71 	.word	0x08007c71
 8007c64:	08007c95 	.word	0x08007c95
 8007c68:	08007c71 	.word	0x08007c71
 8007c6c:	08007c95 	.word	0x08007c95
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	3303      	adds	r3, #3
 8007c76:	089b      	lsrs	r3, r3, #2
 8007c78:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c7a:	8afa      	ldrh	r2, [r7, #22]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d91c      	bls.n	8007cc0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	f043 0220 	orr.w	r2, r3, #32
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c92:	e015      	b.n	8007cc0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	3303      	adds	r3, #3
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007c9e:	8afa      	ldrh	r2, [r7, #22]
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d90a      	bls.n	8007cc4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cba:	e003      	b.n	8007cc4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007cbc:	bf00      	nop
 8007cbe:	e002      	b.n	8007cc6 <USB_HC_StartXfer+0x25e>
        break;
 8007cc0:	bf00      	nop
 8007cc2:	e000      	b.n	8007cc6 <USB_HC_StartXfer+0x25e>
        break;
 8007cc4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	68d9      	ldr	r1, [r3, #12]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	785a      	ldrb	r2, [r3, #1]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	9000      	str	r0, [sp, #0]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff fb31 	bl	8007340 <USB_WritePacket>
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3728      	adds	r7, #40	; 0x28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	1ff80000 	.word	0x1ff80000

08007cec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	b29b      	uxth	r3, r3
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b089      	sub	sp, #36	; 0x24
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	0c9b      	lsrs	r3, r3, #18
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	0fdb      	lsrs	r3, r3, #31
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d104      	bne.n	8007d68 <USB_HC_Halt+0x5a>
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	e0c8      	b.n	8007efa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <USB_HC_Halt+0x66>
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d163      	bne.n	8007e3c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d92:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f040 80ab 	bne.w	8007ef8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d133      	bne.n	8007e16 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	0151      	lsls	r1, r2, #5
 8007dc0:	69fa      	ldr	r2, [r7, #28]
 8007dc2:	440a      	add	r2, r1
 8007dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dcc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dfa:	d81d      	bhi.n	8007e38 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e12:	d0ec      	beq.n	8007dee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e14:	e070      	b.n	8007ef8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	0151      	lsls	r1, r2, #5
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	440a      	add	r2, r1
 8007e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e34:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e36:	e05f      	b.n	8007ef8 <USB_HC_Halt+0x1ea>
            break;
 8007e38:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e3a:	e05d      	b.n	8007ef8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e5a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d133      	bne.n	8007ed4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e8a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eaa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eb8:	d81d      	bhi.n	8007ef6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ed0:	d0ec      	beq.n	8007eac <USB_HC_Halt+0x19e>
 8007ed2:	e011      	b.n	8007ef8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	e000      	b.n	8007ef8 <USB_HC_Halt+0x1ea>
          break;
 8007ef6:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3724      	adds	r7, #36	; 0x24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	04da      	lsls	r2, r3, #19
 8007f24:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <USB_DoPing+0x74>)
 8007f26:	4013      	ands	r3, r2
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f38:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f50:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f58:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f66:	461a      	mov	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	1ff80000 	.word	0x1ff80000

08007f80 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff f911 	bl	80071bc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f9a:	2110      	movs	r1, #16
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff f96b 	bl	8007278 <USB_FlushTxFifo>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff f997 	bl	80072e0 <USB_FlushRxFifo>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61bb      	str	r3, [r7, #24]
 8007fc0:	e01f      	b.n	8008002 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fe0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fe8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	3301      	adds	r3, #1
 8008000:	61bb      	str	r3, [r7, #24]
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b0f      	cmp	r3, #15
 8008006:	d9dc      	bls.n	8007fc2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008008:	2300      	movs	r3, #0
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	e034      	b.n	8008078 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	4413      	add	r3, r2
 8008016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008024:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800802c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008034:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	4413      	add	r3, r2
 800803e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008042:	461a      	mov	r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008054:	d80c      	bhi.n	8008070 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	4413      	add	r3, r2
 800805e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800806c:	d0ec      	beq.n	8008048 <USB_StopHost+0xc8>
 800806e:	e000      	b.n	8008072 <USB_StopHost+0xf2>
        break;
 8008070:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	3301      	adds	r3, #1
 8008076:	61bb      	str	r3, [r7, #24]
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	2b0f      	cmp	r3, #15
 800807c:	d9c7      	bls.n	800800e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008084:	461a      	mov	r2, r3
 8008086:	f04f 33ff 	mov.w	r3, #4294967295
 800808a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f04f 32ff 	mov.w	r2, #4294967295
 8008092:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff f880 	bl	800719a <USB_EnableGlobalInt>

  return ret;
 800809a:	7ffb      	ldrb	r3, [r7, #31]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80080a4:	b590      	push	{r4, r7, lr}
 80080a6:	b089      	sub	sp, #36	; 0x24
 80080a8:	af04      	add	r7, sp, #16
 80080aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80080ac:	2301      	movs	r3, #1
 80080ae:	2202      	movs	r2, #2
 80080b0:	2102      	movs	r1, #2
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fc66 	bl	8008984 <USBH_FindInterface>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	2bff      	cmp	r3, #255	; 0xff
 80080c0:	d002      	beq.n	80080c8 <USBH_CDC_InterfaceInit+0x24>
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d901      	bls.n	80080cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80080c8:	2302      	movs	r3, #2
 80080ca:	e13d      	b.n	8008348 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fc3b 	bl	800894c <USBH_SelectInterface>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80080e0:	2302      	movs	r3, #2
 80080e2:	e131      	b.n	8008348 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80080ea:	2050      	movs	r0, #80	; 0x50
 80080ec:	f002 fafa 	bl	800a6e4 <malloc>
 80080f0:	4603      	mov	r3, r0
 80080f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008104:	2302      	movs	r3, #2
 8008106:	e11f      	b.n	8008348 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008108:	2250      	movs	r2, #80	; 0x50
 800810a:	2100      	movs	r1, #0
 800810c:	68b8      	ldr	r0, [r7, #8]
 800810e:	f002 faf9 	bl	800a704 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	211a      	movs	r1, #26
 8008118:	fb01 f303 	mul.w	r3, r1, r3
 800811c:	4413      	add	r3, r2
 800811e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	b25b      	sxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	da15      	bge.n	8008156 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	211a      	movs	r1, #26
 8008130:	fb01 f303 	mul.w	r3, r1, r3
 8008134:	4413      	add	r3, r2
 8008136:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800813a:	781a      	ldrb	r2, [r3, #0]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	211a      	movs	r1, #26
 8008146:	fb01 f303 	mul.w	r3, r1, r3
 800814a:	4413      	add	r3, r2
 800814c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008150:	881a      	ldrh	r2, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 ff2c 	bl	8009fba <USBH_AllocPipe>
 8008162:	4603      	mov	r3, r0
 8008164:	461a      	mov	r2, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	7819      	ldrb	r1, [r3, #0]
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	7858      	ldrb	r0, [r3, #1]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	8952      	ldrh	r2, [r2, #10]
 8008182:	9202      	str	r2, [sp, #8]
 8008184:	2203      	movs	r2, #3
 8008186:	9201      	str	r2, [sp, #4]
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	4623      	mov	r3, r4
 800818c:	4602      	mov	r2, r0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 fee4 	bl	8009f5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2200      	movs	r2, #0
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f002 f9f3 	bl	800a588 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80081a2:	2300      	movs	r3, #0
 80081a4:	2200      	movs	r2, #0
 80081a6:	210a      	movs	r1, #10
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fbeb 	bl	8008984 <USBH_FindInterface>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2bff      	cmp	r3, #255	; 0xff
 80081b6:	d002      	beq.n	80081be <USBH_CDC_InterfaceInit+0x11a>
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d901      	bls.n	80081c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80081be:	2302      	movs	r3, #2
 80081c0:	e0c2      	b.n	8008348 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	211a      	movs	r1, #26
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	4413      	add	r3, r2
 80081ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	b25b      	sxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da16      	bge.n	8008208 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	211a      	movs	r1, #26
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	4413      	add	r3, r2
 80081e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80081ea:	781a      	ldrb	r2, [r3, #0]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	211a      	movs	r1, #26
 80081f6:	fb01 f303 	mul.w	r3, r1, r3
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008200:	881a      	ldrh	r2, [r3, #0]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	835a      	strh	r2, [r3, #26]
 8008206:	e015      	b.n	8008234 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	211a      	movs	r1, #26
 800820e:	fb01 f303 	mul.w	r3, r1, r3
 8008212:	4413      	add	r3, r2
 8008214:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008218:	781a      	ldrb	r2, [r3, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	211a      	movs	r1, #26
 8008224:	fb01 f303 	mul.w	r3, r1, r3
 8008228:	4413      	add	r3, r2
 800822a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800822e:	881a      	ldrh	r2, [r3, #0]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	211a      	movs	r1, #26
 800823a:	fb01 f303 	mul.w	r3, r1, r3
 800823e:	4413      	add	r3, r2
 8008240:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b25b      	sxtb	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	da16      	bge.n	800827a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	211a      	movs	r1, #26
 8008252:	fb01 f303 	mul.w	r3, r1, r3
 8008256:	4413      	add	r3, r2
 8008258:	f203 3356 	addw	r3, r3, #854	; 0x356
 800825c:	781a      	ldrb	r2, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	211a      	movs	r1, #26
 8008268:	fb01 f303 	mul.w	r3, r1, r3
 800826c:	4413      	add	r3, r2
 800826e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008272:	881a      	ldrh	r2, [r3, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	835a      	strh	r2, [r3, #26]
 8008278:	e015      	b.n	80082a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	211a      	movs	r1, #26
 8008280:	fb01 f303 	mul.w	r3, r1, r3
 8008284:	4413      	add	r3, r2
 8008286:	f203 3356 	addw	r3, r3, #854	; 0x356
 800828a:	781a      	ldrb	r2, [r3, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	211a      	movs	r1, #26
 8008296:	fb01 f303 	mul.w	r3, r1, r3
 800829a:	4413      	add	r3, r2
 800829c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082a0:	881a      	ldrh	r2, [r3, #0]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	7b9b      	ldrb	r3, [r3, #14]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 fe84 	bl	8009fba <USBH_AllocPipe>
 80082b2:	4603      	mov	r3, r0
 80082b4:	461a      	mov	r2, r3
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	7bdb      	ldrb	r3, [r3, #15]
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 fe7a 	bl	8009fba <USBH_AllocPipe>
 80082c6:	4603      	mov	r3, r0
 80082c8:	461a      	mov	r2, r3
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	7b59      	ldrb	r1, [r3, #13]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	7b98      	ldrb	r0, [r3, #14]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	8b12      	ldrh	r2, [r2, #24]
 80082e6:	9202      	str	r2, [sp, #8]
 80082e8:	2202      	movs	r2, #2
 80082ea:	9201      	str	r2, [sp, #4]
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4623      	mov	r3, r4
 80082f0:	4602      	mov	r2, r0
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fe32 	bl	8009f5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	7b19      	ldrb	r1, [r3, #12]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	7bd8      	ldrb	r0, [r3, #15]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	8b52      	ldrh	r2, [r2, #26]
 8008310:	9202      	str	r2, [sp, #8]
 8008312:	2202      	movs	r2, #2
 8008314:	9201      	str	r2, [sp, #4]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4623      	mov	r3, r4
 800831a:	4602      	mov	r2, r0
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 fe1d 	bl	8009f5c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	7b5b      	ldrb	r3, [r3, #13]
 800832e:	2200      	movs	r2, #0
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f002 f928 	bl	800a588 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	7b1b      	ldrb	r3, [r3, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f002 f921 	bl	800a588 <USBH_LL_SetToggle>

  return USBH_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bd90      	pop	{r4, r7, pc}

08008350 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00e      	beq.n	8008388 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 fe12 	bl	8009f9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 fe3d 	bl	8009ffc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	7b1b      	ldrb	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00e      	beq.n	80083ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	7b1b      	ldrb	r3, [r3, #12]
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 fdff 	bl	8009f9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	7b1b      	ldrb	r3, [r3, #12]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 fe2a 	bl	8009ffc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	7b5b      	ldrb	r3, [r3, #13]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00e      	beq.n	80083d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	7b5b      	ldrb	r3, [r3, #13]
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 fdec 	bl	8009f9a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	7b5b      	ldrb	r3, [r3, #13]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 fe17 	bl	8009ffc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f002 f983 	bl	800a6f4 <free>
    phost->pActiveClass->pData = 0U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083f4:	2200      	movs	r2, #0
 80083f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3340      	adds	r3, #64	; 0x40
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f8b1 	bl	8008582 <GetLineCoding>
 8008420:	4603      	mov	r3, r0
 8008422:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d105      	bne.n	8008436 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008430:	2102      	movs	r1, #2
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008436:	7afb      	ldrb	r3, [r7, #11]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008460:	2b04      	cmp	r3, #4
 8008462:	d877      	bhi.n	8008554 <USBH_CDC_Process+0x114>
 8008464:	a201      	add	r2, pc, #4	; (adr r2, 800846c <USBH_CDC_Process+0x2c>)
 8008466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846a:	bf00      	nop
 800846c:	08008481 	.word	0x08008481
 8008470:	08008487 	.word	0x08008487
 8008474:	080084b7 	.word	0x080084b7
 8008478:	0800852b 	.word	0x0800852b
 800847c:	08008539 	.word	0x08008539
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
      break;
 8008484:	e06d      	b.n	8008562 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f897 	bl	80085c0 <SetLineCoding>
 8008492:	4603      	mov	r3, r0
 8008494:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d104      	bne.n	80084a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084a4:	e058      	b.n	8008558 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d055      	beq.n	8008558 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2204      	movs	r2, #4
 80084b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80084b4:	e050      	b.n	8008558 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3340      	adds	r3, #64	; 0x40
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f860 	bl	8008582 <GetLineCoding>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d126      	bne.n	800851a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084de:	791b      	ldrb	r3, [r3, #4]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d13b      	bne.n	800855c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d133      	bne.n	800855c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008500:	429a      	cmp	r2, r3
 8008502:	d12b      	bne.n	800855c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800850c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800850e:	429a      	cmp	r2, r3
 8008510:	d124      	bne.n	800855c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f958 	bl	80087c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008518:	e020      	b.n	800855c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d01d      	beq.n	800855c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2204      	movs	r2, #4
 8008524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008528:	e018      	b.n	800855c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f867 	bl	80085fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f8da 	bl	80086ea <CDC_ProcessReception>
      break;
 8008536:	e014      	b.n	8008562 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008538:	2100      	movs	r1, #0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 ffef 	bl	800951e <USBH_ClrFeature>
 8008540:	4603      	mov	r3, r0
 8008542:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10a      	bne.n	8008560 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008552:	e005      	b.n	8008560 <USBH_CDC_Process+0x120>

    default:
      break;
 8008554:	bf00      	nop
 8008556:	e004      	b.n	8008562 <USBH_CDC_Process+0x122>
      break;
 8008558:	bf00      	nop
 800855a:	e002      	b.n	8008562 <USBH_CDC_Process+0x122>
      break;
 800855c:	bf00      	nop
 800855e:	e000      	b.n	8008562 <USBH_CDC_Process+0x122>
      break;
 8008560:	bf00      	nop

  }

  return status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	22a1      	movs	r2, #161	; 0xa1
 8008590:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2221      	movs	r2, #33	; 0x21
 8008596:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2207      	movs	r2, #7
 80085a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2207      	movs	r2, #7
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 fa81 	bl	8009ab8 <USBH_CtlReq>
 80085b6:	4603      	mov	r3, r0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2221      	movs	r2, #33	; 0x21
 80085ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2220      	movs	r2, #32
 80085d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2207      	movs	r2, #7
 80085e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2207      	movs	r2, #7
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 fa62 	bl	8009ab8 <USBH_CtlReq>
 80085f4:	4603      	mov	r3, r0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b086      	sub	sp, #24
 8008602:	af02      	add	r7, sp, #8
 8008604:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008610:	2300      	movs	r3, #0
 8008612:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800861a:	2b01      	cmp	r3, #1
 800861c:	d002      	beq.n	8008624 <CDC_ProcessTransmission+0x26>
 800861e:	2b02      	cmp	r3, #2
 8008620:	d023      	beq.n	800866a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008622:	e05e      	b.n	80086e2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	8b12      	ldrh	r2, [r2, #24]
 800862c:	4293      	cmp	r3, r2
 800862e:	d90b      	bls.n	8008648 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	69d9      	ldr	r1, [r3, #28]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8b1a      	ldrh	r2, [r3, #24]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	7b5b      	ldrb	r3, [r3, #13]
 800863c:	2001      	movs	r0, #1
 800863e:	9000      	str	r0, [sp, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 fc48 	bl	8009ed6 <USBH_BulkSendData>
 8008646:	e00b      	b.n	8008660 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008650:	b29a      	uxth	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	7b5b      	ldrb	r3, [r3, #13]
 8008656:	2001      	movs	r0, #1
 8008658:	9000      	str	r0, [sp, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fc3b 	bl	8009ed6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008668:	e03b      	b.n	80086e2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	7b5b      	ldrb	r3, [r3, #13]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 ff5f 	bl	800a534 <USBH_LL_GetURBState>
 8008676:	4603      	mov	r3, r0
 8008678:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d128      	bne.n	80086d2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	8b12      	ldrh	r2, [r2, #24]
 8008688:	4293      	cmp	r3, r2
 800868a:	d90e      	bls.n	80086aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	8b12      	ldrh	r2, [r2, #24]
 8008694:	1a9a      	subs	r2, r3, r2
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	8b12      	ldrh	r2, [r2, #24]
 80086a2:	441a      	add	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	61da      	str	r2, [r3, #28]
 80086a8:	e002      	b.n	80086b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80086c0:	e00e      	b.n	80086e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f868 	bl	80087a0 <USBH_CDC_TransmitCallback>
      break;
 80086d0:	e006      	b.n	80086e0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80086d2:	7afb      	ldrb	r3, [r7, #11]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d103      	bne.n	80086e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80086e0:	bf00      	nop
  }
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b086      	sub	sp, #24
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008706:	2b03      	cmp	r3, #3
 8008708:	d002      	beq.n	8008710 <CDC_ProcessReception+0x26>
 800870a:	2b04      	cmp	r3, #4
 800870c:	d00e      	beq.n	800872c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800870e:	e043      	b.n	8008798 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	6a19      	ldr	r1, [r3, #32]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	8b5a      	ldrh	r2, [r3, #26]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	7b1b      	ldrb	r3, [r3, #12]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 fbff 	bl	8009f20 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2204      	movs	r2, #4
 8008726:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800872a:	e035      	b.n	8008798 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	7b1b      	ldrb	r3, [r3, #12]
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fefe 	bl	800a534 <USBH_LL_GetURBState>
 8008738:	4603      	mov	r3, r0
 800873a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800873c:	7cfb      	ldrb	r3, [r7, #19]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d129      	bne.n	8008796 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	7b1b      	ldrb	r3, [r3, #12]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 fe61 	bl	800a410 <USBH_LL_GetLastXferSize>
 800874e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	429a      	cmp	r2, r3
 8008758:	d016      	beq.n	8008788 <CDC_ProcessReception+0x9e>
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	8b5b      	ldrh	r3, [r3, #26]
 800875e:	461a      	mov	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4293      	cmp	r3, r2
 8008764:	d910      	bls.n	8008788 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	1ad2      	subs	r2, r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	6a1a      	ldr	r2, [r3, #32]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	441a      	add	r2, r3
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2203      	movs	r2, #3
 8008782:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008786:	e006      	b.n	8008796 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f80f 	bl	80087b4 <USBH_CDC_ReceiveCallback>
      break;
 8008796:	bf00      	nop
  }
}
 8008798:	bf00      	nop
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e029      	b.n	8008848 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	79fa      	ldrb	r2, [r7, #7]
 80087f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 f81f 	bl	8008850 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f001 fd31 	bl	800a2a8 <USBH_LL_Init>

  return USBH_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	e009      	b.n	8008876 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	33e0      	adds	r3, #224	; 0xe0
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	2200      	movs	r2, #0
 800886e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b0f      	cmp	r3, #15
 800887a:	d9f2      	bls.n	8008862 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	e009      	b.n	8008896 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889c:	d3f1      	bcc.n	8008882 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2240      	movs	r2, #64	; 0x40
 80088c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d016      	beq.n	800893a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10e      	bne.n	8008934 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800891c:	1c59      	adds	r1, r3, #1
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	33de      	adds	r3, #222	; 0xde
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
 8008932:	e004      	b.n	800893e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008934:	2302      	movs	r3, #2
 8008936:	73fb      	strb	r3, [r7, #15]
 8008938:	e001      	b.n	800893e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800893a:	2302      	movs	r3, #2
 800893c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	429a      	cmp	r2, r3
 8008966:	d204      	bcs.n	8008972 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008970:	e001      	b.n	8008976 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008972:	2302      	movs	r3, #2
 8008974:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008976:	7bfb      	ldrb	r3, [r7, #15]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	4608      	mov	r0, r1
 800898e:	4611      	mov	r1, r2
 8008990:	461a      	mov	r2, r3
 8008992:	4603      	mov	r3, r0
 8008994:	70fb      	strb	r3, [r7, #3]
 8008996:	460b      	mov	r3, r1
 8008998:	70bb      	strb	r3, [r7, #2]
 800899a:	4613      	mov	r3, r2
 800899c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80089ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80089ae:	e025      	b.n	80089fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	221a      	movs	r2, #26
 80089b4:	fb02 f303 	mul.w	r3, r2, r3
 80089b8:	3308      	adds	r3, #8
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	4413      	add	r3, r2
 80089be:	3302      	adds	r3, #2
 80089c0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	795b      	ldrb	r3, [r3, #5]
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d002      	beq.n	80089d2 <USBH_FindInterface+0x4e>
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	2bff      	cmp	r3, #255	; 0xff
 80089d0:	d111      	bne.n	80089f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80089d6:	78ba      	ldrb	r2, [r7, #2]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d002      	beq.n	80089e2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089dc:	78bb      	ldrb	r3, [r7, #2]
 80089de:	2bff      	cmp	r3, #255	; 0xff
 80089e0:	d109      	bne.n	80089f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089e6:	787a      	ldrb	r2, [r7, #1]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d002      	beq.n	80089f2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089ec:	787b      	ldrb	r3, [r7, #1]
 80089ee:	2bff      	cmp	r3, #255	; 0xff
 80089f0:	d101      	bne.n	80089f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	e006      	b.n	8008a04 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	3301      	adds	r3, #1
 80089fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d9d6      	bls.n	80089b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008a02:	23ff      	movs	r3, #255	; 0xff
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 fc81 	bl	800a320 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008a1e:	2101      	movs	r1, #1
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 fd9a 	bl	800a55a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af04      	add	r7, sp, #16
 8008a36:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d102      	bne.n	8008a52 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b0b      	cmp	r3, #11
 8008a5a:	f200 81be 	bhi.w	8008dda <USBH_Process+0x3aa>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <USBH_Process+0x34>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008a95 	.word	0x08008a95
 8008a68:	08008ac7 	.word	0x08008ac7
 8008a6c:	08008b2f 	.word	0x08008b2f
 8008a70:	08008d75 	.word	0x08008d75
 8008a74:	08008ddb 	.word	0x08008ddb
 8008a78:	08008bd3 	.word	0x08008bd3
 8008a7c:	08008d1b 	.word	0x08008d1b
 8008a80:	08008c09 	.word	0x08008c09
 8008a84:	08008c29 	.word	0x08008c29
 8008a88:	08008c49 	.word	0x08008c49
 8008a8c:	08008c8d 	.word	0x08008c8d
 8008a90:	08008d5d 	.word	0x08008d5d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 819e 	beq.w	8008dde <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008aa8:	20c8      	movs	r0, #200	; 0xc8
 8008aaa:	f001 fd9d 	bl	800a5e8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 fc93 	bl	800a3da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ac4:	e18b      	b.n	8008dde <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d107      	bne.n	8008ae0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ade:	e18d      	b.n	8008dfc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aea:	d914      	bls.n	8008b16 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008af2:	3301      	adds	r3, #1
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d903      	bls.n	8008b0e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	220d      	movs	r2, #13
 8008b0a:	701a      	strb	r2, [r3, #0]
      break;
 8008b0c:	e176      	b.n	8008dfc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
      break;
 8008b14:	e172      	b.n	8008dfc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b1c:	f103 020a 	add.w	r2, r3, #10
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008b26:	200a      	movs	r0, #10
 8008b28:	f001 fd5e 	bl	800a5e8 <USBH_Delay>
      break;
 8008b2c:	e166      	b.n	8008dfc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b3e:	2104      	movs	r1, #4
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008b44:	2064      	movs	r0, #100	; 0x64
 8008b46:	f001 fd4f 	bl	800a5e8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f001 fc1e 	bl	800a38c <USBH_LL_GetSpeed>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2205      	movs	r2, #5
 8008b5e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008b60:	2100      	movs	r1, #0
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 fa29 	bl	8009fba <USBH_AllocPipe>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008b70:	2180      	movs	r1, #128	; 0x80
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f001 fa21 	bl	8009fba <USBH_AllocPipe>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	7919      	ldrb	r1, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b94:	b292      	uxth	r2, r2
 8008b96:	9202      	str	r2, [sp, #8]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	9201      	str	r2, [sp, #4]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2280      	movs	r2, #128	; 0x80
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 f9da 	bl	8009f5c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7959      	ldrb	r1, [r3, #5]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008bbc:	b292      	uxth	r2, r2
 8008bbe:	9202      	str	r2, [sp, #8]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	9201      	str	r2, [sp, #4]
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2200      	movs	r2, #0
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 f9c6 	bl	8009f5c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008bd0:	e114      	b.n	8008dfc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f918 	bl	8008e08 <USBH_HandleEnum>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f040 80fe 	bne.w	8008de2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d103      	bne.n	8008c00 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2208      	movs	r2, #8
 8008bfc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008bfe:	e0f0      	b.n	8008de2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2207      	movs	r2, #7
 8008c04:	701a      	strb	r2, [r3, #0]
      break;
 8008c06:	e0ec      	b.n	8008de2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 80e9 	beq.w	8008de6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2208      	movs	r2, #8
 8008c24:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008c26:	e0de      	b.n	8008de6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fc2c 	bl	8009490 <USBH_SetCfg>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 80d5 	bne.w	8008dea <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2209      	movs	r2, #9
 8008c44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c46:	e0d0      	b.n	8008dea <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d016      	beq.n	8008c84 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008c56:	2101      	movs	r1, #1
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fc3c 	bl	80094d6 <USBH_SetFeature>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	220a      	movs	r2, #10
 8008c6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c70:	e0bd      	b.n	8008dee <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	f040 80b9 	bne.w	8008dee <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	220a      	movs	r2, #10
 8008c80:	701a      	strb	r2, [r3, #0]
      break;
 8008c82:	e0b4      	b.n	8008dee <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	220a      	movs	r2, #10
 8008c88:	701a      	strb	r2, [r3, #0]
      break;
 8008c8a:	e0b0      	b.n	8008dee <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80ad 	beq.w	8008df2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e016      	b.n	8008cd4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008ca6:	7bfa      	ldrb	r2, [r7, #15]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	32de      	adds	r2, #222	; 0xde
 8008cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb0:	791a      	ldrb	r2, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d108      	bne.n	8008cce <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008cbc:	7bfa      	ldrb	r2, [r7, #15]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	32de      	adds	r2, #222	; 0xde
 8008cc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008ccc:	e005      	b.n	8008cda <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0e5      	beq.n	8008ca6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d016      	beq.n	8008d12 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	4798      	blx	r3
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d109      	bne.n	8008d0a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2206      	movs	r2, #6
 8008cfa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d02:	2103      	movs	r1, #3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d08:	e073      	b.n	8008df2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	220d      	movs	r2, #13
 8008d0e:	701a      	strb	r2, [r3, #0]
      break;
 8008d10:	e06f      	b.n	8008df2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	220d      	movs	r2, #13
 8008d16:	701a      	strb	r2, [r3, #0]
      break;
 8008d18:	e06b      	b.n	8008df2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d017      	beq.n	8008d54 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	4798      	blx	r3
 8008d30:	4603      	mov	r3, r0
 8008d32:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d103      	bne.n	8008d44 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	220b      	movs	r2, #11
 8008d40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d42:	e058      	b.n	8008df6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d154      	bne.n	8008df6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	220d      	movs	r2, #13
 8008d50:	701a      	strb	r2, [r3, #0]
      break;
 8008d52:	e050      	b.n	8008df6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	220d      	movs	r2, #13
 8008d58:	701a      	strb	r2, [r3, #0]
      break;
 8008d5a:	e04c      	b.n	8008df6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d049      	beq.n	8008dfa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
      }
      break;
 8008d72:	e042      	b.n	8008dfa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff fd67 	bl	8008850 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d005      	beq.n	8008db6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008db0:	2105      	movs	r1, #5
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d107      	bne.n	8008dd2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff fe20 	bl	8008a10 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dd0:	e014      	b.n	8008dfc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 faa4 	bl	800a320 <USBH_LL_Start>
      break;
 8008dd8:	e010      	b.n	8008dfc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008dda:	bf00      	nop
 8008ddc:	e00e      	b.n	8008dfc <USBH_Process+0x3cc>
      break;
 8008dde:	bf00      	nop
 8008de0:	e00c      	b.n	8008dfc <USBH_Process+0x3cc>
      break;
 8008de2:	bf00      	nop
 8008de4:	e00a      	b.n	8008dfc <USBH_Process+0x3cc>
    break;
 8008de6:	bf00      	nop
 8008de8:	e008      	b.n	8008dfc <USBH_Process+0x3cc>
      break;
 8008dea:	bf00      	nop
 8008dec:	e006      	b.n	8008dfc <USBH_Process+0x3cc>
      break;
 8008dee:	bf00      	nop
 8008df0:	e004      	b.n	8008dfc <USBH_Process+0x3cc>
      break;
 8008df2:	bf00      	nop
 8008df4:	e002      	b.n	8008dfc <USBH_Process+0x3cc>
      break;
 8008df6:	bf00      	nop
 8008df8:	e000      	b.n	8008dfc <USBH_Process+0x3cc>
      break;
 8008dfa:	bf00      	nop
  }
  return USBH_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop

08008e08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e10:	2301      	movs	r3, #1
 8008e12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	2b07      	cmp	r3, #7
 8008e1e:	f200 81c1 	bhi.w	80091a4 <USBH_HandleEnum+0x39c>
 8008e22:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <USBH_HandleEnum+0x20>)
 8008e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e28:	08008e49 	.word	0x08008e49
 8008e2c:	08008f07 	.word	0x08008f07
 8008e30:	08008f71 	.word	0x08008f71
 8008e34:	08008fff 	.word	0x08008fff
 8008e38:	08009069 	.word	0x08009069
 8008e3c:	080090d9 	.word	0x080090d9
 8008e40:	0800911f 	.word	0x0800911f
 8008e44:	08009165 	.word	0x08009165
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e48:	2108      	movs	r1, #8
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa50 	bl	80092f0 <USBH_Get_DevDesc>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d130      	bne.n	8008ebc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7919      	ldrb	r1, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e7e:	b292      	uxth	r2, r2
 8008e80:	9202      	str	r2, [sp, #8]
 8008e82:	2200      	movs	r2, #0
 8008e84:	9201      	str	r2, [sp, #4]
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2280      	movs	r2, #128	; 0x80
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 f865 	bl	8009f5c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7959      	ldrb	r1, [r3, #5]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ea6:	b292      	uxth	r2, r2
 8008ea8:	9202      	str	r2, [sp, #8]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	9201      	str	r2, [sp, #4]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 f851 	bl	8009f5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008eba:	e175      	b.n	80091a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	f040 8172 	bne.w	80091a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008eca:	3301      	adds	r3, #1
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d903      	bls.n	8008ee6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	220d      	movs	r2, #13
 8008ee2:	701a      	strb	r2, [r3, #0]
      break;
 8008ee4:	e160      	b.n	80091a8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	795b      	ldrb	r3, [r3, #5]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 f885 	bl	8009ffc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	791b      	ldrb	r3, [r3, #4]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f87f 	bl	8009ffc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	701a      	strb	r2, [r3, #0]
      break;
 8008f04:	e150      	b.n	80091a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f06:	2112      	movs	r1, #18
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f9f1 	bl	80092f0 <USBH_Get_DevDesc>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d103      	bne.n	8008f20 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f1e:	e145      	b.n	80091ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	f040 8142 	bne.w	80091ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f2e:	3301      	adds	r3, #1
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d903      	bls.n	8008f4a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	220d      	movs	r2, #13
 8008f46:	701a      	strb	r2, [r3, #0]
      break;
 8008f48:	e130      	b.n	80091ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	795b      	ldrb	r3, [r3, #5]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 f853 	bl	8009ffc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	791b      	ldrb	r3, [r3, #4]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 f84d 	bl	8009ffc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
      break;
 8008f6e:	e11d      	b.n	80091ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008f70:	2101      	movs	r1, #1
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa68 	bl	8009448 <USBH_SetAddress>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d132      	bne.n	8008fe8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008f82:	2002      	movs	r0, #2
 8008f84:	f001 fb30 	bl	800a5e8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2203      	movs	r2, #3
 8008f94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7919      	ldrb	r1, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008faa:	b292      	uxth	r2, r2
 8008fac:	9202      	str	r2, [sp, #8]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	9201      	str	r2, [sp, #4]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2280      	movs	r2, #128	; 0x80
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 ffcf 	bl	8009f5c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	7959      	ldrb	r1, [r3, #5]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fd2:	b292      	uxth	r2, r2
 8008fd4:	9202      	str	r2, [sp, #8]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	9201      	str	r2, [sp, #4]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2200      	movs	r2, #0
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 ffbb 	bl	8009f5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fe6:	e0e3      	b.n	80091b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	f040 80e0 	bne.w	80091b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	220d      	movs	r2, #13
 8008ff4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	705a      	strb	r2, [r3, #1]
      break;
 8008ffc:	e0d8      	b.n	80091b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008ffe:	2109      	movs	r1, #9
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f99d 	bl	8009340 <USBH_Get_CfgDesc>
 8009006:	4603      	mov	r3, r0
 8009008:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2204      	movs	r2, #4
 8009014:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009016:	e0cd      	b.n	80091b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b03      	cmp	r3, #3
 800901c:	f040 80ca 	bne.w	80091b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009026:	3301      	adds	r3, #1
 8009028:	b2da      	uxtb	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009036:	2b03      	cmp	r3, #3
 8009038:	d903      	bls.n	8009042 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	220d      	movs	r2, #13
 800903e:	701a      	strb	r2, [r3, #0]
      break;
 8009040:	e0b8      	b.n	80091b4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	795b      	ldrb	r3, [r3, #5]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 ffd7 	bl	8009ffc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	791b      	ldrb	r3, [r3, #4]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 ffd1 	bl	8009ffc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	701a      	strb	r2, [r3, #0]
      break;
 8009066:	e0a5      	b.n	80091b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f965 	bl	8009340 <USBH_Get_CfgDesc>
 8009076:	4603      	mov	r3, r0
 8009078:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d103      	bne.n	8009088 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2205      	movs	r2, #5
 8009084:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009086:	e097      	b.n	80091b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	2b03      	cmp	r3, #3
 800908c:	f040 8094 	bne.w	80091b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009096:	3301      	adds	r3, #1
 8009098:	b2da      	uxtb	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d903      	bls.n	80090b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	220d      	movs	r2, #13
 80090ae:	701a      	strb	r2, [r3, #0]
      break;
 80090b0:	e082      	b.n	80091b8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	795b      	ldrb	r3, [r3, #5]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 ff9f 	bl	8009ffc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	791b      	ldrb	r3, [r3, #4]
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 ff99 	bl	8009ffc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	701a      	strb	r2, [r3, #0]
      break;
 80090d6:	e06f      	b.n	80091b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d019      	beq.n	8009116 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090ee:	23ff      	movs	r3, #255	; 0xff
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f949 	bl	8009388 <USBH_Get_StringDesc>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d103      	bne.n	8009108 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2206      	movs	r2, #6
 8009104:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009106:	e059      	b.n	80091bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	2b03      	cmp	r3, #3
 800910c:	d156      	bne.n	80091bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2206      	movs	r2, #6
 8009112:	705a      	strb	r2, [r3, #1]
      break;
 8009114:	e052      	b.n	80091bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2206      	movs	r2, #6
 800911a:	705a      	strb	r2, [r3, #1]
      break;
 800911c:	e04e      	b.n	80091bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009124:	2b00      	cmp	r3, #0
 8009126:	d019      	beq.n	800915c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009134:	23ff      	movs	r3, #255	; 0xff
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f926 	bl	8009388 <USBH_Get_StringDesc>
 800913c:	4603      	mov	r3, r0
 800913e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d103      	bne.n	800914e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2207      	movs	r2, #7
 800914a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800914c:	e038      	b.n	80091c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	2b03      	cmp	r3, #3
 8009152:	d135      	bne.n	80091c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2207      	movs	r2, #7
 8009158:	705a      	strb	r2, [r3, #1]
      break;
 800915a:	e031      	b.n	80091c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2207      	movs	r2, #7
 8009160:	705a      	strb	r2, [r3, #1]
      break;
 8009162:	e02d      	b.n	80091c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800916a:	2b00      	cmp	r3, #0
 800916c:	d017      	beq.n	800919e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800917a:	23ff      	movs	r3, #255	; 0xff
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f903 	bl	8009388 <USBH_Get_StringDesc>
 8009182:	4603      	mov	r3, r0
 8009184:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d102      	bne.n	8009192 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009190:	e018      	b.n	80091c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b03      	cmp	r3, #3
 8009196:	d115      	bne.n	80091c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
      break;
 800919c:	e012      	b.n	80091c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]
      break;
 80091a2:	e00f      	b.n	80091c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80091a4:	bf00      	nop
 80091a6:	e00e      	b.n	80091c6 <USBH_HandleEnum+0x3be>
      break;
 80091a8:	bf00      	nop
 80091aa:	e00c      	b.n	80091c6 <USBH_HandleEnum+0x3be>
      break;
 80091ac:	bf00      	nop
 80091ae:	e00a      	b.n	80091c6 <USBH_HandleEnum+0x3be>
      break;
 80091b0:	bf00      	nop
 80091b2:	e008      	b.n	80091c6 <USBH_HandleEnum+0x3be>
      break;
 80091b4:	bf00      	nop
 80091b6:	e006      	b.n	80091c6 <USBH_HandleEnum+0x3be>
      break;
 80091b8:	bf00      	nop
 80091ba:	e004      	b.n	80091c6 <USBH_HandleEnum+0x3be>
      break;
 80091bc:	bf00      	nop
 80091be:	e002      	b.n	80091c6 <USBH_HandleEnum+0x3be>
      break;
 80091c0:	bf00      	nop
 80091c2:	e000      	b.n	80091c6 <USBH_HandleEnum+0x3be>
      break;
 80091c4:	bf00      	nop
  }
  return Status;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80091e2:	bf00      	nop
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f804 	bl	8009212 <USBH_HandleSof>
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b0b      	cmp	r3, #11
 8009222:	d10a      	bne.n	800923a <USBH_HandleSof+0x28>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d005      	beq.n	800923a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	4798      	blx	r3
  }
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009252:	bf00      	nop
}
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800925e:	b480      	push	{r7}
 8009260:	b083      	sub	sp, #12
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800926e:	bf00      	nop
}
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f844 	bl	800a356 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	791b      	ldrb	r3, [r3, #4]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fe91 	bl	8009ffc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	795b      	ldrb	r3, [r3, #5]
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fe8b 	bl	8009ffc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	b29b      	uxth	r3, r3
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	4613      	mov	r3, r2
 800930a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800930e:	2100      	movs	r1, #0
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f864 	bl	80093de <USBH_GetDescriptor>
 8009316:	4603      	mov	r3, r0
 8009318:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800932c:	78fa      	ldrb	r2, [r7, #3]
 800932e:	b292      	uxth	r2, r2
 8009330:	4619      	mov	r1, r3
 8009332:	f000 f918 	bl	8009566 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af02      	add	r7, sp, #8
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	331c      	adds	r3, #28
 8009350:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009352:	887b      	ldrh	r3, [r7, #2]
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800935c:	2100      	movs	r1, #0
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f83d 	bl	80093de <USBH_GetDescriptor>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d107      	bne.n	800937e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800936e:	887b      	ldrh	r3, [r7, #2]
 8009370:	461a      	mov	r2, r3
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f987 	bl	8009688 <USBH_ParseCfgDesc>
 800937a:	4603      	mov	r3, r0
 800937c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af02      	add	r7, sp, #8
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	607a      	str	r2, [r7, #4]
 8009392:	461a      	mov	r2, r3
 8009394:	460b      	mov	r3, r1
 8009396:	72fb      	strb	r3, [r7, #11]
 8009398:	4613      	mov	r3, r2
 800939a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800939c:	7afb      	ldrb	r3, [r7, #11]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80093a4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80093ac:	893b      	ldrh	r3, [r7, #8]
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	460b      	mov	r3, r1
 80093b2:	2100      	movs	r1, #0
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 f812 	bl	80093de <USBH_GetDescriptor>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d107      	bne.n	80093d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80093ca:	893a      	ldrh	r2, [r7, #8]
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fb24 	bl	8009a1c <USBH_ParseStringDesc>
  }

  return status;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	607b      	str	r3, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	72fb      	strb	r3, [r7, #11]
 80093ec:	4613      	mov	r3, r2
 80093ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	789b      	ldrb	r3, [r3, #2]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d11c      	bne.n	8009432 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2206      	movs	r2, #6
 8009408:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	893a      	ldrh	r2, [r7, #8]
 800940e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009410:	893b      	ldrh	r3, [r7, #8]
 8009412:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800941a:	d104      	bne.n	8009426 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f240 4209 	movw	r2, #1033	; 0x409
 8009422:	829a      	strh	r2, [r3, #20]
 8009424:	e002      	b.n	800942c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8b3a      	ldrh	r2, [r7, #24]
 8009430:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009432:	8b3b      	ldrh	r3, [r7, #24]
 8009434:	461a      	mov	r2, r3
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fb3d 	bl	8009ab8 <USBH_CtlReq>
 800943e:	4603      	mov	r3, r0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	789b      	ldrb	r3, [r3, #2]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d10f      	bne.n	800947c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2205      	movs	r2, #5
 8009466:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	b29a      	uxth	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800947c:	2200      	movs	r2, #0
 800947e:	2100      	movs	r1, #0
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fb19 	bl	8009ab8 <USBH_CtlReq>
 8009486:	4603      	mov	r3, r0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	789b      	ldrb	r3, [r3, #2]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d10e      	bne.n	80094c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2209      	movs	r2, #9
 80094ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	887a      	ldrh	r2, [r7, #2]
 80094b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80094c2:	2200      	movs	r2, #0
 80094c4:	2100      	movs	r1, #0
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 faf6 	bl	8009ab8 <USBH_CtlReq>
 80094cc:	4603      	mov	r3, r0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	789b      	ldrb	r3, [r3, #2]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d10f      	bne.n	800950a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2203      	movs	r2, #3
 80094f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800950a:	2200      	movs	r2, #0
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fad2 	bl	8009ab8 <USBH_CtlReq>
 8009514:	4603      	mov	r3, r0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	789b      	ldrb	r3, [r3, #2]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d10f      	bne.n	8009552 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2202      	movs	r2, #2
 8009536:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009552:	2200      	movs	r2, #0
 8009554:	2100      	movs	r1, #0
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 faae 	bl	8009ab8 <USBH_CtlReq>
 800955c:	4603      	mov	r3, r0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	4613      	mov	r3, r2
 8009572:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	781a      	ldrb	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	785a      	ldrb	r2, [r3, #1]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	3302      	adds	r3, #2
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	b29a      	uxth	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	3303      	adds	r3, #3
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	b29b      	uxth	r3, r3
 8009594:	021b      	lsls	r3, r3, #8
 8009596:	b29b      	uxth	r3, r3
 8009598:	4313      	orrs	r3, r2
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	791a      	ldrb	r2, [r3, #4]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	795a      	ldrb	r2, [r3, #5]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	799a      	ldrb	r2, [r3, #6]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	79da      	ldrb	r2, [r3, #7]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	79db      	ldrb	r3, [r3, #7]
 80095c4:	2b20      	cmp	r3, #32
 80095c6:	dc11      	bgt.n	80095ec <USBH_ParseDevDesc+0x86>
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	db16      	blt.n	80095fa <USBH_ParseDevDesc+0x94>
 80095cc:	3b08      	subs	r3, #8
 80095ce:	2201      	movs	r2, #1
 80095d0:	fa02 f303 	lsl.w	r3, r2, r3
 80095d4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80095d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	bf14      	ite	ne
 80095e0:	2301      	movne	r3, #1
 80095e2:	2300      	moveq	r3, #0
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d102      	bne.n	80095f0 <USBH_ParseDevDesc+0x8a>
 80095ea:	e006      	b.n	80095fa <USBH_ParseDevDesc+0x94>
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d104      	bne.n	80095fa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	79da      	ldrb	r2, [r3, #7]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	71da      	strb	r2, [r3, #7]
      break;
 80095f8:	e003      	b.n	8009602 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2240      	movs	r2, #64	; 0x40
 80095fe:	71da      	strb	r2, [r3, #7]
      break;
 8009600:	bf00      	nop
  }

  if (length > 8U)
 8009602:	88fb      	ldrh	r3, [r7, #6]
 8009604:	2b08      	cmp	r3, #8
 8009606:	d939      	bls.n	800967c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	3308      	adds	r3, #8
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	b29a      	uxth	r2, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	3309      	adds	r3, #9
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	b29b      	uxth	r3, r3
 8009618:	021b      	lsls	r3, r3, #8
 800961a:	b29b      	uxth	r3, r3
 800961c:	4313      	orrs	r3, r2
 800961e:	b29a      	uxth	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	330a      	adds	r3, #10
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	b29a      	uxth	r2, r3
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	330b      	adds	r3, #11
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	b29b      	uxth	r3, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	330c      	adds	r3, #12
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	b29a      	uxth	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	330d      	adds	r3, #13
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	b29b      	uxth	r3, r3
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	b29b      	uxth	r3, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	7b9a      	ldrb	r2, [r3, #14]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	7bda      	ldrb	r2, [r3, #15]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	7c1a      	ldrb	r2, [r3, #16]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	7c5a      	ldrb	r2, [r3, #17]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	745a      	strb	r2, [r3, #17]
  }
}
 800967c:	bf00      	nop
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08c      	sub	sp, #48	; 0x30
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800969c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	781a      	ldrb	r2, [r3, #0]
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	785a      	ldrb	r2, [r3, #1]
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	3302      	adds	r3, #2
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3303      	adds	r3, #3
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	b29b      	uxth	r3, r3
 80096dc:	4313      	orrs	r3, r2
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e4:	bf28      	it	cs
 80096e6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	791a      	ldrb	r2, [r3, #4]
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	795a      	ldrb	r2, [r3, #5]
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	799a      	ldrb	r2, [r3, #6]
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	79da      	ldrb	r2, [r3, #7]
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	7a1a      	ldrb	r2, [r3, #8]
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b09      	cmp	r3, #9
 800971e:	d002      	beq.n	8009726 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	2209      	movs	r2, #9
 8009724:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	2b09      	cmp	r3, #9
 800972a:	f240 809d 	bls.w	8009868 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800972e:	2309      	movs	r3, #9
 8009730:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009736:	e081      	b.n	800983c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009738:	f107 0316 	add.w	r3, r7, #22
 800973c:	4619      	mov	r1, r3
 800973e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009740:	f000 f99f 	bl	8009a82 <USBH_GetNextDesc>
 8009744:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	785b      	ldrb	r3, [r3, #1]
 800974a:	2b04      	cmp	r3, #4
 800974c:	d176      	bne.n	800983c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b09      	cmp	r3, #9
 8009754:	d002      	beq.n	800975c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	2209      	movs	r2, #9
 800975a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800975c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009760:	221a      	movs	r2, #26
 8009762:	fb02 f303 	mul.w	r3, r2, r3
 8009766:	3308      	adds	r3, #8
 8009768:	6a3a      	ldr	r2, [r7, #32]
 800976a:	4413      	add	r3, r2
 800976c:	3302      	adds	r3, #2
 800976e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009772:	69f8      	ldr	r0, [r7, #28]
 8009774:	f000 f87e 	bl	8009874 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009782:	e043      	b.n	800980c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009784:	f107 0316 	add.w	r3, r7, #22
 8009788:	4619      	mov	r1, r3
 800978a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800978c:	f000 f979 	bl	8009a82 <USBH_GetNextDesc>
 8009790:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	785b      	ldrb	r3, [r3, #1]
 8009796:	2b05      	cmp	r3, #5
 8009798:	d138      	bne.n	800980c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	795b      	ldrb	r3, [r3, #5]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d10f      	bne.n	80097c2 <USBH_ParseCfgDesc+0x13a>
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	799b      	ldrb	r3, [r3, #6]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d10b      	bne.n	80097c2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	79db      	ldrb	r3, [r3, #7]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10f      	bne.n	80097d2 <USBH_ParseCfgDesc+0x14a>
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b09      	cmp	r3, #9
 80097b8:	d00b      	beq.n	80097d2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	2209      	movs	r2, #9
 80097be:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80097c0:	e007      	b.n	80097d2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2b07      	cmp	r3, #7
 80097c8:	d004      	beq.n	80097d4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80097ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097cc:	2207      	movs	r2, #7
 80097ce:	701a      	strb	r2, [r3, #0]
 80097d0:	e000      	b.n	80097d4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80097d2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80097d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80097dc:	3201      	adds	r2, #1
 80097de:	00d2      	lsls	r2, r2, #3
 80097e0:	211a      	movs	r1, #26
 80097e2:	fb01 f303 	mul.w	r3, r1, r3
 80097e6:	4413      	add	r3, r2
 80097e8:	3308      	adds	r3, #8
 80097ea:	6a3a      	ldr	r2, [r7, #32]
 80097ec:	4413      	add	r3, r2
 80097ee:	3304      	adds	r3, #4
 80097f0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80097f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097f4:	69b9      	ldr	r1, [r7, #24]
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f86b 	bl	80098d2 <USBH_ParseEPDesc>
 80097fc:	4603      	mov	r3, r0
 80097fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009802:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009806:	3301      	adds	r3, #1
 8009808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	791b      	ldrb	r3, [r3, #4]
 8009810:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009814:	429a      	cmp	r2, r3
 8009816:	d204      	bcs.n	8009822 <USBH_ParseCfgDesc+0x19a>
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	885a      	ldrh	r2, [r3, #2]
 800981c:	8afb      	ldrh	r3, [r7, #22]
 800981e:	429a      	cmp	r2, r3
 8009820:	d8b0      	bhi.n	8009784 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	791b      	ldrb	r3, [r3, #4]
 8009826:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800982a:	429a      	cmp	r2, r3
 800982c:	d201      	bcs.n	8009832 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800982e:	2303      	movs	r3, #3
 8009830:	e01c      	b.n	800986c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009836:	3301      	adds	r3, #1
 8009838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800983c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009840:	2b01      	cmp	r3, #1
 8009842:	d805      	bhi.n	8009850 <USBH_ParseCfgDesc+0x1c8>
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	885a      	ldrh	r2, [r3, #2]
 8009848:	8afb      	ldrh	r3, [r7, #22]
 800984a:	429a      	cmp	r2, r3
 800984c:	f63f af74 	bhi.w	8009738 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	791b      	ldrb	r3, [r3, #4]
 8009854:	2b02      	cmp	r3, #2
 8009856:	bf28      	it	cs
 8009858:	2302      	movcs	r3, #2
 800985a:	b2db      	uxtb	r3, r3
 800985c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009860:	429a      	cmp	r2, r3
 8009862:	d201      	bcs.n	8009868 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009864:	2303      	movs	r3, #3
 8009866:	e001      	b.n	800986c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800986c:	4618      	mov	r0, r3
 800986e:	3730      	adds	r7, #48	; 0x30
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781a      	ldrb	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	785a      	ldrb	r2, [r3, #1]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	789a      	ldrb	r2, [r3, #2]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	78da      	ldrb	r2, [r3, #3]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	791a      	ldrb	r2, [r3, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	795a      	ldrb	r2, [r3, #5]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	799a      	ldrb	r2, [r3, #6]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	79da      	ldrb	r2, [r3, #7]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	7a1a      	ldrb	r2, [r3, #8]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	721a      	strb	r2, [r3, #8]
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b087      	sub	sp, #28
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	781a      	ldrb	r2, [r3, #0]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	785a      	ldrb	r2, [r3, #1]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	789a      	ldrb	r2, [r3, #2]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	78da      	ldrb	r2, [r3, #3]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3304      	adds	r3, #4
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3305      	adds	r3, #5
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	b29b      	uxth	r3, r3
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	b29b      	uxth	r3, r3
 8009916:	4313      	orrs	r3, r2
 8009918:	b29a      	uxth	r2, r3
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	799a      	ldrb	r2, [r3, #6]
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	889b      	ldrh	r3, [r3, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d102      	bne.n	8009934 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800992e:	2303      	movs	r3, #3
 8009930:	75fb      	strb	r3, [r7, #23]
 8009932:	e033      	b.n	800999c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	889b      	ldrh	r3, [r3, #4]
 8009938:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800993c:	f023 0307 	bic.w	r3, r3, #7
 8009940:	b29a      	uxth	r2, r3
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	889b      	ldrh	r3, [r3, #4]
 800994a:	b21a      	sxth	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3304      	adds	r3, #4
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b299      	uxth	r1, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3305      	adds	r3, #5
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	b29b      	uxth	r3, r3
 8009960:	430b      	orrs	r3, r1
 8009962:	b29b      	uxth	r3, r3
 8009964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009968:	2b00      	cmp	r3, #0
 800996a:	d110      	bne.n	800998e <USBH_ParseEPDesc+0xbc>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3304      	adds	r3, #4
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	b299      	uxth	r1, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3305      	adds	r3, #5
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	b29b      	uxth	r3, r3
 8009980:	430b      	orrs	r3, r1
 8009982:	b29b      	uxth	r3, r3
 8009984:	b21b      	sxth	r3, r3
 8009986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800998a:	b21b      	sxth	r3, r3
 800998c:	e001      	b.n	8009992 <USBH_ParseEPDesc+0xc0>
 800998e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009992:	4313      	orrs	r3, r2
 8009994:	b21b      	sxth	r3, r3
 8009996:	b29a      	uxth	r2, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d116      	bne.n	80099d4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	78db      	ldrb	r3, [r3, #3]
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d005      	beq.n	80099be <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	78db      	ldrb	r3, [r3, #3]
 80099b6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d127      	bne.n	8009a0e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	799b      	ldrb	r3, [r3, #6]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <USBH_ParseEPDesc+0xfc>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	799b      	ldrb	r3, [r3, #6]
 80099ca:	2b10      	cmp	r3, #16
 80099cc:	d91f      	bls.n	8009a0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80099ce:	2303      	movs	r3, #3
 80099d0:	75fb      	strb	r3, [r7, #23]
 80099d2:	e01c      	b.n	8009a0e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	78db      	ldrb	r3, [r3, #3]
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d10a      	bne.n	80099f6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	799b      	ldrb	r3, [r3, #6]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d003      	beq.n	80099f0 <USBH_ParseEPDesc+0x11e>
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	799b      	ldrb	r3, [r3, #6]
 80099ec:	2b10      	cmp	r3, #16
 80099ee:	d90e      	bls.n	8009a0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80099f0:	2303      	movs	r3, #3
 80099f2:	75fb      	strb	r3, [r7, #23]
 80099f4:	e00b      	b.n	8009a0e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	78db      	ldrb	r3, [r3, #3]
 80099fa:	f003 0303 	and.w	r3, r3, #3
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d105      	bne.n	8009a0e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	799b      	ldrb	r3, [r3, #6]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d120      	bne.n	8009a76 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	1e9a      	subs	r2, r3, #2
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	bf28      	it	cs
 8009a40:	4613      	movcs	r3, r2
 8009a42:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3302      	adds	r3, #2
 8009a48:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	82fb      	strh	r3, [r7, #22]
 8009a4e:	e00b      	b.n	8009a68 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009a50:	8afb      	ldrh	r3, [r7, #22]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4413      	add	r3, r2
 8009a56:	781a      	ldrb	r2, [r3, #0]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009a62:	8afb      	ldrh	r3, [r7, #22]
 8009a64:	3302      	adds	r3, #2
 8009a66:	82fb      	strh	r3, [r7, #22]
 8009a68:	8afa      	ldrh	r2, [r7, #22]
 8009a6a:	8abb      	ldrh	r3, [r7, #20]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d3ef      	bcc.n	8009a50 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
  }
}
 8009a76:	bf00      	nop
 8009a78:	371c      	adds	r7, #28
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	881a      	ldrh	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	4413      	add	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	789b      	ldrb	r3, [r3, #2]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d002      	beq.n	8009ad8 <USBH_CtlReq+0x20>
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d00f      	beq.n	8009af6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009ad6:	e027      	b.n	8009b28 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	88fa      	ldrh	r2, [r7, #6]
 8009ae2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2202      	movs	r2, #2
 8009aee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009af0:	2301      	movs	r3, #1
 8009af2:	75fb      	strb	r3, [r7, #23]
      break;
 8009af4:	e018      	b.n	8009b28 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f000 f81c 	bl	8009b34 <USBH_HandleControl>
 8009afc:	4603      	mov	r3, r0
 8009afe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <USBH_CtlReq+0x54>
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	d106      	bne.n	8009b1a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	761a      	strb	r2, [r3, #24]
      break;
 8009b18:	e005      	b.n	8009b26 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d102      	bne.n	8009b26 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2201      	movs	r2, #1
 8009b24:	709a      	strb	r2, [r3, #2]
      break;
 8009b26:	bf00      	nop
  }
  return status;
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af02      	add	r7, sp, #8
 8009b3a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	7e1b      	ldrb	r3, [r3, #24]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	2b0a      	cmp	r3, #10
 8009b4c:	f200 8156 	bhi.w	8009dfc <USBH_HandleControl+0x2c8>
 8009b50:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <USBH_HandleControl+0x24>)
 8009b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b56:	bf00      	nop
 8009b58:	08009b85 	.word	0x08009b85
 8009b5c:	08009b9f 	.word	0x08009b9f
 8009b60:	08009c09 	.word	0x08009c09
 8009b64:	08009c2f 	.word	0x08009c2f
 8009b68:	08009c67 	.word	0x08009c67
 8009b6c:	08009c91 	.word	0x08009c91
 8009b70:	08009ce3 	.word	0x08009ce3
 8009b74:	08009d05 	.word	0x08009d05
 8009b78:	08009d41 	.word	0x08009d41
 8009b7c:	08009d67 	.word	0x08009d67
 8009b80:	08009da5 	.word	0x08009da5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f103 0110 	add.w	r1, r3, #16
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	795b      	ldrb	r3, [r3, #5]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f943 	bl	8009e1c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	761a      	strb	r2, [r3, #24]
      break;
 8009b9c:	e139      	b.n	8009e12 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	795b      	ldrb	r3, [r3, #5]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fcc5 	bl	800a534 <USBH_LL_GetURBState>
 8009baa:	4603      	mov	r3, r0
 8009bac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009bae:	7bbb      	ldrb	r3, [r7, #14]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d11e      	bne.n	8009bf2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	7c1b      	ldrb	r3, [r3, #16]
 8009bb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bbc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	8adb      	ldrh	r3, [r3, #22]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00a      	beq.n	8009bdc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009bc6:	7b7b      	ldrb	r3, [r7, #13]
 8009bc8:	2b80      	cmp	r3, #128	; 0x80
 8009bca:	d103      	bne.n	8009bd4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2203      	movs	r2, #3
 8009bd0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bd2:	e115      	b.n	8009e00 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2205      	movs	r2, #5
 8009bd8:	761a      	strb	r2, [r3, #24]
      break;
 8009bda:	e111      	b.n	8009e00 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009bdc:	7b7b      	ldrb	r3, [r7, #13]
 8009bde:	2b80      	cmp	r3, #128	; 0x80
 8009be0:	d103      	bne.n	8009bea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2209      	movs	r2, #9
 8009be6:	761a      	strb	r2, [r3, #24]
      break;
 8009be8:	e10a      	b.n	8009e00 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2207      	movs	r2, #7
 8009bee:	761a      	strb	r2, [r3, #24]
      break;
 8009bf0:	e106      	b.n	8009e00 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d003      	beq.n	8009c00 <USBH_HandleControl+0xcc>
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	f040 8100 	bne.w	8009e00 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	220b      	movs	r2, #11
 8009c04:	761a      	strb	r2, [r3, #24]
      break;
 8009c06:	e0fb      	b.n	8009e00 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6899      	ldr	r1, [r3, #8]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	899a      	ldrh	r2, [r3, #12]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	791b      	ldrb	r3, [r3, #4]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f93a 	bl	8009e9a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2204      	movs	r2, #4
 8009c2a:	761a      	strb	r2, [r3, #24]
      break;
 8009c2c:	e0f1      	b.n	8009e12 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	791b      	ldrb	r3, [r3, #4]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fc7d 	bl	800a534 <USBH_LL_GetURBState>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d102      	bne.n	8009c4a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2209      	movs	r2, #9
 8009c48:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	2b05      	cmp	r3, #5
 8009c4e:	d102      	bne.n	8009c56 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009c50:	2303      	movs	r3, #3
 8009c52:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c54:	e0d6      	b.n	8009e04 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	f040 80d3 	bne.w	8009e04 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	220b      	movs	r2, #11
 8009c62:	761a      	strb	r2, [r3, #24]
      break;
 8009c64:	e0ce      	b.n	8009e04 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6899      	ldr	r1, [r3, #8]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	899a      	ldrh	r2, [r3, #12]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	795b      	ldrb	r3, [r3, #5]
 8009c72:	2001      	movs	r0, #1
 8009c74:	9000      	str	r0, [sp, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f8ea 	bl	8009e50 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2206      	movs	r2, #6
 8009c8c:	761a      	strb	r2, [r3, #24]
      break;
 8009c8e:	e0c0      	b.n	8009e12 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	795b      	ldrb	r3, [r3, #5]
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fc4c 	bl	800a534 <USBH_LL_GetURBState>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d103      	bne.n	8009cae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2207      	movs	r2, #7
 8009caa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009cac:	e0ac      	b.n	8009e08 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b05      	cmp	r3, #5
 8009cb2:	d105      	bne.n	8009cc0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	220c      	movs	r2, #12
 8009cb8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8009cbe:	e0a3      	b.n	8009e08 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d103      	bne.n	8009cce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2205      	movs	r2, #5
 8009cca:	761a      	strb	r2, [r3, #24]
      break;
 8009ccc:	e09c      	b.n	8009e08 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	f040 8099 	bne.w	8009e08 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	220b      	movs	r2, #11
 8009cda:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009cdc:	2302      	movs	r3, #2
 8009cde:	73fb      	strb	r3, [r7, #15]
      break;
 8009ce0:	e092      	b.n	8009e08 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	791b      	ldrb	r3, [r3, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2100      	movs	r1, #0
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f8d5 	bl	8009e9a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2208      	movs	r2, #8
 8009d00:	761a      	strb	r2, [r3, #24]

      break;
 8009d02:	e086      	b.n	8009e12 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	791b      	ldrb	r3, [r3, #4]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fc12 	bl	800a534 <USBH_LL_GetURBState>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d105      	bne.n	8009d26 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	220d      	movs	r2, #13
 8009d1e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d24:	e072      	b.n	8009e0c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d103      	bne.n	8009d34 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	220b      	movs	r2, #11
 8009d30:	761a      	strb	r2, [r3, #24]
      break;
 8009d32:	e06b      	b.n	8009e0c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	2b05      	cmp	r3, #5
 8009d38:	d168      	bne.n	8009e0c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d3e:	e065      	b.n	8009e0c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	795b      	ldrb	r3, [r3, #5]
 8009d44:	2201      	movs	r2, #1
 8009d46:	9200      	str	r2, [sp, #0]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f87f 	bl	8009e50 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	220a      	movs	r2, #10
 8009d62:	761a      	strb	r2, [r3, #24]
      break;
 8009d64:	e055      	b.n	8009e12 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	795b      	ldrb	r3, [r3, #5]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fbe1 	bl	800a534 <USBH_LL_GetURBState>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009d76:	7bbb      	ldrb	r3, [r7, #14]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d105      	bne.n	8009d88 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	220d      	movs	r2, #13
 8009d84:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d86:	e043      	b.n	8009e10 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d103      	bne.n	8009d96 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2209      	movs	r2, #9
 8009d92:	761a      	strb	r2, [r3, #24]
      break;
 8009d94:	e03c      	b.n	8009e10 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b04      	cmp	r3, #4
 8009d9a:	d139      	bne.n	8009e10 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	220b      	movs	r2, #11
 8009da0:	761a      	strb	r2, [r3, #24]
      break;
 8009da2:	e035      	b.n	8009e10 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	7e5b      	ldrb	r3, [r3, #25]
 8009da8:	3301      	adds	r3, #1
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	765a      	strb	r2, [r3, #25]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	7e5b      	ldrb	r3, [r3, #25]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d806      	bhi.n	8009dc6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009dc4:	e025      	b.n	8009e12 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009dcc:	2106      	movs	r1, #6
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	795b      	ldrb	r3, [r3, #5]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f90c 	bl	8009ffc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	791b      	ldrb	r3, [r3, #4]
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f906 	bl	8009ffc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009df6:	2302      	movs	r3, #2
 8009df8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dfa:	e00a      	b.n	8009e12 <USBH_HandleControl+0x2de>

    default:
      break;
 8009dfc:	bf00      	nop
 8009dfe:	e008      	b.n	8009e12 <USBH_HandleControl+0x2de>
      break;
 8009e00:	bf00      	nop
 8009e02:	e006      	b.n	8009e12 <USBH_HandleControl+0x2de>
      break;
 8009e04:	bf00      	nop
 8009e06:	e004      	b.n	8009e12 <USBH_HandleControl+0x2de>
      break;
 8009e08:	bf00      	nop
 8009e0a:	e002      	b.n	8009e12 <USBH_HandleControl+0x2de>
      break;
 8009e0c:	bf00      	nop
 8009e0e:	e000      	b.n	8009e12 <USBH_HandleControl+0x2de>
      break;
 8009e10:	bf00      	nop
  }

  return status;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af04      	add	r7, sp, #16
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	4613      	mov	r3, r2
 8009e28:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e2a:	79f9      	ldrb	r1, [r7, #7]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9303      	str	r3, [sp, #12]
 8009e30:	2308      	movs	r3, #8
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2200      	movs	r2, #0
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f000 fb46 	bl	800a4d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af04      	add	r7, sp, #16
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	460b      	mov	r3, r1
 8009e60:	80fb      	strh	r3, [r7, #6]
 8009e62:	4613      	mov	r3, r2
 8009e64:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e74:	7979      	ldrb	r1, [r7, #5]
 8009e76:	7e3b      	ldrb	r3, [r7, #24]
 8009e78:	9303      	str	r3, [sp, #12]
 8009e7a:	88fb      	ldrh	r3, [r7, #6]
 8009e7c:	9302      	str	r3, [sp, #8]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	2301      	movs	r3, #1
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	2300      	movs	r3, #0
 8009e88:	2200      	movs	r2, #0
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 fb21 	bl	800a4d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b088      	sub	sp, #32
 8009e9e:	af04      	add	r7, sp, #16
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	80fb      	strh	r3, [r7, #6]
 8009eac:	4613      	mov	r3, r2
 8009eae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009eb0:	7979      	ldrb	r1, [r7, #5]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	9303      	str	r3, [sp, #12]
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	9302      	str	r3, [sp, #8]
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fb03 	bl	800a4d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009ecc:	2300      	movs	r3, #0

}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b088      	sub	sp, #32
 8009eda:	af04      	add	r7, sp, #16
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	80fb      	strh	r3, [r7, #6]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009efa:	7979      	ldrb	r1, [r7, #5]
 8009efc:	7e3b      	ldrb	r3, [r7, #24]
 8009efe:	9303      	str	r3, [sp, #12]
 8009f00:	88fb      	ldrh	r3, [r7, #6]
 8009f02:	9302      	str	r3, [sp, #8]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	2301      	movs	r3, #1
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 fade 	bl	800a4d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af04      	add	r7, sp, #16
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	460b      	mov	r3, r1
 8009f30:	80fb      	strh	r3, [r7, #6]
 8009f32:	4613      	mov	r3, r2
 8009f34:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f36:	7979      	ldrb	r1, [r7, #5]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9303      	str	r3, [sp, #12]
 8009f3c:	88fb      	ldrh	r3, [r7, #6]
 8009f3e:	9302      	str	r3, [sp, #8]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	9301      	str	r3, [sp, #4]
 8009f44:	2301      	movs	r3, #1
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	2302      	movs	r3, #2
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 fac0 	bl	800a4d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af04      	add	r7, sp, #16
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	4608      	mov	r0, r1
 8009f66:	4611      	mov	r1, r2
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	70fb      	strb	r3, [r7, #3]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	70bb      	strb	r3, [r7, #2]
 8009f72:	4613      	mov	r3, r2
 8009f74:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009f76:	7878      	ldrb	r0, [r7, #1]
 8009f78:	78ba      	ldrb	r2, [r7, #2]
 8009f7a:	78f9      	ldrb	r1, [r7, #3]
 8009f7c:	8b3b      	ldrh	r3, [r7, #24]
 8009f7e:	9302      	str	r3, [sp, #8]
 8009f80:	7d3b      	ldrb	r3, [r7, #20]
 8009f82:	9301      	str	r3, [sp, #4]
 8009f84:	7c3b      	ldrb	r3, [r7, #16]
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	4603      	mov	r3, r0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fa53 	bl	800a436 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009fa6:	78fb      	ldrb	r3, [r7, #3]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa72 	bl	800a494 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f836 	bl	800a038 <USBH_GetFreePipe>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009fd0:	89fb      	ldrh	r3, [r7, #14]
 8009fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00a      	beq.n	8009ff0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009fda:	78fa      	ldrb	r2, [r7, #3]
 8009fdc:	89fb      	ldrh	r3, [r7, #14]
 8009fde:	f003 030f 	and.w	r3, r3, #15
 8009fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	33e0      	adds	r3, #224	; 0xe0
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	440b      	add	r3, r1
 8009fee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009ff0:	89fb      	ldrh	r3, [r7, #14]
 8009ff2:	b2db      	uxtb	r3, r3
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a008:	78fb      	ldrb	r3, [r7, #3]
 800a00a:	2b0f      	cmp	r3, #15
 800a00c:	d80d      	bhi.n	800a02a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	33e0      	adds	r3, #224	; 0xe0
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	33e0      	adds	r3, #224	; 0xe0
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	440b      	add	r3, r1
 800a028:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]
 800a048:	e00f      	b.n	800a06a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	33e0      	adds	r3, #224	; 0xe0
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d102      	bne.n	800a064 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	b29b      	uxth	r3, r3
 800a062:	e007      	b.n	800a074 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	3301      	adds	r3, #1
 800a068:	73fb      	strb	r3, [r7, #15]
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	2b0f      	cmp	r3, #15
 800a06e:	d9ec      	bls.n	800a04a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a070:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a074:	4618      	mov	r0, r3
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a084:	2201      	movs	r2, #1
 800a086:	490e      	ldr	r1, [pc, #56]	; (800a0c0 <MX_USB_HOST_Init+0x40>)
 800a088:	480e      	ldr	r0, [pc, #56]	; (800a0c4 <MX_USB_HOST_Init+0x44>)
 800a08a:	f7fe fba7 	bl	80087dc <USBH_Init>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a094:	f7f7 fbc4 	bl	8001820 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a098:	490b      	ldr	r1, [pc, #44]	; (800a0c8 <MX_USB_HOST_Init+0x48>)
 800a09a:	480a      	ldr	r0, [pc, #40]	; (800a0c4 <MX_USB_HOST_Init+0x44>)
 800a09c:	f7fe fc2c 	bl	80088f8 <USBH_RegisterClass>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a0a6:	f7f7 fbbb 	bl	8001820 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a0aa:	4806      	ldr	r0, [pc, #24]	; (800a0c4 <MX_USB_HOST_Init+0x44>)
 800a0ac:	f7fe fcb0 	bl	8008a10 <USBH_Start>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a0b6:	f7f7 fbb3 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a0ba:	bf00      	nop
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	0800a0e1 	.word	0x0800a0e1
 800a0c4:	200003d8 	.word	0x200003d8
 800a0c8:	2000000c 	.word	0x2000000c

0800a0cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a0d0:	4802      	ldr	r0, [pc, #8]	; (800a0dc <MX_USB_HOST_Process+0x10>)
 800a0d2:	f7fe fcad 	bl	8008a30 <USBH_Process>
}
 800a0d6:	bf00      	nop
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	200003d8 	.word	0x200003d8

0800a0e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d819      	bhi.n	800a128 <USBH_UserProcess+0x48>
 800a0f4:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <USBH_UserProcess+0x1c>)
 800a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fa:	bf00      	nop
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	0800a119 	.word	0x0800a119
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a121 	.word	0x0800a121
 800a10c:	0800a111 	.word	0x0800a111
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a110:	4b09      	ldr	r3, [pc, #36]	; (800a138 <USBH_UserProcess+0x58>)
 800a112:	2203      	movs	r2, #3
 800a114:	701a      	strb	r2, [r3, #0]
  break;
 800a116:	e008      	b.n	800a12a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a118:	4b07      	ldr	r3, [pc, #28]	; (800a138 <USBH_UserProcess+0x58>)
 800a11a:	2202      	movs	r2, #2
 800a11c:	701a      	strb	r2, [r3, #0]
  break;
 800a11e:	e004      	b.n	800a12a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <USBH_UserProcess+0x58>)
 800a122:	2201      	movs	r2, #1
 800a124:	701a      	strb	r2, [r3, #0]
  break;
 800a126:	e000      	b.n	800a12a <USBH_UserProcess+0x4a>

  default:
  break;
 800a128:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a12a:	bf00      	nop
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	200007b0 	.word	0x200007b0

0800a13c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08a      	sub	sp, #40	; 0x28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a144:	f107 0314 	add.w	r3, r7, #20
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	605a      	str	r2, [r3, #4]
 800a14e:	609a      	str	r2, [r3, #8]
 800a150:	60da      	str	r2, [r3, #12]
 800a152:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a15c:	d147      	bne.n	800a1ee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a15e:	2300      	movs	r3, #0
 800a160:	613b      	str	r3, [r7, #16]
 800a162:	4b25      	ldr	r3, [pc, #148]	; (800a1f8 <HAL_HCD_MspInit+0xbc>)
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	4a24      	ldr	r2, [pc, #144]	; (800a1f8 <HAL_HCD_MspInit+0xbc>)
 800a168:	f043 0301 	orr.w	r3, r3, #1
 800a16c:	6313      	str	r3, [r2, #48]	; 0x30
 800a16e:	4b22      	ldr	r3, [pc, #136]	; (800a1f8 <HAL_HCD_MspInit+0xbc>)
 800a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a17a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a17e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a180:	2300      	movs	r3, #0
 800a182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a184:	2300      	movs	r3, #0
 800a186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a188:	f107 0314 	add.w	r3, r7, #20
 800a18c:	4619      	mov	r1, r3
 800a18e:	481b      	ldr	r0, [pc, #108]	; (800a1fc <HAL_HCD_MspInit+0xc0>)
 800a190:	f7f8 f870 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a194:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a19a:	2302      	movs	r3, #2
 800a19c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a1a6:	230a      	movs	r3, #10
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1aa:	f107 0314 	add.w	r3, r7, #20
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4812      	ldr	r0, [pc, #72]	; (800a1fc <HAL_HCD_MspInit+0xc0>)
 800a1b2:	f7f8 f85f 	bl	8002274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a1b6:	4b10      	ldr	r3, [pc, #64]	; (800a1f8 <HAL_HCD_MspInit+0xbc>)
 800a1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ba:	4a0f      	ldr	r2, [pc, #60]	; (800a1f8 <HAL_HCD_MspInit+0xbc>)
 800a1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c0:	6353      	str	r3, [r2, #52]	; 0x34
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
 800a1c6:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <HAL_HCD_MspInit+0xbc>)
 800a1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ca:	4a0b      	ldr	r2, [pc, #44]	; (800a1f8 <HAL_HCD_MspInit+0xbc>)
 800a1cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1d0:	6453      	str	r3, [r2, #68]	; 0x44
 800a1d2:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <HAL_HCD_MspInit+0xbc>)
 800a1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a1de:	2200      	movs	r2, #0
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	2043      	movs	r0, #67	; 0x43
 800a1e4:	f7f7 ff7d 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a1e8:	2043      	movs	r0, #67	; 0x43
 800a1ea:	f7f7 ff96 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	3728      	adds	r7, #40	; 0x28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	40023800 	.word	0x40023800
 800a1fc:	40020000 	.word	0x40020000

0800a200 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe ffed 	bl	80091ee <USBH_LL_IncTimer>
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff f825 	bl	800927a <USBH_LL_Connect>
}
 800a230:	bf00      	nop
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff f82e 	bl	80092a8 <USBH_LL_Disconnect>
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
 800a260:	4613      	mov	r3, r2
 800a262:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe ffdf 	bl	8009242 <USBH_LL_PortEnabled>
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe ffdf 	bl	800925e <USBH_LL_PortDisabled>
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d12a      	bne.n	800a310 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a2ba:	4a18      	ldr	r2, [pc, #96]	; (800a31c <USBH_LL_Init+0x74>)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a15      	ldr	r2, [pc, #84]	; (800a31c <USBH_LL_Init+0x74>)
 800a2c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2ca:	4b14      	ldr	r3, [pc, #80]	; (800a31c <USBH_LL_Init+0x74>)
 800a2cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a2d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a2d2:	4b12      	ldr	r3, [pc, #72]	; (800a31c <USBH_LL_Init+0x74>)
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a2d8:	4b10      	ldr	r3, [pc, #64]	; (800a31c <USBH_LL_Init+0x74>)
 800a2da:	2201      	movs	r2, #1
 800a2dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <USBH_LL_Init+0x74>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a2e4:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <USBH_LL_Init+0x74>)
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <USBH_LL_Init+0x74>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a2f0:	480a      	ldr	r0, [pc, #40]	; (800a31c <USBH_LL_Init+0x74>)
 800a2f2:	f7f8 f98c 	bl	800260e <HAL_HCD_Init>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a2fc:	f7f7 fa90 	bl	8001820 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a300:	4806      	ldr	r0, [pc, #24]	; (800a31c <USBH_LL_Init+0x74>)
 800a302:	f7f8 fd70 	bl	8002de6 <HAL_HCD_GetCurrentFrame>
 800a306:	4603      	mov	r3, r0
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7fe ff60 	bl	80091d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	200007b4 	.word	0x200007b4

0800a320 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a336:	4618      	mov	r0, r3
 800a338:	f7f8 fcdf 	bl	8002cfa <HAL_HCD_Start>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	4618      	mov	r0, r3
 800a344:	f000 f95c 	bl	800a600 <USBH_Get_USB_Status>
 800a348:	4603      	mov	r3, r0
 800a34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7f8 fce7 	bl	8002d40 <HAL_HCD_Stop>
 800a372:	4603      	mov	r3, r0
 800a374:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 f941 	bl	800a600 <USBH_Get_USB_Status>
 800a37e:	4603      	mov	r3, r0
 800a380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a382:	7bbb      	ldrb	r3, [r7, #14]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a394:	2301      	movs	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f8 fd2f 	bl	8002e02 <HAL_HCD_GetCurrentSpeed>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d00c      	beq.n	800a3c4 <USBH_LL_GetSpeed+0x38>
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d80d      	bhi.n	800a3ca <USBH_LL_GetSpeed+0x3e>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <USBH_LL_GetSpeed+0x2c>
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d003      	beq.n	800a3be <USBH_LL_GetSpeed+0x32>
 800a3b6:	e008      	b.n	800a3ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a3bc:	e008      	b.n	800a3d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c2:	e005      	b.n	800a3d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c8:	e002      	b.n	800a3d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ce:	bf00      	nop
  }
  return  speed;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7f8 fcc2 	bl	8002d7a <HAL_HCD_ResetPort>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 f8ff 	bl	800a600 <USBH_Get_USB_Status>
 800a402:	4603      	mov	r3, r0
 800a404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a406:	7bbb      	ldrb	r3, [r7, #14]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f7f8 fcc9 	bl	8002dbe <HAL_HCD_HC_GetXferCount>
 800a42c:	4603      	mov	r3, r0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a436:	b590      	push	{r4, r7, lr}
 800a438:	b089      	sub	sp, #36	; 0x24
 800a43a:	af04      	add	r7, sp, #16
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	4608      	mov	r0, r1
 800a440:	4611      	mov	r1, r2
 800a442:	461a      	mov	r2, r3
 800a444:	4603      	mov	r3, r0
 800a446:	70fb      	strb	r3, [r7, #3]
 800a448:	460b      	mov	r3, r1
 800a44a:	70bb      	strb	r3, [r7, #2]
 800a44c:	4613      	mov	r3, r2
 800a44e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a45e:	787c      	ldrb	r4, [r7, #1]
 800a460:	78ba      	ldrb	r2, [r7, #2]
 800a462:	78f9      	ldrb	r1, [r7, #3]
 800a464:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a466:	9302      	str	r3, [sp, #8]
 800a468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4623      	mov	r3, r4
 800a476:	f7f8 f92c 	bl	80026d2 <HAL_HCD_HC_Init>
 800a47a:	4603      	mov	r3, r0
 800a47c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	4618      	mov	r0, r3
 800a482:	f000 f8bd 	bl	800a600 <USBH_Get_USB_Status>
 800a486:	4603      	mov	r3, r0
 800a488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	bd90      	pop	{r4, r7, pc}

0800a494 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4ae:	78fa      	ldrb	r2, [r7, #3]
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7f8 f99c 	bl	80027f0 <HAL_HCD_HC_Halt>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f89e 	bl	800a600 <USBH_Get_USB_Status>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a4d2:	b590      	push	{r4, r7, lr}
 800a4d4:	b089      	sub	sp, #36	; 0x24
 800a4d6:	af04      	add	r7, sp, #16
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	4608      	mov	r0, r1
 800a4dc:	4611      	mov	r1, r2
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	70fb      	strb	r3, [r7, #3]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70bb      	strb	r3, [r7, #2]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a4fa:	787c      	ldrb	r4, [r7, #1]
 800a4fc:	78ba      	ldrb	r2, [r7, #2]
 800a4fe:	78f9      	ldrb	r1, [r7, #3]
 800a500:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a504:	9303      	str	r3, [sp, #12]
 800a506:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a508:	9302      	str	r3, [sp, #8]
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	4623      	mov	r3, r4
 800a516:	f7f8 f98f 	bl	8002838 <HAL_HCD_HC_SubmitRequest>
 800a51a:	4603      	mov	r3, r0
 800a51c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
 800a520:	4618      	mov	r0, r3
 800a522:	f000 f86d 	bl	800a600 <USBH_Get_USB_Status>
 800a526:	4603      	mov	r3, r0
 800a528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	bd90      	pop	{r4, r7, pc}

0800a534 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a546:	78fa      	ldrb	r2, [r7, #3]
 800a548:	4611      	mov	r1, r2
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f8 fc23 	bl	8002d96 <HAL_HCD_HC_GetURBState>
 800a550:	4603      	mov	r3, r0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b082      	sub	sp, #8
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	460b      	mov	r3, r1
 800a564:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d103      	bne.n	800a578 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	4618      	mov	r0, r3
 800a574:	f000 f870 	bl	800a658 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a578:	20c8      	movs	r0, #200	; 0xc8
 800a57a:	f7f7 fcb3 	bl	8001ee4 <HAL_Delay>
  return USBH_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	460b      	mov	r3, r1
 800a592:	70fb      	strb	r3, [r7, #3]
 800a594:	4613      	mov	r3, r2
 800a596:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a59e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	212c      	movs	r1, #44	; 0x2c
 800a5a6:	fb01 f303 	mul.w	r3, r1, r3
 800a5aa:	4413      	add	r3, r2
 800a5ac:	333b      	adds	r3, #59	; 0x3b
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d009      	beq.n	800a5c8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	212c      	movs	r1, #44	; 0x2c
 800a5ba:	fb01 f303 	mul.w	r3, r1, r3
 800a5be:	4413      	add	r3, r2
 800a5c0:	3354      	adds	r3, #84	; 0x54
 800a5c2:	78ba      	ldrb	r2, [r7, #2]
 800a5c4:	701a      	strb	r2, [r3, #0]
 800a5c6:	e008      	b.n	800a5da <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	212c      	movs	r1, #44	; 0x2c
 800a5ce:	fb01 f303 	mul.w	r3, r1, r3
 800a5d2:	4413      	add	r3, r2
 800a5d4:	3355      	adds	r3, #85	; 0x55
 800a5d6:	78ba      	ldrb	r2, [r7, #2]
 800a5d8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7f7 fc77 	bl	8001ee4 <HAL_Delay>
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a60e:	79fb      	ldrb	r3, [r7, #7]
 800a610:	2b03      	cmp	r3, #3
 800a612:	d817      	bhi.n	800a644 <USBH_Get_USB_Status+0x44>
 800a614:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <USBH_Get_USB_Status+0x1c>)
 800a616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61a:	bf00      	nop
 800a61c:	0800a62d 	.word	0x0800a62d
 800a620:	0800a633 	.word	0x0800a633
 800a624:	0800a639 	.word	0x0800a639
 800a628:	0800a63f 	.word	0x0800a63f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
    break;
 800a630:	e00b      	b.n	800a64a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a632:	2302      	movs	r3, #2
 800a634:	73fb      	strb	r3, [r7, #15]
    break;
 800a636:	e008      	b.n	800a64a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a638:	2301      	movs	r3, #1
 800a63a:	73fb      	strb	r3, [r7, #15]
    break;
 800a63c:	e005      	b.n	800a64a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a63e:	2302      	movs	r3, #2
 800a640:	73fb      	strb	r3, [r7, #15]
    break;
 800a642:	e002      	b.n	800a64a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a644:	2302      	movs	r3, #2
 800a646:	73fb      	strb	r3, [r7, #15]
    break;
 800a648:	bf00      	nop
  }
  return usb_status;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a662:	79fb      	ldrb	r3, [r7, #7]
 800a664:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d102      	bne.n	800a672 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
 800a670:	e001      	b.n	800a676 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a672:	2301      	movs	r3, #1
 800a674:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	461a      	mov	r2, r3
 800a67a:	2101      	movs	r1, #1
 800a67c:	4803      	ldr	r0, [pc, #12]	; (800a68c <MX_DriverVbusFS+0x34>)
 800a67e:	f7f7 ffad 	bl	80025dc <HAL_GPIO_WritePin>
}
 800a682:	bf00      	nop
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	40020800 	.word	0x40020800

0800a690 <__errno>:
 800a690:	4b01      	ldr	r3, [pc, #4]	; (800a698 <__errno+0x8>)
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	2000002c 	.word	0x2000002c

0800a69c <__libc_init_array>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	4d0d      	ldr	r5, [pc, #52]	; (800a6d4 <__libc_init_array+0x38>)
 800a6a0:	4c0d      	ldr	r4, [pc, #52]	; (800a6d8 <__libc_init_array+0x3c>)
 800a6a2:	1b64      	subs	r4, r4, r5
 800a6a4:	10a4      	asrs	r4, r4, #2
 800a6a6:	2600      	movs	r6, #0
 800a6a8:	42a6      	cmp	r6, r4
 800a6aa:	d109      	bne.n	800a6c0 <__libc_init_array+0x24>
 800a6ac:	4d0b      	ldr	r5, [pc, #44]	; (800a6dc <__libc_init_array+0x40>)
 800a6ae:	4c0c      	ldr	r4, [pc, #48]	; (800a6e0 <__libc_init_array+0x44>)
 800a6b0:	f002 ff1a 	bl	800d4e8 <_init>
 800a6b4:	1b64      	subs	r4, r4, r5
 800a6b6:	10a4      	asrs	r4, r4, #2
 800a6b8:	2600      	movs	r6, #0
 800a6ba:	42a6      	cmp	r6, r4
 800a6bc:	d105      	bne.n	800a6ca <__libc_init_array+0x2e>
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6c4:	4798      	blx	r3
 800a6c6:	3601      	adds	r6, #1
 800a6c8:	e7ee      	b.n	800a6a8 <__libc_init_array+0xc>
 800a6ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ce:	4798      	blx	r3
 800a6d0:	3601      	adds	r6, #1
 800a6d2:	e7f2      	b.n	800a6ba <__libc_init_array+0x1e>
 800a6d4:	0800d90c 	.word	0x0800d90c
 800a6d8:	0800d90c 	.word	0x0800d90c
 800a6dc:	0800d90c 	.word	0x0800d90c
 800a6e0:	0800d910 	.word	0x0800d910

0800a6e4 <malloc>:
 800a6e4:	4b02      	ldr	r3, [pc, #8]	; (800a6f0 <malloc+0xc>)
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f000 b87f 	b.w	800a7ec <_malloc_r>
 800a6ee:	bf00      	nop
 800a6f0:	2000002c 	.word	0x2000002c

0800a6f4 <free>:
 800a6f4:	4b02      	ldr	r3, [pc, #8]	; (800a700 <free+0xc>)
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	f000 b80b 	b.w	800a714 <_free_r>
 800a6fe:	bf00      	nop
 800a700:	2000002c 	.word	0x2000002c

0800a704 <memset>:
 800a704:	4402      	add	r2, r0
 800a706:	4603      	mov	r3, r0
 800a708:	4293      	cmp	r3, r2
 800a70a:	d100      	bne.n	800a70e <memset+0xa>
 800a70c:	4770      	bx	lr
 800a70e:	f803 1b01 	strb.w	r1, [r3], #1
 800a712:	e7f9      	b.n	800a708 <memset+0x4>

0800a714 <_free_r>:
 800a714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a716:	2900      	cmp	r1, #0
 800a718:	d044      	beq.n	800a7a4 <_free_r+0x90>
 800a71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71e:	9001      	str	r0, [sp, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f1a1 0404 	sub.w	r4, r1, #4
 800a726:	bfb8      	it	lt
 800a728:	18e4      	addlt	r4, r4, r3
 800a72a:	f001 fc09 	bl	800bf40 <__malloc_lock>
 800a72e:	4a1e      	ldr	r2, [pc, #120]	; (800a7a8 <_free_r+0x94>)
 800a730:	9801      	ldr	r0, [sp, #4]
 800a732:	6813      	ldr	r3, [r2, #0]
 800a734:	b933      	cbnz	r3, 800a744 <_free_r+0x30>
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	6014      	str	r4, [r2, #0]
 800a73a:	b003      	add	sp, #12
 800a73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a740:	f001 bc04 	b.w	800bf4c <__malloc_unlock>
 800a744:	42a3      	cmp	r3, r4
 800a746:	d908      	bls.n	800a75a <_free_r+0x46>
 800a748:	6825      	ldr	r5, [r4, #0]
 800a74a:	1961      	adds	r1, r4, r5
 800a74c:	428b      	cmp	r3, r1
 800a74e:	bf01      	itttt	eq
 800a750:	6819      	ldreq	r1, [r3, #0]
 800a752:	685b      	ldreq	r3, [r3, #4]
 800a754:	1949      	addeq	r1, r1, r5
 800a756:	6021      	streq	r1, [r4, #0]
 800a758:	e7ed      	b.n	800a736 <_free_r+0x22>
 800a75a:	461a      	mov	r2, r3
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	b10b      	cbz	r3, 800a764 <_free_r+0x50>
 800a760:	42a3      	cmp	r3, r4
 800a762:	d9fa      	bls.n	800a75a <_free_r+0x46>
 800a764:	6811      	ldr	r1, [r2, #0]
 800a766:	1855      	adds	r5, r2, r1
 800a768:	42a5      	cmp	r5, r4
 800a76a:	d10b      	bne.n	800a784 <_free_r+0x70>
 800a76c:	6824      	ldr	r4, [r4, #0]
 800a76e:	4421      	add	r1, r4
 800a770:	1854      	adds	r4, r2, r1
 800a772:	42a3      	cmp	r3, r4
 800a774:	6011      	str	r1, [r2, #0]
 800a776:	d1e0      	bne.n	800a73a <_free_r+0x26>
 800a778:	681c      	ldr	r4, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	6053      	str	r3, [r2, #4]
 800a77e:	4421      	add	r1, r4
 800a780:	6011      	str	r1, [r2, #0]
 800a782:	e7da      	b.n	800a73a <_free_r+0x26>
 800a784:	d902      	bls.n	800a78c <_free_r+0x78>
 800a786:	230c      	movs	r3, #12
 800a788:	6003      	str	r3, [r0, #0]
 800a78a:	e7d6      	b.n	800a73a <_free_r+0x26>
 800a78c:	6825      	ldr	r5, [r4, #0]
 800a78e:	1961      	adds	r1, r4, r5
 800a790:	428b      	cmp	r3, r1
 800a792:	bf04      	itt	eq
 800a794:	6819      	ldreq	r1, [r3, #0]
 800a796:	685b      	ldreq	r3, [r3, #4]
 800a798:	6063      	str	r3, [r4, #4]
 800a79a:	bf04      	itt	eq
 800a79c:	1949      	addeq	r1, r1, r5
 800a79e:	6021      	streq	r1, [r4, #0]
 800a7a0:	6054      	str	r4, [r2, #4]
 800a7a2:	e7ca      	b.n	800a73a <_free_r+0x26>
 800a7a4:	b003      	add	sp, #12
 800a7a6:	bd30      	pop	{r4, r5, pc}
 800a7a8:	20000ab8 	.word	0x20000ab8

0800a7ac <sbrk_aligned>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	4e0e      	ldr	r6, [pc, #56]	; (800a7e8 <sbrk_aligned+0x3c>)
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	6831      	ldr	r1, [r6, #0]
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	b911      	cbnz	r1, 800a7be <sbrk_aligned+0x12>
 800a7b8:	f000 fcf6 	bl	800b1a8 <_sbrk_r>
 800a7bc:	6030      	str	r0, [r6, #0]
 800a7be:	4621      	mov	r1, r4
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f000 fcf1 	bl	800b1a8 <_sbrk_r>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d00a      	beq.n	800a7e0 <sbrk_aligned+0x34>
 800a7ca:	1cc4      	adds	r4, r0, #3
 800a7cc:	f024 0403 	bic.w	r4, r4, #3
 800a7d0:	42a0      	cmp	r0, r4
 800a7d2:	d007      	beq.n	800a7e4 <sbrk_aligned+0x38>
 800a7d4:	1a21      	subs	r1, r4, r0
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f000 fce6 	bl	800b1a8 <_sbrk_r>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d101      	bne.n	800a7e4 <sbrk_aligned+0x38>
 800a7e0:	f04f 34ff 	mov.w	r4, #4294967295
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
 800a7e8:	20000abc 	.word	0x20000abc

0800a7ec <_malloc_r>:
 800a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f0:	1ccd      	adds	r5, r1, #3
 800a7f2:	f025 0503 	bic.w	r5, r5, #3
 800a7f6:	3508      	adds	r5, #8
 800a7f8:	2d0c      	cmp	r5, #12
 800a7fa:	bf38      	it	cc
 800a7fc:	250c      	movcc	r5, #12
 800a7fe:	2d00      	cmp	r5, #0
 800a800:	4607      	mov	r7, r0
 800a802:	db01      	blt.n	800a808 <_malloc_r+0x1c>
 800a804:	42a9      	cmp	r1, r5
 800a806:	d905      	bls.n	800a814 <_malloc_r+0x28>
 800a808:	230c      	movs	r3, #12
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	2600      	movs	r6, #0
 800a80e:	4630      	mov	r0, r6
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	4e2e      	ldr	r6, [pc, #184]	; (800a8d0 <_malloc_r+0xe4>)
 800a816:	f001 fb93 	bl	800bf40 <__malloc_lock>
 800a81a:	6833      	ldr	r3, [r6, #0]
 800a81c:	461c      	mov	r4, r3
 800a81e:	bb34      	cbnz	r4, 800a86e <_malloc_r+0x82>
 800a820:	4629      	mov	r1, r5
 800a822:	4638      	mov	r0, r7
 800a824:	f7ff ffc2 	bl	800a7ac <sbrk_aligned>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	4604      	mov	r4, r0
 800a82c:	d14d      	bne.n	800a8ca <_malloc_r+0xde>
 800a82e:	6834      	ldr	r4, [r6, #0]
 800a830:	4626      	mov	r6, r4
 800a832:	2e00      	cmp	r6, #0
 800a834:	d140      	bne.n	800a8b8 <_malloc_r+0xcc>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	4631      	mov	r1, r6
 800a83a:	4638      	mov	r0, r7
 800a83c:	eb04 0803 	add.w	r8, r4, r3
 800a840:	f000 fcb2 	bl	800b1a8 <_sbrk_r>
 800a844:	4580      	cmp	r8, r0
 800a846:	d13a      	bne.n	800a8be <_malloc_r+0xd2>
 800a848:	6821      	ldr	r1, [r4, #0]
 800a84a:	3503      	adds	r5, #3
 800a84c:	1a6d      	subs	r5, r5, r1
 800a84e:	f025 0503 	bic.w	r5, r5, #3
 800a852:	3508      	adds	r5, #8
 800a854:	2d0c      	cmp	r5, #12
 800a856:	bf38      	it	cc
 800a858:	250c      	movcc	r5, #12
 800a85a:	4629      	mov	r1, r5
 800a85c:	4638      	mov	r0, r7
 800a85e:	f7ff ffa5 	bl	800a7ac <sbrk_aligned>
 800a862:	3001      	adds	r0, #1
 800a864:	d02b      	beq.n	800a8be <_malloc_r+0xd2>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	442b      	add	r3, r5
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	e00e      	b.n	800a88c <_malloc_r+0xa0>
 800a86e:	6822      	ldr	r2, [r4, #0]
 800a870:	1b52      	subs	r2, r2, r5
 800a872:	d41e      	bmi.n	800a8b2 <_malloc_r+0xc6>
 800a874:	2a0b      	cmp	r2, #11
 800a876:	d916      	bls.n	800a8a6 <_malloc_r+0xba>
 800a878:	1961      	adds	r1, r4, r5
 800a87a:	42a3      	cmp	r3, r4
 800a87c:	6025      	str	r5, [r4, #0]
 800a87e:	bf18      	it	ne
 800a880:	6059      	strne	r1, [r3, #4]
 800a882:	6863      	ldr	r3, [r4, #4]
 800a884:	bf08      	it	eq
 800a886:	6031      	streq	r1, [r6, #0]
 800a888:	5162      	str	r2, [r4, r5]
 800a88a:	604b      	str	r3, [r1, #4]
 800a88c:	4638      	mov	r0, r7
 800a88e:	f104 060b 	add.w	r6, r4, #11
 800a892:	f001 fb5b 	bl	800bf4c <__malloc_unlock>
 800a896:	f026 0607 	bic.w	r6, r6, #7
 800a89a:	1d23      	adds	r3, r4, #4
 800a89c:	1af2      	subs	r2, r6, r3
 800a89e:	d0b6      	beq.n	800a80e <_malloc_r+0x22>
 800a8a0:	1b9b      	subs	r3, r3, r6
 800a8a2:	50a3      	str	r3, [r4, r2]
 800a8a4:	e7b3      	b.n	800a80e <_malloc_r+0x22>
 800a8a6:	6862      	ldr	r2, [r4, #4]
 800a8a8:	42a3      	cmp	r3, r4
 800a8aa:	bf0c      	ite	eq
 800a8ac:	6032      	streq	r2, [r6, #0]
 800a8ae:	605a      	strne	r2, [r3, #4]
 800a8b0:	e7ec      	b.n	800a88c <_malloc_r+0xa0>
 800a8b2:	4623      	mov	r3, r4
 800a8b4:	6864      	ldr	r4, [r4, #4]
 800a8b6:	e7b2      	b.n	800a81e <_malloc_r+0x32>
 800a8b8:	4634      	mov	r4, r6
 800a8ba:	6876      	ldr	r6, [r6, #4]
 800a8bc:	e7b9      	b.n	800a832 <_malloc_r+0x46>
 800a8be:	230c      	movs	r3, #12
 800a8c0:	603b      	str	r3, [r7, #0]
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f001 fb42 	bl	800bf4c <__malloc_unlock>
 800a8c8:	e7a1      	b.n	800a80e <_malloc_r+0x22>
 800a8ca:	6025      	str	r5, [r4, #0]
 800a8cc:	e7de      	b.n	800a88c <_malloc_r+0xa0>
 800a8ce:	bf00      	nop
 800a8d0:	20000ab8 	.word	0x20000ab8

0800a8d4 <__cvt>:
 800a8d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d8:	ec55 4b10 	vmov	r4, r5, d0
 800a8dc:	2d00      	cmp	r5, #0
 800a8de:	460e      	mov	r6, r1
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	462b      	mov	r3, r5
 800a8e4:	bfbb      	ittet	lt
 800a8e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8ea:	461d      	movlt	r5, r3
 800a8ec:	2300      	movge	r3, #0
 800a8ee:	232d      	movlt	r3, #45	; 0x2d
 800a8f0:	700b      	strb	r3, [r1, #0]
 800a8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8f8:	4691      	mov	r9, r2
 800a8fa:	f023 0820 	bic.w	r8, r3, #32
 800a8fe:	bfbc      	itt	lt
 800a900:	4622      	movlt	r2, r4
 800a902:	4614      	movlt	r4, r2
 800a904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a908:	d005      	beq.n	800a916 <__cvt+0x42>
 800a90a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a90e:	d100      	bne.n	800a912 <__cvt+0x3e>
 800a910:	3601      	adds	r6, #1
 800a912:	2102      	movs	r1, #2
 800a914:	e000      	b.n	800a918 <__cvt+0x44>
 800a916:	2103      	movs	r1, #3
 800a918:	ab03      	add	r3, sp, #12
 800a91a:	9301      	str	r3, [sp, #4]
 800a91c:	ab02      	add	r3, sp, #8
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	ec45 4b10 	vmov	d0, r4, r5
 800a924:	4653      	mov	r3, sl
 800a926:	4632      	mov	r2, r6
 800a928:	f000 fd0a 	bl	800b340 <_dtoa_r>
 800a92c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a930:	4607      	mov	r7, r0
 800a932:	d102      	bne.n	800a93a <__cvt+0x66>
 800a934:	f019 0f01 	tst.w	r9, #1
 800a938:	d022      	beq.n	800a980 <__cvt+0xac>
 800a93a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a93e:	eb07 0906 	add.w	r9, r7, r6
 800a942:	d110      	bne.n	800a966 <__cvt+0x92>
 800a944:	783b      	ldrb	r3, [r7, #0]
 800a946:	2b30      	cmp	r3, #48	; 0x30
 800a948:	d10a      	bne.n	800a960 <__cvt+0x8c>
 800a94a:	2200      	movs	r2, #0
 800a94c:	2300      	movs	r3, #0
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	f7f6 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a956:	b918      	cbnz	r0, 800a960 <__cvt+0x8c>
 800a958:	f1c6 0601 	rsb	r6, r6, #1
 800a95c:	f8ca 6000 	str.w	r6, [sl]
 800a960:	f8da 3000 	ldr.w	r3, [sl]
 800a964:	4499      	add	r9, r3
 800a966:	2200      	movs	r2, #0
 800a968:	2300      	movs	r3, #0
 800a96a:	4620      	mov	r0, r4
 800a96c:	4629      	mov	r1, r5
 800a96e:	f7f6 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800a972:	b108      	cbz	r0, 800a978 <__cvt+0xa4>
 800a974:	f8cd 900c 	str.w	r9, [sp, #12]
 800a978:	2230      	movs	r2, #48	; 0x30
 800a97a:	9b03      	ldr	r3, [sp, #12]
 800a97c:	454b      	cmp	r3, r9
 800a97e:	d307      	bcc.n	800a990 <__cvt+0xbc>
 800a980:	9b03      	ldr	r3, [sp, #12]
 800a982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a984:	1bdb      	subs	r3, r3, r7
 800a986:	4638      	mov	r0, r7
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	b004      	add	sp, #16
 800a98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a990:	1c59      	adds	r1, r3, #1
 800a992:	9103      	str	r1, [sp, #12]
 800a994:	701a      	strb	r2, [r3, #0]
 800a996:	e7f0      	b.n	800a97a <__cvt+0xa6>

0800a998 <__exponent>:
 800a998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a99a:	4603      	mov	r3, r0
 800a99c:	2900      	cmp	r1, #0
 800a99e:	bfb8      	it	lt
 800a9a0:	4249      	neglt	r1, r1
 800a9a2:	f803 2b02 	strb.w	r2, [r3], #2
 800a9a6:	bfb4      	ite	lt
 800a9a8:	222d      	movlt	r2, #45	; 0x2d
 800a9aa:	222b      	movge	r2, #43	; 0x2b
 800a9ac:	2909      	cmp	r1, #9
 800a9ae:	7042      	strb	r2, [r0, #1]
 800a9b0:	dd2a      	ble.n	800aa08 <__exponent+0x70>
 800a9b2:	f10d 0407 	add.w	r4, sp, #7
 800a9b6:	46a4      	mov	ip, r4
 800a9b8:	270a      	movs	r7, #10
 800a9ba:	46a6      	mov	lr, r4
 800a9bc:	460a      	mov	r2, r1
 800a9be:	fb91 f6f7 	sdiv	r6, r1, r7
 800a9c2:	fb07 1516 	mls	r5, r7, r6, r1
 800a9c6:	3530      	adds	r5, #48	; 0x30
 800a9c8:	2a63      	cmp	r2, #99	; 0x63
 800a9ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	dcf1      	bgt.n	800a9ba <__exponent+0x22>
 800a9d6:	3130      	adds	r1, #48	; 0x30
 800a9d8:	f1ae 0502 	sub.w	r5, lr, #2
 800a9dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9e0:	1c44      	adds	r4, r0, #1
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	4561      	cmp	r1, ip
 800a9e6:	d30a      	bcc.n	800a9fe <__exponent+0x66>
 800a9e8:	f10d 0209 	add.w	r2, sp, #9
 800a9ec:	eba2 020e 	sub.w	r2, r2, lr
 800a9f0:	4565      	cmp	r5, ip
 800a9f2:	bf88      	it	hi
 800a9f4:	2200      	movhi	r2, #0
 800a9f6:	4413      	add	r3, r2
 800a9f8:	1a18      	subs	r0, r3, r0
 800a9fa:	b003      	add	sp, #12
 800a9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa02:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aa06:	e7ed      	b.n	800a9e4 <__exponent+0x4c>
 800aa08:	2330      	movs	r3, #48	; 0x30
 800aa0a:	3130      	adds	r1, #48	; 0x30
 800aa0c:	7083      	strb	r3, [r0, #2]
 800aa0e:	70c1      	strb	r1, [r0, #3]
 800aa10:	1d03      	adds	r3, r0, #4
 800aa12:	e7f1      	b.n	800a9f8 <__exponent+0x60>

0800aa14 <_printf_float>:
 800aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	ed2d 8b02 	vpush	{d8}
 800aa1c:	b08d      	sub	sp, #52	; 0x34
 800aa1e:	460c      	mov	r4, r1
 800aa20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa24:	4616      	mov	r6, r2
 800aa26:	461f      	mov	r7, r3
 800aa28:	4605      	mov	r5, r0
 800aa2a:	f001 fa77 	bl	800bf1c <_localeconv_r>
 800aa2e:	f8d0 a000 	ldr.w	sl, [r0]
 800aa32:	4650      	mov	r0, sl
 800aa34:	f7f5 fbcc 	bl	80001d0 <strlen>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	9305      	str	r3, [sp, #20]
 800aa40:	f8d8 3000 	ldr.w	r3, [r8]
 800aa44:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa48:	3307      	adds	r3, #7
 800aa4a:	f023 0307 	bic.w	r3, r3, #7
 800aa4e:	f103 0208 	add.w	r2, r3, #8
 800aa52:	f8c8 2000 	str.w	r2, [r8]
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa66:	9307      	str	r3, [sp, #28]
 800aa68:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa6c:	ee08 0a10 	vmov	s16, r0
 800aa70:	4b9f      	ldr	r3, [pc, #636]	; (800acf0 <_printf_float+0x2dc>)
 800aa72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa76:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7a:	f7f6 f857 	bl	8000b2c <__aeabi_dcmpun>
 800aa7e:	bb88      	cbnz	r0, 800aae4 <_printf_float+0xd0>
 800aa80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa84:	4b9a      	ldr	r3, [pc, #616]	; (800acf0 <_printf_float+0x2dc>)
 800aa86:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8a:	f7f6 f831 	bl	8000af0 <__aeabi_dcmple>
 800aa8e:	bb48      	cbnz	r0, 800aae4 <_printf_float+0xd0>
 800aa90:	2200      	movs	r2, #0
 800aa92:	2300      	movs	r3, #0
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f6 f820 	bl	8000adc <__aeabi_dcmplt>
 800aa9c:	b110      	cbz	r0, 800aaa4 <_printf_float+0x90>
 800aa9e:	232d      	movs	r3, #45	; 0x2d
 800aaa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa4:	4b93      	ldr	r3, [pc, #588]	; (800acf4 <_printf_float+0x2e0>)
 800aaa6:	4894      	ldr	r0, [pc, #592]	; (800acf8 <_printf_float+0x2e4>)
 800aaa8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aaac:	bf94      	ite	ls
 800aaae:	4698      	movls	r8, r3
 800aab0:	4680      	movhi	r8, r0
 800aab2:	2303      	movs	r3, #3
 800aab4:	6123      	str	r3, [r4, #16]
 800aab6:	9b05      	ldr	r3, [sp, #20]
 800aab8:	f023 0204 	bic.w	r2, r3, #4
 800aabc:	6022      	str	r2, [r4, #0]
 800aabe:	f04f 0900 	mov.w	r9, #0
 800aac2:	9700      	str	r7, [sp, #0]
 800aac4:	4633      	mov	r3, r6
 800aac6:	aa0b      	add	r2, sp, #44	; 0x2c
 800aac8:	4621      	mov	r1, r4
 800aaca:	4628      	mov	r0, r5
 800aacc:	f000 f9d8 	bl	800ae80 <_printf_common>
 800aad0:	3001      	adds	r0, #1
 800aad2:	f040 8090 	bne.w	800abf6 <_printf_float+0x1e2>
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	b00d      	add	sp, #52	; 0x34
 800aadc:	ecbd 8b02 	vpop	{d8}
 800aae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae4:	4642      	mov	r2, r8
 800aae6:	464b      	mov	r3, r9
 800aae8:	4640      	mov	r0, r8
 800aaea:	4649      	mov	r1, r9
 800aaec:	f7f6 f81e 	bl	8000b2c <__aeabi_dcmpun>
 800aaf0:	b140      	cbz	r0, 800ab04 <_printf_float+0xf0>
 800aaf2:	464b      	mov	r3, r9
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfbc      	itt	lt
 800aaf8:	232d      	movlt	r3, #45	; 0x2d
 800aafa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aafe:	487f      	ldr	r0, [pc, #508]	; (800acfc <_printf_float+0x2e8>)
 800ab00:	4b7f      	ldr	r3, [pc, #508]	; (800ad00 <_printf_float+0x2ec>)
 800ab02:	e7d1      	b.n	800aaa8 <_printf_float+0x94>
 800ab04:	6863      	ldr	r3, [r4, #4]
 800ab06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab0a:	9206      	str	r2, [sp, #24]
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	d13f      	bne.n	800ab90 <_printf_float+0x17c>
 800ab10:	2306      	movs	r3, #6
 800ab12:	6063      	str	r3, [r4, #4]
 800ab14:	9b05      	ldr	r3, [sp, #20]
 800ab16:	6861      	ldr	r1, [r4, #4]
 800ab18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	9303      	str	r3, [sp, #12]
 800ab20:	ab0a      	add	r3, sp, #40	; 0x28
 800ab22:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ab26:	ab09      	add	r3, sp, #36	; 0x24
 800ab28:	ec49 8b10 	vmov	d0, r8, r9
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	6022      	str	r2, [r4, #0]
 800ab30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab34:	4628      	mov	r0, r5
 800ab36:	f7ff fecd 	bl	800a8d4 <__cvt>
 800ab3a:	9b06      	ldr	r3, [sp, #24]
 800ab3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab3e:	2b47      	cmp	r3, #71	; 0x47
 800ab40:	4680      	mov	r8, r0
 800ab42:	d108      	bne.n	800ab56 <_printf_float+0x142>
 800ab44:	1cc8      	adds	r0, r1, #3
 800ab46:	db02      	blt.n	800ab4e <_printf_float+0x13a>
 800ab48:	6863      	ldr	r3, [r4, #4]
 800ab4a:	4299      	cmp	r1, r3
 800ab4c:	dd41      	ble.n	800abd2 <_printf_float+0x1be>
 800ab4e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab52:	fa5f fb8b 	uxtb.w	fp, fp
 800ab56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab5a:	d820      	bhi.n	800ab9e <_printf_float+0x18a>
 800ab5c:	3901      	subs	r1, #1
 800ab5e:	465a      	mov	r2, fp
 800ab60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab64:	9109      	str	r1, [sp, #36]	; 0x24
 800ab66:	f7ff ff17 	bl	800a998 <__exponent>
 800ab6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab6c:	1813      	adds	r3, r2, r0
 800ab6e:	2a01      	cmp	r2, #1
 800ab70:	4681      	mov	r9, r0
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	dc02      	bgt.n	800ab7c <_printf_float+0x168>
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	07d2      	lsls	r2, r2, #31
 800ab7a:	d501      	bpl.n	800ab80 <_printf_float+0x16c>
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d09c      	beq.n	800aac2 <_printf_float+0xae>
 800ab88:	232d      	movs	r3, #45	; 0x2d
 800ab8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab8e:	e798      	b.n	800aac2 <_printf_float+0xae>
 800ab90:	9a06      	ldr	r2, [sp, #24]
 800ab92:	2a47      	cmp	r2, #71	; 0x47
 800ab94:	d1be      	bne.n	800ab14 <_printf_float+0x100>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1bc      	bne.n	800ab14 <_printf_float+0x100>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e7b9      	b.n	800ab12 <_printf_float+0xfe>
 800ab9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aba2:	d118      	bne.n	800abd6 <_printf_float+0x1c2>
 800aba4:	2900      	cmp	r1, #0
 800aba6:	6863      	ldr	r3, [r4, #4]
 800aba8:	dd0b      	ble.n	800abc2 <_printf_float+0x1ae>
 800abaa:	6121      	str	r1, [r4, #16]
 800abac:	b913      	cbnz	r3, 800abb4 <_printf_float+0x1a0>
 800abae:	6822      	ldr	r2, [r4, #0]
 800abb0:	07d0      	lsls	r0, r2, #31
 800abb2:	d502      	bpl.n	800abba <_printf_float+0x1a6>
 800abb4:	3301      	adds	r3, #1
 800abb6:	440b      	add	r3, r1
 800abb8:	6123      	str	r3, [r4, #16]
 800abba:	65a1      	str	r1, [r4, #88]	; 0x58
 800abbc:	f04f 0900 	mov.w	r9, #0
 800abc0:	e7de      	b.n	800ab80 <_printf_float+0x16c>
 800abc2:	b913      	cbnz	r3, 800abca <_printf_float+0x1b6>
 800abc4:	6822      	ldr	r2, [r4, #0]
 800abc6:	07d2      	lsls	r2, r2, #31
 800abc8:	d501      	bpl.n	800abce <_printf_float+0x1ba>
 800abca:	3302      	adds	r3, #2
 800abcc:	e7f4      	b.n	800abb8 <_printf_float+0x1a4>
 800abce:	2301      	movs	r3, #1
 800abd0:	e7f2      	b.n	800abb8 <_printf_float+0x1a4>
 800abd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800abd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd8:	4299      	cmp	r1, r3
 800abda:	db05      	blt.n	800abe8 <_printf_float+0x1d4>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	6121      	str	r1, [r4, #16]
 800abe0:	07d8      	lsls	r0, r3, #31
 800abe2:	d5ea      	bpl.n	800abba <_printf_float+0x1a6>
 800abe4:	1c4b      	adds	r3, r1, #1
 800abe6:	e7e7      	b.n	800abb8 <_printf_float+0x1a4>
 800abe8:	2900      	cmp	r1, #0
 800abea:	bfd4      	ite	le
 800abec:	f1c1 0202 	rsble	r2, r1, #2
 800abf0:	2201      	movgt	r2, #1
 800abf2:	4413      	add	r3, r2
 800abf4:	e7e0      	b.n	800abb8 <_printf_float+0x1a4>
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	055a      	lsls	r2, r3, #21
 800abfa:	d407      	bmi.n	800ac0c <_printf_float+0x1f8>
 800abfc:	6923      	ldr	r3, [r4, #16]
 800abfe:	4642      	mov	r2, r8
 800ac00:	4631      	mov	r1, r6
 800ac02:	4628      	mov	r0, r5
 800ac04:	47b8      	blx	r7
 800ac06:	3001      	adds	r0, #1
 800ac08:	d12c      	bne.n	800ac64 <_printf_float+0x250>
 800ac0a:	e764      	b.n	800aad6 <_printf_float+0xc2>
 800ac0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac10:	f240 80e0 	bls.w	800add4 <_printf_float+0x3c0>
 800ac14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac18:	2200      	movs	r2, #0
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f7f5 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d034      	beq.n	800ac8e <_printf_float+0x27a>
 800ac24:	4a37      	ldr	r2, [pc, #220]	; (800ad04 <_printf_float+0x2f0>)
 800ac26:	2301      	movs	r3, #1
 800ac28:	4631      	mov	r1, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b8      	blx	r7
 800ac2e:	3001      	adds	r0, #1
 800ac30:	f43f af51 	beq.w	800aad6 <_printf_float+0xc2>
 800ac34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	db02      	blt.n	800ac42 <_printf_float+0x22e>
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	07d8      	lsls	r0, r3, #31
 800ac40:	d510      	bpl.n	800ac64 <_printf_float+0x250>
 800ac42:	ee18 3a10 	vmov	r3, s16
 800ac46:	4652      	mov	r2, sl
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	47b8      	blx	r7
 800ac4e:	3001      	adds	r0, #1
 800ac50:	f43f af41 	beq.w	800aad6 <_printf_float+0xc2>
 800ac54:	f04f 0800 	mov.w	r8, #0
 800ac58:	f104 091a 	add.w	r9, r4, #26
 800ac5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	4543      	cmp	r3, r8
 800ac62:	dc09      	bgt.n	800ac78 <_printf_float+0x264>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	079b      	lsls	r3, r3, #30
 800ac68:	f100 8105 	bmi.w	800ae76 <_printf_float+0x462>
 800ac6c:	68e0      	ldr	r0, [r4, #12]
 800ac6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac70:	4298      	cmp	r0, r3
 800ac72:	bfb8      	it	lt
 800ac74:	4618      	movlt	r0, r3
 800ac76:	e730      	b.n	800aada <_printf_float+0xc6>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	464a      	mov	r2, r9
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4628      	mov	r0, r5
 800ac80:	47b8      	blx	r7
 800ac82:	3001      	adds	r0, #1
 800ac84:	f43f af27 	beq.w	800aad6 <_printf_float+0xc2>
 800ac88:	f108 0801 	add.w	r8, r8, #1
 800ac8c:	e7e6      	b.n	800ac5c <_printf_float+0x248>
 800ac8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dc39      	bgt.n	800ad08 <_printf_float+0x2f4>
 800ac94:	4a1b      	ldr	r2, [pc, #108]	; (800ad04 <_printf_float+0x2f0>)
 800ac96:	2301      	movs	r3, #1
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	f43f af19 	beq.w	800aad6 <_printf_float+0xc2>
 800aca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aca8:	4313      	orrs	r3, r2
 800acaa:	d102      	bne.n	800acb2 <_printf_float+0x29e>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	07d9      	lsls	r1, r3, #31
 800acb0:	d5d8      	bpl.n	800ac64 <_printf_float+0x250>
 800acb2:	ee18 3a10 	vmov	r3, s16
 800acb6:	4652      	mov	r2, sl
 800acb8:	4631      	mov	r1, r6
 800acba:	4628      	mov	r0, r5
 800acbc:	47b8      	blx	r7
 800acbe:	3001      	adds	r0, #1
 800acc0:	f43f af09 	beq.w	800aad6 <_printf_float+0xc2>
 800acc4:	f04f 0900 	mov.w	r9, #0
 800acc8:	f104 0a1a 	add.w	sl, r4, #26
 800accc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acce:	425b      	negs	r3, r3
 800acd0:	454b      	cmp	r3, r9
 800acd2:	dc01      	bgt.n	800acd8 <_printf_float+0x2c4>
 800acd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acd6:	e792      	b.n	800abfe <_printf_float+0x1ea>
 800acd8:	2301      	movs	r3, #1
 800acda:	4652      	mov	r2, sl
 800acdc:	4631      	mov	r1, r6
 800acde:	4628      	mov	r0, r5
 800ace0:	47b8      	blx	r7
 800ace2:	3001      	adds	r0, #1
 800ace4:	f43f aef7 	beq.w	800aad6 <_printf_float+0xc2>
 800ace8:	f109 0901 	add.w	r9, r9, #1
 800acec:	e7ee      	b.n	800accc <_printf_float+0x2b8>
 800acee:	bf00      	nop
 800acf0:	7fefffff 	.word	0x7fefffff
 800acf4:	0800d52c 	.word	0x0800d52c
 800acf8:	0800d530 	.word	0x0800d530
 800acfc:	0800d538 	.word	0x0800d538
 800ad00:	0800d534 	.word	0x0800d534
 800ad04:	0800d53c 	.word	0x0800d53c
 800ad08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	bfa8      	it	ge
 800ad10:	461a      	movge	r2, r3
 800ad12:	2a00      	cmp	r2, #0
 800ad14:	4691      	mov	r9, r2
 800ad16:	dc37      	bgt.n	800ad88 <_printf_float+0x374>
 800ad18:	f04f 0b00 	mov.w	fp, #0
 800ad1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad20:	f104 021a 	add.w	r2, r4, #26
 800ad24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad26:	9305      	str	r3, [sp, #20]
 800ad28:	eba3 0309 	sub.w	r3, r3, r9
 800ad2c:	455b      	cmp	r3, fp
 800ad2e:	dc33      	bgt.n	800ad98 <_printf_float+0x384>
 800ad30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad34:	429a      	cmp	r2, r3
 800ad36:	db3b      	blt.n	800adb0 <_printf_float+0x39c>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	07da      	lsls	r2, r3, #31
 800ad3c:	d438      	bmi.n	800adb0 <_printf_float+0x39c>
 800ad3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad40:	9a05      	ldr	r2, [sp, #20]
 800ad42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad44:	1a9a      	subs	r2, r3, r2
 800ad46:	eba3 0901 	sub.w	r9, r3, r1
 800ad4a:	4591      	cmp	r9, r2
 800ad4c:	bfa8      	it	ge
 800ad4e:	4691      	movge	r9, r2
 800ad50:	f1b9 0f00 	cmp.w	r9, #0
 800ad54:	dc35      	bgt.n	800adc2 <_printf_float+0x3ae>
 800ad56:	f04f 0800 	mov.w	r8, #0
 800ad5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad5e:	f104 0a1a 	add.w	sl, r4, #26
 800ad62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad66:	1a9b      	subs	r3, r3, r2
 800ad68:	eba3 0309 	sub.w	r3, r3, r9
 800ad6c:	4543      	cmp	r3, r8
 800ad6e:	f77f af79 	ble.w	800ac64 <_printf_float+0x250>
 800ad72:	2301      	movs	r3, #1
 800ad74:	4652      	mov	r2, sl
 800ad76:	4631      	mov	r1, r6
 800ad78:	4628      	mov	r0, r5
 800ad7a:	47b8      	blx	r7
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	f43f aeaa 	beq.w	800aad6 <_printf_float+0xc2>
 800ad82:	f108 0801 	add.w	r8, r8, #1
 800ad86:	e7ec      	b.n	800ad62 <_printf_float+0x34e>
 800ad88:	4613      	mov	r3, r2
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4642      	mov	r2, r8
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b8      	blx	r7
 800ad92:	3001      	adds	r0, #1
 800ad94:	d1c0      	bne.n	800ad18 <_printf_float+0x304>
 800ad96:	e69e      	b.n	800aad6 <_printf_float+0xc2>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	9205      	str	r2, [sp, #20]
 800ada0:	47b8      	blx	r7
 800ada2:	3001      	adds	r0, #1
 800ada4:	f43f ae97 	beq.w	800aad6 <_printf_float+0xc2>
 800ada8:	9a05      	ldr	r2, [sp, #20]
 800adaa:	f10b 0b01 	add.w	fp, fp, #1
 800adae:	e7b9      	b.n	800ad24 <_printf_float+0x310>
 800adb0:	ee18 3a10 	vmov	r3, s16
 800adb4:	4652      	mov	r2, sl
 800adb6:	4631      	mov	r1, r6
 800adb8:	4628      	mov	r0, r5
 800adba:	47b8      	blx	r7
 800adbc:	3001      	adds	r0, #1
 800adbe:	d1be      	bne.n	800ad3e <_printf_float+0x32a>
 800adc0:	e689      	b.n	800aad6 <_printf_float+0xc2>
 800adc2:	9a05      	ldr	r2, [sp, #20]
 800adc4:	464b      	mov	r3, r9
 800adc6:	4442      	add	r2, r8
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	47b8      	blx	r7
 800adce:	3001      	adds	r0, #1
 800add0:	d1c1      	bne.n	800ad56 <_printf_float+0x342>
 800add2:	e680      	b.n	800aad6 <_printf_float+0xc2>
 800add4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800add6:	2a01      	cmp	r2, #1
 800add8:	dc01      	bgt.n	800adde <_printf_float+0x3ca>
 800adda:	07db      	lsls	r3, r3, #31
 800addc:	d538      	bpl.n	800ae50 <_printf_float+0x43c>
 800adde:	2301      	movs	r3, #1
 800ade0:	4642      	mov	r2, r8
 800ade2:	4631      	mov	r1, r6
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	f43f ae74 	beq.w	800aad6 <_printf_float+0xc2>
 800adee:	ee18 3a10 	vmov	r3, s16
 800adf2:	4652      	mov	r2, sl
 800adf4:	4631      	mov	r1, r6
 800adf6:	4628      	mov	r0, r5
 800adf8:	47b8      	blx	r7
 800adfa:	3001      	adds	r0, #1
 800adfc:	f43f ae6b 	beq.w	800aad6 <_printf_float+0xc2>
 800ae00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae04:	2200      	movs	r2, #0
 800ae06:	2300      	movs	r3, #0
 800ae08:	f7f5 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae0c:	b9d8      	cbnz	r0, 800ae46 <_printf_float+0x432>
 800ae0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae10:	f108 0201 	add.w	r2, r8, #1
 800ae14:	3b01      	subs	r3, #1
 800ae16:	4631      	mov	r1, r6
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b8      	blx	r7
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d10e      	bne.n	800ae3e <_printf_float+0x42a>
 800ae20:	e659      	b.n	800aad6 <_printf_float+0xc2>
 800ae22:	2301      	movs	r3, #1
 800ae24:	4652      	mov	r2, sl
 800ae26:	4631      	mov	r1, r6
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b8      	blx	r7
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	f43f ae52 	beq.w	800aad6 <_printf_float+0xc2>
 800ae32:	f108 0801 	add.w	r8, r8, #1
 800ae36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	4543      	cmp	r3, r8
 800ae3c:	dcf1      	bgt.n	800ae22 <_printf_float+0x40e>
 800ae3e:	464b      	mov	r3, r9
 800ae40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae44:	e6dc      	b.n	800ac00 <_printf_float+0x1ec>
 800ae46:	f04f 0800 	mov.w	r8, #0
 800ae4a:	f104 0a1a 	add.w	sl, r4, #26
 800ae4e:	e7f2      	b.n	800ae36 <_printf_float+0x422>
 800ae50:	2301      	movs	r3, #1
 800ae52:	4642      	mov	r2, r8
 800ae54:	e7df      	b.n	800ae16 <_printf_float+0x402>
 800ae56:	2301      	movs	r3, #1
 800ae58:	464a      	mov	r2, r9
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	47b8      	blx	r7
 800ae60:	3001      	adds	r0, #1
 800ae62:	f43f ae38 	beq.w	800aad6 <_printf_float+0xc2>
 800ae66:	f108 0801 	add.w	r8, r8, #1
 800ae6a:	68e3      	ldr	r3, [r4, #12]
 800ae6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae6e:	1a5b      	subs	r3, r3, r1
 800ae70:	4543      	cmp	r3, r8
 800ae72:	dcf0      	bgt.n	800ae56 <_printf_float+0x442>
 800ae74:	e6fa      	b.n	800ac6c <_printf_float+0x258>
 800ae76:	f04f 0800 	mov.w	r8, #0
 800ae7a:	f104 0919 	add.w	r9, r4, #25
 800ae7e:	e7f4      	b.n	800ae6a <_printf_float+0x456>

0800ae80 <_printf_common>:
 800ae80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae84:	4616      	mov	r6, r2
 800ae86:	4699      	mov	r9, r3
 800ae88:	688a      	ldr	r2, [r1, #8]
 800ae8a:	690b      	ldr	r3, [r1, #16]
 800ae8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae90:	4293      	cmp	r3, r2
 800ae92:	bfb8      	it	lt
 800ae94:	4613      	movlt	r3, r2
 800ae96:	6033      	str	r3, [r6, #0]
 800ae98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae9c:	4607      	mov	r7, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	b10a      	cbz	r2, 800aea6 <_printf_common+0x26>
 800aea2:	3301      	adds	r3, #1
 800aea4:	6033      	str	r3, [r6, #0]
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	0699      	lsls	r1, r3, #26
 800aeaa:	bf42      	ittt	mi
 800aeac:	6833      	ldrmi	r3, [r6, #0]
 800aeae:	3302      	addmi	r3, #2
 800aeb0:	6033      	strmi	r3, [r6, #0]
 800aeb2:	6825      	ldr	r5, [r4, #0]
 800aeb4:	f015 0506 	ands.w	r5, r5, #6
 800aeb8:	d106      	bne.n	800aec8 <_printf_common+0x48>
 800aeba:	f104 0a19 	add.w	sl, r4, #25
 800aebe:	68e3      	ldr	r3, [r4, #12]
 800aec0:	6832      	ldr	r2, [r6, #0]
 800aec2:	1a9b      	subs	r3, r3, r2
 800aec4:	42ab      	cmp	r3, r5
 800aec6:	dc26      	bgt.n	800af16 <_printf_common+0x96>
 800aec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aecc:	1e13      	subs	r3, r2, #0
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	bf18      	it	ne
 800aed2:	2301      	movne	r3, #1
 800aed4:	0692      	lsls	r2, r2, #26
 800aed6:	d42b      	bmi.n	800af30 <_printf_common+0xb0>
 800aed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aedc:	4649      	mov	r1, r9
 800aede:	4638      	mov	r0, r7
 800aee0:	47c0      	blx	r8
 800aee2:	3001      	adds	r0, #1
 800aee4:	d01e      	beq.n	800af24 <_printf_common+0xa4>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	68e5      	ldr	r5, [r4, #12]
 800aeea:	6832      	ldr	r2, [r6, #0]
 800aeec:	f003 0306 	and.w	r3, r3, #6
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	bf08      	it	eq
 800aef4:	1aad      	subeq	r5, r5, r2
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	6922      	ldr	r2, [r4, #16]
 800aefa:	bf0c      	ite	eq
 800aefc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af00:	2500      	movne	r5, #0
 800af02:	4293      	cmp	r3, r2
 800af04:	bfc4      	itt	gt
 800af06:	1a9b      	subgt	r3, r3, r2
 800af08:	18ed      	addgt	r5, r5, r3
 800af0a:	2600      	movs	r6, #0
 800af0c:	341a      	adds	r4, #26
 800af0e:	42b5      	cmp	r5, r6
 800af10:	d11a      	bne.n	800af48 <_printf_common+0xc8>
 800af12:	2000      	movs	r0, #0
 800af14:	e008      	b.n	800af28 <_printf_common+0xa8>
 800af16:	2301      	movs	r3, #1
 800af18:	4652      	mov	r2, sl
 800af1a:	4649      	mov	r1, r9
 800af1c:	4638      	mov	r0, r7
 800af1e:	47c0      	blx	r8
 800af20:	3001      	adds	r0, #1
 800af22:	d103      	bne.n	800af2c <_printf_common+0xac>
 800af24:	f04f 30ff 	mov.w	r0, #4294967295
 800af28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2c:	3501      	adds	r5, #1
 800af2e:	e7c6      	b.n	800aebe <_printf_common+0x3e>
 800af30:	18e1      	adds	r1, r4, r3
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	2030      	movs	r0, #48	; 0x30
 800af36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af3a:	4422      	add	r2, r4
 800af3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af44:	3302      	adds	r3, #2
 800af46:	e7c7      	b.n	800aed8 <_printf_common+0x58>
 800af48:	2301      	movs	r3, #1
 800af4a:	4622      	mov	r2, r4
 800af4c:	4649      	mov	r1, r9
 800af4e:	4638      	mov	r0, r7
 800af50:	47c0      	blx	r8
 800af52:	3001      	adds	r0, #1
 800af54:	d0e6      	beq.n	800af24 <_printf_common+0xa4>
 800af56:	3601      	adds	r6, #1
 800af58:	e7d9      	b.n	800af0e <_printf_common+0x8e>
	...

0800af5c <_printf_i>:
 800af5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af60:	7e0f      	ldrb	r7, [r1, #24]
 800af62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af64:	2f78      	cmp	r7, #120	; 0x78
 800af66:	4691      	mov	r9, r2
 800af68:	4680      	mov	r8, r0
 800af6a:	460c      	mov	r4, r1
 800af6c:	469a      	mov	sl, r3
 800af6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af72:	d807      	bhi.n	800af84 <_printf_i+0x28>
 800af74:	2f62      	cmp	r7, #98	; 0x62
 800af76:	d80a      	bhi.n	800af8e <_printf_i+0x32>
 800af78:	2f00      	cmp	r7, #0
 800af7a:	f000 80d8 	beq.w	800b12e <_printf_i+0x1d2>
 800af7e:	2f58      	cmp	r7, #88	; 0x58
 800af80:	f000 80a3 	beq.w	800b0ca <_printf_i+0x16e>
 800af84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af8c:	e03a      	b.n	800b004 <_printf_i+0xa8>
 800af8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af92:	2b15      	cmp	r3, #21
 800af94:	d8f6      	bhi.n	800af84 <_printf_i+0x28>
 800af96:	a101      	add	r1, pc, #4	; (adr r1, 800af9c <_printf_i+0x40>)
 800af98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af9c:	0800aff5 	.word	0x0800aff5
 800afa0:	0800b009 	.word	0x0800b009
 800afa4:	0800af85 	.word	0x0800af85
 800afa8:	0800af85 	.word	0x0800af85
 800afac:	0800af85 	.word	0x0800af85
 800afb0:	0800af85 	.word	0x0800af85
 800afb4:	0800b009 	.word	0x0800b009
 800afb8:	0800af85 	.word	0x0800af85
 800afbc:	0800af85 	.word	0x0800af85
 800afc0:	0800af85 	.word	0x0800af85
 800afc4:	0800af85 	.word	0x0800af85
 800afc8:	0800b115 	.word	0x0800b115
 800afcc:	0800b039 	.word	0x0800b039
 800afd0:	0800b0f7 	.word	0x0800b0f7
 800afd4:	0800af85 	.word	0x0800af85
 800afd8:	0800af85 	.word	0x0800af85
 800afdc:	0800b137 	.word	0x0800b137
 800afe0:	0800af85 	.word	0x0800af85
 800afe4:	0800b039 	.word	0x0800b039
 800afe8:	0800af85 	.word	0x0800af85
 800afec:	0800af85 	.word	0x0800af85
 800aff0:	0800b0ff 	.word	0x0800b0ff
 800aff4:	682b      	ldr	r3, [r5, #0]
 800aff6:	1d1a      	adds	r2, r3, #4
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	602a      	str	r2, [r5, #0]
 800affc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b004:	2301      	movs	r3, #1
 800b006:	e0a3      	b.n	800b150 <_printf_i+0x1f4>
 800b008:	6820      	ldr	r0, [r4, #0]
 800b00a:	6829      	ldr	r1, [r5, #0]
 800b00c:	0606      	lsls	r6, r0, #24
 800b00e:	f101 0304 	add.w	r3, r1, #4
 800b012:	d50a      	bpl.n	800b02a <_printf_i+0xce>
 800b014:	680e      	ldr	r6, [r1, #0]
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	2e00      	cmp	r6, #0
 800b01a:	da03      	bge.n	800b024 <_printf_i+0xc8>
 800b01c:	232d      	movs	r3, #45	; 0x2d
 800b01e:	4276      	negs	r6, r6
 800b020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b024:	485e      	ldr	r0, [pc, #376]	; (800b1a0 <_printf_i+0x244>)
 800b026:	230a      	movs	r3, #10
 800b028:	e019      	b.n	800b05e <_printf_i+0x102>
 800b02a:	680e      	ldr	r6, [r1, #0]
 800b02c:	602b      	str	r3, [r5, #0]
 800b02e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b032:	bf18      	it	ne
 800b034:	b236      	sxthne	r6, r6
 800b036:	e7ef      	b.n	800b018 <_printf_i+0xbc>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	6820      	ldr	r0, [r4, #0]
 800b03c:	1d19      	adds	r1, r3, #4
 800b03e:	6029      	str	r1, [r5, #0]
 800b040:	0601      	lsls	r1, r0, #24
 800b042:	d501      	bpl.n	800b048 <_printf_i+0xec>
 800b044:	681e      	ldr	r6, [r3, #0]
 800b046:	e002      	b.n	800b04e <_printf_i+0xf2>
 800b048:	0646      	lsls	r6, r0, #25
 800b04a:	d5fb      	bpl.n	800b044 <_printf_i+0xe8>
 800b04c:	881e      	ldrh	r6, [r3, #0]
 800b04e:	4854      	ldr	r0, [pc, #336]	; (800b1a0 <_printf_i+0x244>)
 800b050:	2f6f      	cmp	r7, #111	; 0x6f
 800b052:	bf0c      	ite	eq
 800b054:	2308      	moveq	r3, #8
 800b056:	230a      	movne	r3, #10
 800b058:	2100      	movs	r1, #0
 800b05a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b05e:	6865      	ldr	r5, [r4, #4]
 800b060:	60a5      	str	r5, [r4, #8]
 800b062:	2d00      	cmp	r5, #0
 800b064:	bfa2      	ittt	ge
 800b066:	6821      	ldrge	r1, [r4, #0]
 800b068:	f021 0104 	bicge.w	r1, r1, #4
 800b06c:	6021      	strge	r1, [r4, #0]
 800b06e:	b90e      	cbnz	r6, 800b074 <_printf_i+0x118>
 800b070:	2d00      	cmp	r5, #0
 800b072:	d04d      	beq.n	800b110 <_printf_i+0x1b4>
 800b074:	4615      	mov	r5, r2
 800b076:	fbb6 f1f3 	udiv	r1, r6, r3
 800b07a:	fb03 6711 	mls	r7, r3, r1, r6
 800b07e:	5dc7      	ldrb	r7, [r0, r7]
 800b080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b084:	4637      	mov	r7, r6
 800b086:	42bb      	cmp	r3, r7
 800b088:	460e      	mov	r6, r1
 800b08a:	d9f4      	bls.n	800b076 <_printf_i+0x11a>
 800b08c:	2b08      	cmp	r3, #8
 800b08e:	d10b      	bne.n	800b0a8 <_printf_i+0x14c>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	07de      	lsls	r6, r3, #31
 800b094:	d508      	bpl.n	800b0a8 <_printf_i+0x14c>
 800b096:	6923      	ldr	r3, [r4, #16]
 800b098:	6861      	ldr	r1, [r4, #4]
 800b09a:	4299      	cmp	r1, r3
 800b09c:	bfde      	ittt	le
 800b09e:	2330      	movle	r3, #48	; 0x30
 800b0a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0a8:	1b52      	subs	r2, r2, r5
 800b0aa:	6122      	str	r2, [r4, #16]
 800b0ac:	f8cd a000 	str.w	sl, [sp]
 800b0b0:	464b      	mov	r3, r9
 800b0b2:	aa03      	add	r2, sp, #12
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	f7ff fee2 	bl	800ae80 <_printf_common>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d14c      	bne.n	800b15a <_printf_i+0x1fe>
 800b0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c4:	b004      	add	sp, #16
 800b0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ca:	4835      	ldr	r0, [pc, #212]	; (800b1a0 <_printf_i+0x244>)
 800b0cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0d0:	6829      	ldr	r1, [r5, #0]
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0d8:	6029      	str	r1, [r5, #0]
 800b0da:	061d      	lsls	r5, r3, #24
 800b0dc:	d514      	bpl.n	800b108 <_printf_i+0x1ac>
 800b0de:	07df      	lsls	r7, r3, #31
 800b0e0:	bf44      	itt	mi
 800b0e2:	f043 0320 	orrmi.w	r3, r3, #32
 800b0e6:	6023      	strmi	r3, [r4, #0]
 800b0e8:	b91e      	cbnz	r6, 800b0f2 <_printf_i+0x196>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	f023 0320 	bic.w	r3, r3, #32
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	2310      	movs	r3, #16
 800b0f4:	e7b0      	b.n	800b058 <_printf_i+0xfc>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	f043 0320 	orr.w	r3, r3, #32
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	2378      	movs	r3, #120	; 0x78
 800b100:	4828      	ldr	r0, [pc, #160]	; (800b1a4 <_printf_i+0x248>)
 800b102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b106:	e7e3      	b.n	800b0d0 <_printf_i+0x174>
 800b108:	0659      	lsls	r1, r3, #25
 800b10a:	bf48      	it	mi
 800b10c:	b2b6      	uxthmi	r6, r6
 800b10e:	e7e6      	b.n	800b0de <_printf_i+0x182>
 800b110:	4615      	mov	r5, r2
 800b112:	e7bb      	b.n	800b08c <_printf_i+0x130>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	6826      	ldr	r6, [r4, #0]
 800b118:	6961      	ldr	r1, [r4, #20]
 800b11a:	1d18      	adds	r0, r3, #4
 800b11c:	6028      	str	r0, [r5, #0]
 800b11e:	0635      	lsls	r5, r6, #24
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	d501      	bpl.n	800b128 <_printf_i+0x1cc>
 800b124:	6019      	str	r1, [r3, #0]
 800b126:	e002      	b.n	800b12e <_printf_i+0x1d2>
 800b128:	0670      	lsls	r0, r6, #25
 800b12a:	d5fb      	bpl.n	800b124 <_printf_i+0x1c8>
 800b12c:	8019      	strh	r1, [r3, #0]
 800b12e:	2300      	movs	r3, #0
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	4615      	mov	r5, r2
 800b134:	e7ba      	b.n	800b0ac <_printf_i+0x150>
 800b136:	682b      	ldr	r3, [r5, #0]
 800b138:	1d1a      	adds	r2, r3, #4
 800b13a:	602a      	str	r2, [r5, #0]
 800b13c:	681d      	ldr	r5, [r3, #0]
 800b13e:	6862      	ldr	r2, [r4, #4]
 800b140:	2100      	movs	r1, #0
 800b142:	4628      	mov	r0, r5
 800b144:	f7f5 f84c 	bl	80001e0 <memchr>
 800b148:	b108      	cbz	r0, 800b14e <_printf_i+0x1f2>
 800b14a:	1b40      	subs	r0, r0, r5
 800b14c:	6060      	str	r0, [r4, #4]
 800b14e:	6863      	ldr	r3, [r4, #4]
 800b150:	6123      	str	r3, [r4, #16]
 800b152:	2300      	movs	r3, #0
 800b154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b158:	e7a8      	b.n	800b0ac <_printf_i+0x150>
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4649      	mov	r1, r9
 800b160:	4640      	mov	r0, r8
 800b162:	47d0      	blx	sl
 800b164:	3001      	adds	r0, #1
 800b166:	d0ab      	beq.n	800b0c0 <_printf_i+0x164>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	079b      	lsls	r3, r3, #30
 800b16c:	d413      	bmi.n	800b196 <_printf_i+0x23a>
 800b16e:	68e0      	ldr	r0, [r4, #12]
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	4298      	cmp	r0, r3
 800b174:	bfb8      	it	lt
 800b176:	4618      	movlt	r0, r3
 800b178:	e7a4      	b.n	800b0c4 <_printf_i+0x168>
 800b17a:	2301      	movs	r3, #1
 800b17c:	4632      	mov	r2, r6
 800b17e:	4649      	mov	r1, r9
 800b180:	4640      	mov	r0, r8
 800b182:	47d0      	blx	sl
 800b184:	3001      	adds	r0, #1
 800b186:	d09b      	beq.n	800b0c0 <_printf_i+0x164>
 800b188:	3501      	adds	r5, #1
 800b18a:	68e3      	ldr	r3, [r4, #12]
 800b18c:	9903      	ldr	r1, [sp, #12]
 800b18e:	1a5b      	subs	r3, r3, r1
 800b190:	42ab      	cmp	r3, r5
 800b192:	dcf2      	bgt.n	800b17a <_printf_i+0x21e>
 800b194:	e7eb      	b.n	800b16e <_printf_i+0x212>
 800b196:	2500      	movs	r5, #0
 800b198:	f104 0619 	add.w	r6, r4, #25
 800b19c:	e7f5      	b.n	800b18a <_printf_i+0x22e>
 800b19e:	bf00      	nop
 800b1a0:	0800d53e 	.word	0x0800d53e
 800b1a4:	0800d54f 	.word	0x0800d54f

0800b1a8 <_sbrk_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4d06      	ldr	r5, [pc, #24]	; (800b1c4 <_sbrk_r+0x1c>)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	4608      	mov	r0, r1
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	f7f6 fdb2 	bl	8001d1c <_sbrk>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d102      	bne.n	800b1c2 <_sbrk_r+0x1a>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b103      	cbz	r3, 800b1c2 <_sbrk_r+0x1a>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	20000ac0 	.word	0x20000ac0

0800b1c8 <siprintf>:
 800b1c8:	b40e      	push	{r1, r2, r3}
 800b1ca:	b500      	push	{lr}
 800b1cc:	b09c      	sub	sp, #112	; 0x70
 800b1ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b1d0:	9002      	str	r0, [sp, #8]
 800b1d2:	9006      	str	r0, [sp, #24]
 800b1d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1d8:	4809      	ldr	r0, [pc, #36]	; (800b200 <siprintf+0x38>)
 800b1da:	9107      	str	r1, [sp, #28]
 800b1dc:	9104      	str	r1, [sp, #16]
 800b1de:	4909      	ldr	r1, [pc, #36]	; (800b204 <siprintf+0x3c>)
 800b1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e4:	9105      	str	r1, [sp, #20]
 800b1e6:	6800      	ldr	r0, [r0, #0]
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	a902      	add	r1, sp, #8
 800b1ec:	f001 faaa 	bl	800c744 <_svfiprintf_r>
 800b1f0:	9b02      	ldr	r3, [sp, #8]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	b01c      	add	sp, #112	; 0x70
 800b1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1fc:	b003      	add	sp, #12
 800b1fe:	4770      	bx	lr
 800b200:	2000002c 	.word	0x2000002c
 800b204:	ffff0208 	.word	0xffff0208

0800b208 <strcat>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	4602      	mov	r2, r0
 800b20c:	7814      	ldrb	r4, [r2, #0]
 800b20e:	4613      	mov	r3, r2
 800b210:	3201      	adds	r2, #1
 800b212:	2c00      	cmp	r4, #0
 800b214:	d1fa      	bne.n	800b20c <strcat+0x4>
 800b216:	3b01      	subs	r3, #1
 800b218:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b21c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b220:	2a00      	cmp	r2, #0
 800b222:	d1f9      	bne.n	800b218 <strcat+0x10>
 800b224:	bd10      	pop	{r4, pc}

0800b226 <quorem>:
 800b226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22a:	6903      	ldr	r3, [r0, #16]
 800b22c:	690c      	ldr	r4, [r1, #16]
 800b22e:	42a3      	cmp	r3, r4
 800b230:	4607      	mov	r7, r0
 800b232:	f2c0 8081 	blt.w	800b338 <quorem+0x112>
 800b236:	3c01      	subs	r4, #1
 800b238:	f101 0814 	add.w	r8, r1, #20
 800b23c:	f100 0514 	add.w	r5, r0, #20
 800b240:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b24a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b24e:	3301      	adds	r3, #1
 800b250:	429a      	cmp	r2, r3
 800b252:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b256:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b25a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b25e:	d331      	bcc.n	800b2c4 <quorem+0x9e>
 800b260:	f04f 0e00 	mov.w	lr, #0
 800b264:	4640      	mov	r0, r8
 800b266:	46ac      	mov	ip, r5
 800b268:	46f2      	mov	sl, lr
 800b26a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b26e:	b293      	uxth	r3, r2
 800b270:	fb06 e303 	mla	r3, r6, r3, lr
 800b274:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b278:	b29b      	uxth	r3, r3
 800b27a:	ebaa 0303 	sub.w	r3, sl, r3
 800b27e:	f8dc a000 	ldr.w	sl, [ip]
 800b282:	0c12      	lsrs	r2, r2, #16
 800b284:	fa13 f38a 	uxtah	r3, r3, sl
 800b288:	fb06 e202 	mla	r2, r6, r2, lr
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	9b00      	ldr	r3, [sp, #0]
 800b290:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b294:	b292      	uxth	r2, r2
 800b296:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b29a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b29e:	f8bd 3000 	ldrh.w	r3, [sp]
 800b2a2:	4581      	cmp	r9, r0
 800b2a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2a8:	f84c 3b04 	str.w	r3, [ip], #4
 800b2ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b2b0:	d2db      	bcs.n	800b26a <quorem+0x44>
 800b2b2:	f855 300b 	ldr.w	r3, [r5, fp]
 800b2b6:	b92b      	cbnz	r3, 800b2c4 <quorem+0x9e>
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	3b04      	subs	r3, #4
 800b2bc:	429d      	cmp	r5, r3
 800b2be:	461a      	mov	r2, r3
 800b2c0:	d32e      	bcc.n	800b320 <quorem+0xfa>
 800b2c2:	613c      	str	r4, [r7, #16]
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	f001 f8c9 	bl	800c45c <__mcmp>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	db24      	blt.n	800b318 <quorem+0xf2>
 800b2ce:	3601      	adds	r6, #1
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f04f 0c00 	mov.w	ip, #0
 800b2d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2da:	f8d0 e000 	ldr.w	lr, [r0]
 800b2de:	b293      	uxth	r3, r2
 800b2e0:	ebac 0303 	sub.w	r3, ip, r3
 800b2e4:	0c12      	lsrs	r2, r2, #16
 800b2e6:	fa13 f38e 	uxtah	r3, r3, lr
 800b2ea:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2f8:	45c1      	cmp	r9, r8
 800b2fa:	f840 3b04 	str.w	r3, [r0], #4
 800b2fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b302:	d2e8      	bcs.n	800b2d6 <quorem+0xb0>
 800b304:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b308:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b30c:	b922      	cbnz	r2, 800b318 <quorem+0xf2>
 800b30e:	3b04      	subs	r3, #4
 800b310:	429d      	cmp	r5, r3
 800b312:	461a      	mov	r2, r3
 800b314:	d30a      	bcc.n	800b32c <quorem+0x106>
 800b316:	613c      	str	r4, [r7, #16]
 800b318:	4630      	mov	r0, r6
 800b31a:	b003      	add	sp, #12
 800b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b320:	6812      	ldr	r2, [r2, #0]
 800b322:	3b04      	subs	r3, #4
 800b324:	2a00      	cmp	r2, #0
 800b326:	d1cc      	bne.n	800b2c2 <quorem+0x9c>
 800b328:	3c01      	subs	r4, #1
 800b32a:	e7c7      	b.n	800b2bc <quorem+0x96>
 800b32c:	6812      	ldr	r2, [r2, #0]
 800b32e:	3b04      	subs	r3, #4
 800b330:	2a00      	cmp	r2, #0
 800b332:	d1f0      	bne.n	800b316 <quorem+0xf0>
 800b334:	3c01      	subs	r4, #1
 800b336:	e7eb      	b.n	800b310 <quorem+0xea>
 800b338:	2000      	movs	r0, #0
 800b33a:	e7ee      	b.n	800b31a <quorem+0xf4>
 800b33c:	0000      	movs	r0, r0
	...

0800b340 <_dtoa_r>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	ed2d 8b04 	vpush	{d8-d9}
 800b348:	ec57 6b10 	vmov	r6, r7, d0
 800b34c:	b093      	sub	sp, #76	; 0x4c
 800b34e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b354:	9106      	str	r1, [sp, #24]
 800b356:	ee10 aa10 	vmov	sl, s0
 800b35a:	4604      	mov	r4, r0
 800b35c:	9209      	str	r2, [sp, #36]	; 0x24
 800b35e:	930c      	str	r3, [sp, #48]	; 0x30
 800b360:	46bb      	mov	fp, r7
 800b362:	b975      	cbnz	r5, 800b382 <_dtoa_r+0x42>
 800b364:	2010      	movs	r0, #16
 800b366:	f7ff f9bd 	bl	800a6e4 <malloc>
 800b36a:	4602      	mov	r2, r0
 800b36c:	6260      	str	r0, [r4, #36]	; 0x24
 800b36e:	b920      	cbnz	r0, 800b37a <_dtoa_r+0x3a>
 800b370:	4ba7      	ldr	r3, [pc, #668]	; (800b610 <_dtoa_r+0x2d0>)
 800b372:	21ea      	movs	r1, #234	; 0xea
 800b374:	48a7      	ldr	r0, [pc, #668]	; (800b614 <_dtoa_r+0x2d4>)
 800b376:	f001 fae5 	bl	800c944 <__assert_func>
 800b37a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b37e:	6005      	str	r5, [r0, #0]
 800b380:	60c5      	str	r5, [r0, #12]
 800b382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b384:	6819      	ldr	r1, [r3, #0]
 800b386:	b151      	cbz	r1, 800b39e <_dtoa_r+0x5e>
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	604a      	str	r2, [r1, #4]
 800b38c:	2301      	movs	r3, #1
 800b38e:	4093      	lsls	r3, r2
 800b390:	608b      	str	r3, [r1, #8]
 800b392:	4620      	mov	r0, r4
 800b394:	f000 fe20 	bl	800bfd8 <_Bfree>
 800b398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b39a:	2200      	movs	r2, #0
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	1e3b      	subs	r3, r7, #0
 800b3a0:	bfaa      	itet	ge
 800b3a2:	2300      	movge	r3, #0
 800b3a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b3a8:	f8c8 3000 	strge.w	r3, [r8]
 800b3ac:	4b9a      	ldr	r3, [pc, #616]	; (800b618 <_dtoa_r+0x2d8>)
 800b3ae:	bfbc      	itt	lt
 800b3b0:	2201      	movlt	r2, #1
 800b3b2:	f8c8 2000 	strlt.w	r2, [r8]
 800b3b6:	ea33 030b 	bics.w	r3, r3, fp
 800b3ba:	d11b      	bne.n	800b3f4 <_dtoa_r+0xb4>
 800b3bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3be:	f242 730f 	movw	r3, #9999	; 0x270f
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3c8:	4333      	orrs	r3, r6
 800b3ca:	f000 8592 	beq.w	800bef2 <_dtoa_r+0xbb2>
 800b3ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3d0:	b963      	cbnz	r3, 800b3ec <_dtoa_r+0xac>
 800b3d2:	4b92      	ldr	r3, [pc, #584]	; (800b61c <_dtoa_r+0x2dc>)
 800b3d4:	e022      	b.n	800b41c <_dtoa_r+0xdc>
 800b3d6:	4b92      	ldr	r3, [pc, #584]	; (800b620 <_dtoa_r+0x2e0>)
 800b3d8:	9301      	str	r3, [sp, #4]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	9801      	ldr	r0, [sp, #4]
 800b3e2:	b013      	add	sp, #76	; 0x4c
 800b3e4:	ecbd 8b04 	vpop	{d8-d9}
 800b3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ec:	4b8b      	ldr	r3, [pc, #556]	; (800b61c <_dtoa_r+0x2dc>)
 800b3ee:	9301      	str	r3, [sp, #4]
 800b3f0:	3303      	adds	r3, #3
 800b3f2:	e7f3      	b.n	800b3dc <_dtoa_r+0x9c>
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	4650      	mov	r0, sl
 800b3fa:	4659      	mov	r1, fp
 800b3fc:	f7f5 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 800b400:	ec4b ab19 	vmov	d9, sl, fp
 800b404:	4680      	mov	r8, r0
 800b406:	b158      	cbz	r0, 800b420 <_dtoa_r+0xe0>
 800b408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b40a:	2301      	movs	r3, #1
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b410:	2b00      	cmp	r3, #0
 800b412:	f000 856b 	beq.w	800beec <_dtoa_r+0xbac>
 800b416:	4883      	ldr	r0, [pc, #524]	; (800b624 <_dtoa_r+0x2e4>)
 800b418:	6018      	str	r0, [r3, #0]
 800b41a:	1e43      	subs	r3, r0, #1
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	e7df      	b.n	800b3e0 <_dtoa_r+0xa0>
 800b420:	ec4b ab10 	vmov	d0, sl, fp
 800b424:	aa10      	add	r2, sp, #64	; 0x40
 800b426:	a911      	add	r1, sp, #68	; 0x44
 800b428:	4620      	mov	r0, r4
 800b42a:	f001 f8bd 	bl	800c5a8 <__d2b>
 800b42e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b432:	ee08 0a10 	vmov	s16, r0
 800b436:	2d00      	cmp	r5, #0
 800b438:	f000 8084 	beq.w	800b544 <_dtoa_r+0x204>
 800b43c:	ee19 3a90 	vmov	r3, s19
 800b440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b444:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b448:	4656      	mov	r6, sl
 800b44a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b44e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b452:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b456:	4b74      	ldr	r3, [pc, #464]	; (800b628 <_dtoa_r+0x2e8>)
 800b458:	2200      	movs	r2, #0
 800b45a:	4630      	mov	r0, r6
 800b45c:	4639      	mov	r1, r7
 800b45e:	f7f4 ff13 	bl	8000288 <__aeabi_dsub>
 800b462:	a365      	add	r3, pc, #404	; (adr r3, 800b5f8 <_dtoa_r+0x2b8>)
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	f7f5 f8c6 	bl	80005f8 <__aeabi_dmul>
 800b46c:	a364      	add	r3, pc, #400	; (adr r3, 800b600 <_dtoa_r+0x2c0>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f7f4 ff0b 	bl	800028c <__adddf3>
 800b476:	4606      	mov	r6, r0
 800b478:	4628      	mov	r0, r5
 800b47a:	460f      	mov	r7, r1
 800b47c:	f7f5 f852 	bl	8000524 <__aeabi_i2d>
 800b480:	a361      	add	r3, pc, #388	; (adr r3, 800b608 <_dtoa_r+0x2c8>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f7f5 f8b7 	bl	80005f8 <__aeabi_dmul>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	4630      	mov	r0, r6
 800b490:	4639      	mov	r1, r7
 800b492:	f7f4 fefb 	bl	800028c <__adddf3>
 800b496:	4606      	mov	r6, r0
 800b498:	460f      	mov	r7, r1
 800b49a:	f7f5 fb5d 	bl	8000b58 <__aeabi_d2iz>
 800b49e:	2200      	movs	r2, #0
 800b4a0:	9000      	str	r0, [sp, #0]
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	f7f5 fb18 	bl	8000adc <__aeabi_dcmplt>
 800b4ac:	b150      	cbz	r0, 800b4c4 <_dtoa_r+0x184>
 800b4ae:	9800      	ldr	r0, [sp, #0]
 800b4b0:	f7f5 f838 	bl	8000524 <__aeabi_i2d>
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	f7f5 fb06 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4bc:	b910      	cbnz	r0, 800b4c4 <_dtoa_r+0x184>
 800b4be:	9b00      	ldr	r3, [sp, #0]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	9b00      	ldr	r3, [sp, #0]
 800b4c6:	2b16      	cmp	r3, #22
 800b4c8:	d85a      	bhi.n	800b580 <_dtoa_r+0x240>
 800b4ca:	9a00      	ldr	r2, [sp, #0]
 800b4cc:	4b57      	ldr	r3, [pc, #348]	; (800b62c <_dtoa_r+0x2ec>)
 800b4ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	ec51 0b19 	vmov	r0, r1, d9
 800b4da:	f7f5 faff 	bl	8000adc <__aeabi_dcmplt>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d050      	beq.n	800b584 <_dtoa_r+0x244>
 800b4e2:	9b00      	ldr	r3, [sp, #0]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4ee:	1b5d      	subs	r5, r3, r5
 800b4f0:	1e6b      	subs	r3, r5, #1
 800b4f2:	9305      	str	r3, [sp, #20]
 800b4f4:	bf45      	ittet	mi
 800b4f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b4fa:	9304      	strmi	r3, [sp, #16]
 800b4fc:	2300      	movpl	r3, #0
 800b4fe:	2300      	movmi	r3, #0
 800b500:	bf4c      	ite	mi
 800b502:	9305      	strmi	r3, [sp, #20]
 800b504:	9304      	strpl	r3, [sp, #16]
 800b506:	9b00      	ldr	r3, [sp, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	db3d      	blt.n	800b588 <_dtoa_r+0x248>
 800b50c:	9b05      	ldr	r3, [sp, #20]
 800b50e:	9a00      	ldr	r2, [sp, #0]
 800b510:	920a      	str	r2, [sp, #40]	; 0x28
 800b512:	4413      	add	r3, r2
 800b514:	9305      	str	r3, [sp, #20]
 800b516:	2300      	movs	r3, #0
 800b518:	9307      	str	r3, [sp, #28]
 800b51a:	9b06      	ldr	r3, [sp, #24]
 800b51c:	2b09      	cmp	r3, #9
 800b51e:	f200 8089 	bhi.w	800b634 <_dtoa_r+0x2f4>
 800b522:	2b05      	cmp	r3, #5
 800b524:	bfc4      	itt	gt
 800b526:	3b04      	subgt	r3, #4
 800b528:	9306      	strgt	r3, [sp, #24]
 800b52a:	9b06      	ldr	r3, [sp, #24]
 800b52c:	f1a3 0302 	sub.w	r3, r3, #2
 800b530:	bfcc      	ite	gt
 800b532:	2500      	movgt	r5, #0
 800b534:	2501      	movle	r5, #1
 800b536:	2b03      	cmp	r3, #3
 800b538:	f200 8087 	bhi.w	800b64a <_dtoa_r+0x30a>
 800b53c:	e8df f003 	tbb	[pc, r3]
 800b540:	59383a2d 	.word	0x59383a2d
 800b544:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b548:	441d      	add	r5, r3
 800b54a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b54e:	2b20      	cmp	r3, #32
 800b550:	bfc1      	itttt	gt
 800b552:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b556:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b55a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b55e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b562:	bfda      	itte	le
 800b564:	f1c3 0320 	rsble	r3, r3, #32
 800b568:	fa06 f003 	lslle.w	r0, r6, r3
 800b56c:	4318      	orrgt	r0, r3
 800b56e:	f7f4 ffc9 	bl	8000504 <__aeabi_ui2d>
 800b572:	2301      	movs	r3, #1
 800b574:	4606      	mov	r6, r0
 800b576:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b57a:	3d01      	subs	r5, #1
 800b57c:	930e      	str	r3, [sp, #56]	; 0x38
 800b57e:	e76a      	b.n	800b456 <_dtoa_r+0x116>
 800b580:	2301      	movs	r3, #1
 800b582:	e7b2      	b.n	800b4ea <_dtoa_r+0x1aa>
 800b584:	900b      	str	r0, [sp, #44]	; 0x2c
 800b586:	e7b1      	b.n	800b4ec <_dtoa_r+0x1ac>
 800b588:	9b04      	ldr	r3, [sp, #16]
 800b58a:	9a00      	ldr	r2, [sp, #0]
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	9304      	str	r3, [sp, #16]
 800b590:	4253      	negs	r3, r2
 800b592:	9307      	str	r3, [sp, #28]
 800b594:	2300      	movs	r3, #0
 800b596:	930a      	str	r3, [sp, #40]	; 0x28
 800b598:	e7bf      	b.n	800b51a <_dtoa_r+0x1da>
 800b59a:	2300      	movs	r3, #0
 800b59c:	9308      	str	r3, [sp, #32]
 800b59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	dc55      	bgt.n	800b650 <_dtoa_r+0x310>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ae:	e00c      	b.n	800b5ca <_dtoa_r+0x28a>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e7f3      	b.n	800b59c <_dtoa_r+0x25c>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5b8:	9308      	str	r3, [sp, #32]
 800b5ba:	9b00      	ldr	r3, [sp, #0]
 800b5bc:	4413      	add	r3, r2
 800b5be:	9302      	str	r3, [sp, #8]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	9303      	str	r3, [sp, #12]
 800b5c6:	bfb8      	it	lt
 800b5c8:	2301      	movlt	r3, #1
 800b5ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	6042      	str	r2, [r0, #4]
 800b5d0:	2204      	movs	r2, #4
 800b5d2:	f102 0614 	add.w	r6, r2, #20
 800b5d6:	429e      	cmp	r6, r3
 800b5d8:	6841      	ldr	r1, [r0, #4]
 800b5da:	d93d      	bls.n	800b658 <_dtoa_r+0x318>
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 fcbb 	bl	800bf58 <_Balloc>
 800b5e2:	9001      	str	r0, [sp, #4]
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d13b      	bne.n	800b660 <_dtoa_r+0x320>
 800b5e8:	4b11      	ldr	r3, [pc, #68]	; (800b630 <_dtoa_r+0x2f0>)
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5f0:	e6c0      	b.n	800b374 <_dtoa_r+0x34>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e7df      	b.n	800b5b6 <_dtoa_r+0x276>
 800b5f6:	bf00      	nop
 800b5f8:	636f4361 	.word	0x636f4361
 800b5fc:	3fd287a7 	.word	0x3fd287a7
 800b600:	8b60c8b3 	.word	0x8b60c8b3
 800b604:	3fc68a28 	.word	0x3fc68a28
 800b608:	509f79fb 	.word	0x509f79fb
 800b60c:	3fd34413 	.word	0x3fd34413
 800b610:	0800d56d 	.word	0x0800d56d
 800b614:	0800d584 	.word	0x0800d584
 800b618:	7ff00000 	.word	0x7ff00000
 800b61c:	0800d569 	.word	0x0800d569
 800b620:	0800d560 	.word	0x0800d560
 800b624:	0800d53d 	.word	0x0800d53d
 800b628:	3ff80000 	.word	0x3ff80000
 800b62c:	0800d678 	.word	0x0800d678
 800b630:	0800d5df 	.word	0x0800d5df
 800b634:	2501      	movs	r5, #1
 800b636:	2300      	movs	r3, #0
 800b638:	9306      	str	r3, [sp, #24]
 800b63a:	9508      	str	r5, [sp, #32]
 800b63c:	f04f 33ff 	mov.w	r3, #4294967295
 800b640:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b644:	2200      	movs	r2, #0
 800b646:	2312      	movs	r3, #18
 800b648:	e7b0      	b.n	800b5ac <_dtoa_r+0x26c>
 800b64a:	2301      	movs	r3, #1
 800b64c:	9308      	str	r3, [sp, #32]
 800b64e:	e7f5      	b.n	800b63c <_dtoa_r+0x2fc>
 800b650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b652:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b656:	e7b8      	b.n	800b5ca <_dtoa_r+0x28a>
 800b658:	3101      	adds	r1, #1
 800b65a:	6041      	str	r1, [r0, #4]
 800b65c:	0052      	lsls	r2, r2, #1
 800b65e:	e7b8      	b.n	800b5d2 <_dtoa_r+0x292>
 800b660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b662:	9a01      	ldr	r2, [sp, #4]
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	2b0e      	cmp	r3, #14
 800b66a:	f200 809d 	bhi.w	800b7a8 <_dtoa_r+0x468>
 800b66e:	2d00      	cmp	r5, #0
 800b670:	f000 809a 	beq.w	800b7a8 <_dtoa_r+0x468>
 800b674:	9b00      	ldr	r3, [sp, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	dd32      	ble.n	800b6e0 <_dtoa_r+0x3a0>
 800b67a:	4ab7      	ldr	r2, [pc, #732]	; (800b958 <_dtoa_r+0x618>)
 800b67c:	f003 030f 	and.w	r3, r3, #15
 800b680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b684:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b688:	9b00      	ldr	r3, [sp, #0]
 800b68a:	05d8      	lsls	r0, r3, #23
 800b68c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b690:	d516      	bpl.n	800b6c0 <_dtoa_r+0x380>
 800b692:	4bb2      	ldr	r3, [pc, #712]	; (800b95c <_dtoa_r+0x61c>)
 800b694:	ec51 0b19 	vmov	r0, r1, d9
 800b698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b69c:	f7f5 f8d6 	bl	800084c <__aeabi_ddiv>
 800b6a0:	f007 070f 	and.w	r7, r7, #15
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	468b      	mov	fp, r1
 800b6a8:	2503      	movs	r5, #3
 800b6aa:	4eac      	ldr	r6, [pc, #688]	; (800b95c <_dtoa_r+0x61c>)
 800b6ac:	b957      	cbnz	r7, 800b6c4 <_dtoa_r+0x384>
 800b6ae:	4642      	mov	r2, r8
 800b6b0:	464b      	mov	r3, r9
 800b6b2:	4650      	mov	r0, sl
 800b6b4:	4659      	mov	r1, fp
 800b6b6:	f7f5 f8c9 	bl	800084c <__aeabi_ddiv>
 800b6ba:	4682      	mov	sl, r0
 800b6bc:	468b      	mov	fp, r1
 800b6be:	e028      	b.n	800b712 <_dtoa_r+0x3d2>
 800b6c0:	2502      	movs	r5, #2
 800b6c2:	e7f2      	b.n	800b6aa <_dtoa_r+0x36a>
 800b6c4:	07f9      	lsls	r1, r7, #31
 800b6c6:	d508      	bpl.n	800b6da <_dtoa_r+0x39a>
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b6d0:	f7f4 ff92 	bl	80005f8 <__aeabi_dmul>
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	4689      	mov	r9, r1
 800b6da:	107f      	asrs	r7, r7, #1
 800b6dc:	3608      	adds	r6, #8
 800b6de:	e7e5      	b.n	800b6ac <_dtoa_r+0x36c>
 800b6e0:	f000 809b 	beq.w	800b81a <_dtoa_r+0x4da>
 800b6e4:	9b00      	ldr	r3, [sp, #0]
 800b6e6:	4f9d      	ldr	r7, [pc, #628]	; (800b95c <_dtoa_r+0x61c>)
 800b6e8:	425e      	negs	r6, r3
 800b6ea:	4b9b      	ldr	r3, [pc, #620]	; (800b958 <_dtoa_r+0x618>)
 800b6ec:	f006 020f 	and.w	r2, r6, #15
 800b6f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	ec51 0b19 	vmov	r0, r1, d9
 800b6fc:	f7f4 ff7c 	bl	80005f8 <__aeabi_dmul>
 800b700:	1136      	asrs	r6, r6, #4
 800b702:	4682      	mov	sl, r0
 800b704:	468b      	mov	fp, r1
 800b706:	2300      	movs	r3, #0
 800b708:	2502      	movs	r5, #2
 800b70a:	2e00      	cmp	r6, #0
 800b70c:	d17a      	bne.n	800b804 <_dtoa_r+0x4c4>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1d3      	bne.n	800b6ba <_dtoa_r+0x37a>
 800b712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 8082 	beq.w	800b81e <_dtoa_r+0x4de>
 800b71a:	4b91      	ldr	r3, [pc, #580]	; (800b960 <_dtoa_r+0x620>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	4650      	mov	r0, sl
 800b720:	4659      	mov	r1, fp
 800b722:	f7f5 f9db 	bl	8000adc <__aeabi_dcmplt>
 800b726:	2800      	cmp	r0, #0
 800b728:	d079      	beq.n	800b81e <_dtoa_r+0x4de>
 800b72a:	9b03      	ldr	r3, [sp, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d076      	beq.n	800b81e <_dtoa_r+0x4de>
 800b730:	9b02      	ldr	r3, [sp, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	dd36      	ble.n	800b7a4 <_dtoa_r+0x464>
 800b736:	9b00      	ldr	r3, [sp, #0]
 800b738:	4650      	mov	r0, sl
 800b73a:	4659      	mov	r1, fp
 800b73c:	1e5f      	subs	r7, r3, #1
 800b73e:	2200      	movs	r2, #0
 800b740:	4b88      	ldr	r3, [pc, #544]	; (800b964 <_dtoa_r+0x624>)
 800b742:	f7f4 ff59 	bl	80005f8 <__aeabi_dmul>
 800b746:	9e02      	ldr	r6, [sp, #8]
 800b748:	4682      	mov	sl, r0
 800b74a:	468b      	mov	fp, r1
 800b74c:	3501      	adds	r5, #1
 800b74e:	4628      	mov	r0, r5
 800b750:	f7f4 fee8 	bl	8000524 <__aeabi_i2d>
 800b754:	4652      	mov	r2, sl
 800b756:	465b      	mov	r3, fp
 800b758:	f7f4 ff4e 	bl	80005f8 <__aeabi_dmul>
 800b75c:	4b82      	ldr	r3, [pc, #520]	; (800b968 <_dtoa_r+0x628>)
 800b75e:	2200      	movs	r2, #0
 800b760:	f7f4 fd94 	bl	800028c <__adddf3>
 800b764:	46d0      	mov	r8, sl
 800b766:	46d9      	mov	r9, fp
 800b768:	4682      	mov	sl, r0
 800b76a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b76e:	2e00      	cmp	r6, #0
 800b770:	d158      	bne.n	800b824 <_dtoa_r+0x4e4>
 800b772:	4b7e      	ldr	r3, [pc, #504]	; (800b96c <_dtoa_r+0x62c>)
 800b774:	2200      	movs	r2, #0
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f4 fd85 	bl	8000288 <__aeabi_dsub>
 800b77e:	4652      	mov	r2, sl
 800b780:	465b      	mov	r3, fp
 800b782:	4680      	mov	r8, r0
 800b784:	4689      	mov	r9, r1
 800b786:	f7f5 f9c7 	bl	8000b18 <__aeabi_dcmpgt>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f040 8295 	bne.w	800bcba <_dtoa_r+0x97a>
 800b790:	4652      	mov	r2, sl
 800b792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b796:	4640      	mov	r0, r8
 800b798:	4649      	mov	r1, r9
 800b79a:	f7f5 f99f 	bl	8000adc <__aeabi_dcmplt>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	f040 8289 	bne.w	800bcb6 <_dtoa_r+0x976>
 800b7a4:	ec5b ab19 	vmov	sl, fp, d9
 800b7a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f2c0 8148 	blt.w	800ba40 <_dtoa_r+0x700>
 800b7b0:	9a00      	ldr	r2, [sp, #0]
 800b7b2:	2a0e      	cmp	r2, #14
 800b7b4:	f300 8144 	bgt.w	800ba40 <_dtoa_r+0x700>
 800b7b8:	4b67      	ldr	r3, [pc, #412]	; (800b958 <_dtoa_r+0x618>)
 800b7ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f280 80d5 	bge.w	800b974 <_dtoa_r+0x634>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f300 80d1 	bgt.w	800b974 <_dtoa_r+0x634>
 800b7d2:	f040 826f 	bne.w	800bcb4 <_dtoa_r+0x974>
 800b7d6:	4b65      	ldr	r3, [pc, #404]	; (800b96c <_dtoa_r+0x62c>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	4640      	mov	r0, r8
 800b7dc:	4649      	mov	r1, r9
 800b7de:	f7f4 ff0b 	bl	80005f8 <__aeabi_dmul>
 800b7e2:	4652      	mov	r2, sl
 800b7e4:	465b      	mov	r3, fp
 800b7e6:	f7f5 f98d 	bl	8000b04 <__aeabi_dcmpge>
 800b7ea:	9e03      	ldr	r6, [sp, #12]
 800b7ec:	4637      	mov	r7, r6
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f040 8245 	bne.w	800bc7e <_dtoa_r+0x93e>
 800b7f4:	9d01      	ldr	r5, [sp, #4]
 800b7f6:	2331      	movs	r3, #49	; 0x31
 800b7f8:	f805 3b01 	strb.w	r3, [r5], #1
 800b7fc:	9b00      	ldr	r3, [sp, #0]
 800b7fe:	3301      	adds	r3, #1
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	e240      	b.n	800bc86 <_dtoa_r+0x946>
 800b804:	07f2      	lsls	r2, r6, #31
 800b806:	d505      	bpl.n	800b814 <_dtoa_r+0x4d4>
 800b808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b80c:	f7f4 fef4 	bl	80005f8 <__aeabi_dmul>
 800b810:	3501      	adds	r5, #1
 800b812:	2301      	movs	r3, #1
 800b814:	1076      	asrs	r6, r6, #1
 800b816:	3708      	adds	r7, #8
 800b818:	e777      	b.n	800b70a <_dtoa_r+0x3ca>
 800b81a:	2502      	movs	r5, #2
 800b81c:	e779      	b.n	800b712 <_dtoa_r+0x3d2>
 800b81e:	9f00      	ldr	r7, [sp, #0]
 800b820:	9e03      	ldr	r6, [sp, #12]
 800b822:	e794      	b.n	800b74e <_dtoa_r+0x40e>
 800b824:	9901      	ldr	r1, [sp, #4]
 800b826:	4b4c      	ldr	r3, [pc, #304]	; (800b958 <_dtoa_r+0x618>)
 800b828:	4431      	add	r1, r6
 800b82a:	910d      	str	r1, [sp, #52]	; 0x34
 800b82c:	9908      	ldr	r1, [sp, #32]
 800b82e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b836:	2900      	cmp	r1, #0
 800b838:	d043      	beq.n	800b8c2 <_dtoa_r+0x582>
 800b83a:	494d      	ldr	r1, [pc, #308]	; (800b970 <_dtoa_r+0x630>)
 800b83c:	2000      	movs	r0, #0
 800b83e:	f7f5 f805 	bl	800084c <__aeabi_ddiv>
 800b842:	4652      	mov	r2, sl
 800b844:	465b      	mov	r3, fp
 800b846:	f7f4 fd1f 	bl	8000288 <__aeabi_dsub>
 800b84a:	9d01      	ldr	r5, [sp, #4]
 800b84c:	4682      	mov	sl, r0
 800b84e:	468b      	mov	fp, r1
 800b850:	4649      	mov	r1, r9
 800b852:	4640      	mov	r0, r8
 800b854:	f7f5 f980 	bl	8000b58 <__aeabi_d2iz>
 800b858:	4606      	mov	r6, r0
 800b85a:	f7f4 fe63 	bl	8000524 <__aeabi_i2d>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	4640      	mov	r0, r8
 800b864:	4649      	mov	r1, r9
 800b866:	f7f4 fd0f 	bl	8000288 <__aeabi_dsub>
 800b86a:	3630      	adds	r6, #48	; 0x30
 800b86c:	f805 6b01 	strb.w	r6, [r5], #1
 800b870:	4652      	mov	r2, sl
 800b872:	465b      	mov	r3, fp
 800b874:	4680      	mov	r8, r0
 800b876:	4689      	mov	r9, r1
 800b878:	f7f5 f930 	bl	8000adc <__aeabi_dcmplt>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d163      	bne.n	800b948 <_dtoa_r+0x608>
 800b880:	4642      	mov	r2, r8
 800b882:	464b      	mov	r3, r9
 800b884:	4936      	ldr	r1, [pc, #216]	; (800b960 <_dtoa_r+0x620>)
 800b886:	2000      	movs	r0, #0
 800b888:	f7f4 fcfe 	bl	8000288 <__aeabi_dsub>
 800b88c:	4652      	mov	r2, sl
 800b88e:	465b      	mov	r3, fp
 800b890:	f7f5 f924 	bl	8000adc <__aeabi_dcmplt>
 800b894:	2800      	cmp	r0, #0
 800b896:	f040 80b5 	bne.w	800ba04 <_dtoa_r+0x6c4>
 800b89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b89c:	429d      	cmp	r5, r3
 800b89e:	d081      	beq.n	800b7a4 <_dtoa_r+0x464>
 800b8a0:	4b30      	ldr	r3, [pc, #192]	; (800b964 <_dtoa_r+0x624>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4650      	mov	r0, sl
 800b8a6:	4659      	mov	r1, fp
 800b8a8:	f7f4 fea6 	bl	80005f8 <__aeabi_dmul>
 800b8ac:	4b2d      	ldr	r3, [pc, #180]	; (800b964 <_dtoa_r+0x624>)
 800b8ae:	4682      	mov	sl, r0
 800b8b0:	468b      	mov	fp, r1
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f7f4 fe9e 	bl	80005f8 <__aeabi_dmul>
 800b8bc:	4680      	mov	r8, r0
 800b8be:	4689      	mov	r9, r1
 800b8c0:	e7c6      	b.n	800b850 <_dtoa_r+0x510>
 800b8c2:	4650      	mov	r0, sl
 800b8c4:	4659      	mov	r1, fp
 800b8c6:	f7f4 fe97 	bl	80005f8 <__aeabi_dmul>
 800b8ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8cc:	9d01      	ldr	r5, [sp, #4]
 800b8ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8d0:	4682      	mov	sl, r0
 800b8d2:	468b      	mov	fp, r1
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	f7f5 f93e 	bl	8000b58 <__aeabi_d2iz>
 800b8dc:	4606      	mov	r6, r0
 800b8de:	f7f4 fe21 	bl	8000524 <__aeabi_i2d>
 800b8e2:	3630      	adds	r6, #48	; 0x30
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	f7f4 fccc 	bl	8000288 <__aeabi_dsub>
 800b8f0:	f805 6b01 	strb.w	r6, [r5], #1
 800b8f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8f6:	429d      	cmp	r5, r3
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	4689      	mov	r9, r1
 800b8fc:	f04f 0200 	mov.w	r2, #0
 800b900:	d124      	bne.n	800b94c <_dtoa_r+0x60c>
 800b902:	4b1b      	ldr	r3, [pc, #108]	; (800b970 <_dtoa_r+0x630>)
 800b904:	4650      	mov	r0, sl
 800b906:	4659      	mov	r1, fp
 800b908:	f7f4 fcc0 	bl	800028c <__adddf3>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	4640      	mov	r0, r8
 800b912:	4649      	mov	r1, r9
 800b914:	f7f5 f900 	bl	8000b18 <__aeabi_dcmpgt>
 800b918:	2800      	cmp	r0, #0
 800b91a:	d173      	bne.n	800ba04 <_dtoa_r+0x6c4>
 800b91c:	4652      	mov	r2, sl
 800b91e:	465b      	mov	r3, fp
 800b920:	4913      	ldr	r1, [pc, #76]	; (800b970 <_dtoa_r+0x630>)
 800b922:	2000      	movs	r0, #0
 800b924:	f7f4 fcb0 	bl	8000288 <__aeabi_dsub>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4640      	mov	r0, r8
 800b92e:	4649      	mov	r1, r9
 800b930:	f7f5 f8d4 	bl	8000adc <__aeabi_dcmplt>
 800b934:	2800      	cmp	r0, #0
 800b936:	f43f af35 	beq.w	800b7a4 <_dtoa_r+0x464>
 800b93a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b93c:	1e6b      	subs	r3, r5, #1
 800b93e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b940:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b944:	2b30      	cmp	r3, #48	; 0x30
 800b946:	d0f8      	beq.n	800b93a <_dtoa_r+0x5fa>
 800b948:	9700      	str	r7, [sp, #0]
 800b94a:	e049      	b.n	800b9e0 <_dtoa_r+0x6a0>
 800b94c:	4b05      	ldr	r3, [pc, #20]	; (800b964 <_dtoa_r+0x624>)
 800b94e:	f7f4 fe53 	bl	80005f8 <__aeabi_dmul>
 800b952:	4680      	mov	r8, r0
 800b954:	4689      	mov	r9, r1
 800b956:	e7bd      	b.n	800b8d4 <_dtoa_r+0x594>
 800b958:	0800d678 	.word	0x0800d678
 800b95c:	0800d650 	.word	0x0800d650
 800b960:	3ff00000 	.word	0x3ff00000
 800b964:	40240000 	.word	0x40240000
 800b968:	401c0000 	.word	0x401c0000
 800b96c:	40140000 	.word	0x40140000
 800b970:	3fe00000 	.word	0x3fe00000
 800b974:	9d01      	ldr	r5, [sp, #4]
 800b976:	4656      	mov	r6, sl
 800b978:	465f      	mov	r7, fp
 800b97a:	4642      	mov	r2, r8
 800b97c:	464b      	mov	r3, r9
 800b97e:	4630      	mov	r0, r6
 800b980:	4639      	mov	r1, r7
 800b982:	f7f4 ff63 	bl	800084c <__aeabi_ddiv>
 800b986:	f7f5 f8e7 	bl	8000b58 <__aeabi_d2iz>
 800b98a:	4682      	mov	sl, r0
 800b98c:	f7f4 fdca 	bl	8000524 <__aeabi_i2d>
 800b990:	4642      	mov	r2, r8
 800b992:	464b      	mov	r3, r9
 800b994:	f7f4 fe30 	bl	80005f8 <__aeabi_dmul>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4630      	mov	r0, r6
 800b99e:	4639      	mov	r1, r7
 800b9a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b9a4:	f7f4 fc70 	bl	8000288 <__aeabi_dsub>
 800b9a8:	f805 6b01 	strb.w	r6, [r5], #1
 800b9ac:	9e01      	ldr	r6, [sp, #4]
 800b9ae:	9f03      	ldr	r7, [sp, #12]
 800b9b0:	1bae      	subs	r6, r5, r6
 800b9b2:	42b7      	cmp	r7, r6
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	d135      	bne.n	800ba26 <_dtoa_r+0x6e6>
 800b9ba:	f7f4 fc67 	bl	800028c <__adddf3>
 800b9be:	4642      	mov	r2, r8
 800b9c0:	464b      	mov	r3, r9
 800b9c2:	4606      	mov	r6, r0
 800b9c4:	460f      	mov	r7, r1
 800b9c6:	f7f5 f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 800b9ca:	b9d0      	cbnz	r0, 800ba02 <_dtoa_r+0x6c2>
 800b9cc:	4642      	mov	r2, r8
 800b9ce:	464b      	mov	r3, r9
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f5 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9d8:	b110      	cbz	r0, 800b9e0 <_dtoa_r+0x6a0>
 800b9da:	f01a 0f01 	tst.w	sl, #1
 800b9de:	d110      	bne.n	800ba02 <_dtoa_r+0x6c2>
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	ee18 1a10 	vmov	r1, s16
 800b9e6:	f000 faf7 	bl	800bfd8 <_Bfree>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	9800      	ldr	r0, [sp, #0]
 800b9ee:	702b      	strb	r3, [r5, #0]
 800b9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	6018      	str	r0, [r3, #0]
 800b9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f43f acf1 	beq.w	800b3e0 <_dtoa_r+0xa0>
 800b9fe:	601d      	str	r5, [r3, #0]
 800ba00:	e4ee      	b.n	800b3e0 <_dtoa_r+0xa0>
 800ba02:	9f00      	ldr	r7, [sp, #0]
 800ba04:	462b      	mov	r3, r5
 800ba06:	461d      	mov	r5, r3
 800ba08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba0c:	2a39      	cmp	r2, #57	; 0x39
 800ba0e:	d106      	bne.n	800ba1e <_dtoa_r+0x6de>
 800ba10:	9a01      	ldr	r2, [sp, #4]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d1f7      	bne.n	800ba06 <_dtoa_r+0x6c6>
 800ba16:	9901      	ldr	r1, [sp, #4]
 800ba18:	2230      	movs	r2, #48	; 0x30
 800ba1a:	3701      	adds	r7, #1
 800ba1c:	700a      	strb	r2, [r1, #0]
 800ba1e:	781a      	ldrb	r2, [r3, #0]
 800ba20:	3201      	adds	r2, #1
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	e790      	b.n	800b948 <_dtoa_r+0x608>
 800ba26:	4ba6      	ldr	r3, [pc, #664]	; (800bcc0 <_dtoa_r+0x980>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f7f4 fde5 	bl	80005f8 <__aeabi_dmul>
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2300      	movs	r3, #0
 800ba32:	4606      	mov	r6, r0
 800ba34:	460f      	mov	r7, r1
 800ba36:	f7f5 f847 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d09d      	beq.n	800b97a <_dtoa_r+0x63a>
 800ba3e:	e7cf      	b.n	800b9e0 <_dtoa_r+0x6a0>
 800ba40:	9a08      	ldr	r2, [sp, #32]
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	f000 80d7 	beq.w	800bbf6 <_dtoa_r+0x8b6>
 800ba48:	9a06      	ldr	r2, [sp, #24]
 800ba4a:	2a01      	cmp	r2, #1
 800ba4c:	f300 80ba 	bgt.w	800bbc4 <_dtoa_r+0x884>
 800ba50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba52:	2a00      	cmp	r2, #0
 800ba54:	f000 80b2 	beq.w	800bbbc <_dtoa_r+0x87c>
 800ba58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba5c:	9e07      	ldr	r6, [sp, #28]
 800ba5e:	9d04      	ldr	r5, [sp, #16]
 800ba60:	9a04      	ldr	r2, [sp, #16]
 800ba62:	441a      	add	r2, r3
 800ba64:	9204      	str	r2, [sp, #16]
 800ba66:	9a05      	ldr	r2, [sp, #20]
 800ba68:	2101      	movs	r1, #1
 800ba6a:	441a      	add	r2, r3
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	9205      	str	r2, [sp, #20]
 800ba70:	f000 fb6a 	bl	800c148 <__i2b>
 800ba74:	4607      	mov	r7, r0
 800ba76:	2d00      	cmp	r5, #0
 800ba78:	dd0c      	ble.n	800ba94 <_dtoa_r+0x754>
 800ba7a:	9b05      	ldr	r3, [sp, #20]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	dd09      	ble.n	800ba94 <_dtoa_r+0x754>
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	9a04      	ldr	r2, [sp, #16]
 800ba84:	bfa8      	it	ge
 800ba86:	462b      	movge	r3, r5
 800ba88:	1ad2      	subs	r2, r2, r3
 800ba8a:	9204      	str	r2, [sp, #16]
 800ba8c:	9a05      	ldr	r2, [sp, #20]
 800ba8e:	1aed      	subs	r5, r5, r3
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	9305      	str	r3, [sp, #20]
 800ba94:	9b07      	ldr	r3, [sp, #28]
 800ba96:	b31b      	cbz	r3, 800bae0 <_dtoa_r+0x7a0>
 800ba98:	9b08      	ldr	r3, [sp, #32]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 80af 	beq.w	800bbfe <_dtoa_r+0x8be>
 800baa0:	2e00      	cmp	r6, #0
 800baa2:	dd13      	ble.n	800bacc <_dtoa_r+0x78c>
 800baa4:	4639      	mov	r1, r7
 800baa6:	4632      	mov	r2, r6
 800baa8:	4620      	mov	r0, r4
 800baaa:	f000 fc0d 	bl	800c2c8 <__pow5mult>
 800baae:	ee18 2a10 	vmov	r2, s16
 800bab2:	4601      	mov	r1, r0
 800bab4:	4607      	mov	r7, r0
 800bab6:	4620      	mov	r0, r4
 800bab8:	f000 fb5c 	bl	800c174 <__multiply>
 800babc:	ee18 1a10 	vmov	r1, s16
 800bac0:	4680      	mov	r8, r0
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 fa88 	bl	800bfd8 <_Bfree>
 800bac8:	ee08 8a10 	vmov	s16, r8
 800bacc:	9b07      	ldr	r3, [sp, #28]
 800bace:	1b9a      	subs	r2, r3, r6
 800bad0:	d006      	beq.n	800bae0 <_dtoa_r+0x7a0>
 800bad2:	ee18 1a10 	vmov	r1, s16
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 fbf6 	bl	800c2c8 <__pow5mult>
 800badc:	ee08 0a10 	vmov	s16, r0
 800bae0:	2101      	movs	r1, #1
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 fb30 	bl	800c148 <__i2b>
 800bae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baea:	2b00      	cmp	r3, #0
 800baec:	4606      	mov	r6, r0
 800baee:	f340 8088 	ble.w	800bc02 <_dtoa_r+0x8c2>
 800baf2:	461a      	mov	r2, r3
 800baf4:	4601      	mov	r1, r0
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 fbe6 	bl	800c2c8 <__pow5mult>
 800bafc:	9b06      	ldr	r3, [sp, #24]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	4606      	mov	r6, r0
 800bb02:	f340 8081 	ble.w	800bc08 <_dtoa_r+0x8c8>
 800bb06:	f04f 0800 	mov.w	r8, #0
 800bb0a:	6933      	ldr	r3, [r6, #16]
 800bb0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb10:	6918      	ldr	r0, [r3, #16]
 800bb12:	f000 fac9 	bl	800c0a8 <__hi0bits>
 800bb16:	f1c0 0020 	rsb	r0, r0, #32
 800bb1a:	9b05      	ldr	r3, [sp, #20]
 800bb1c:	4418      	add	r0, r3
 800bb1e:	f010 001f 	ands.w	r0, r0, #31
 800bb22:	f000 8092 	beq.w	800bc4a <_dtoa_r+0x90a>
 800bb26:	f1c0 0320 	rsb	r3, r0, #32
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	f340 808a 	ble.w	800bc44 <_dtoa_r+0x904>
 800bb30:	f1c0 001c 	rsb	r0, r0, #28
 800bb34:	9b04      	ldr	r3, [sp, #16]
 800bb36:	4403      	add	r3, r0
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	9b05      	ldr	r3, [sp, #20]
 800bb3c:	4403      	add	r3, r0
 800bb3e:	4405      	add	r5, r0
 800bb40:	9305      	str	r3, [sp, #20]
 800bb42:	9b04      	ldr	r3, [sp, #16]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	dd07      	ble.n	800bb58 <_dtoa_r+0x818>
 800bb48:	ee18 1a10 	vmov	r1, s16
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f000 fc14 	bl	800c37c <__lshift>
 800bb54:	ee08 0a10 	vmov	s16, r0
 800bb58:	9b05      	ldr	r3, [sp, #20]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	dd05      	ble.n	800bb6a <_dtoa_r+0x82a>
 800bb5e:	4631      	mov	r1, r6
 800bb60:	461a      	mov	r2, r3
 800bb62:	4620      	mov	r0, r4
 800bb64:	f000 fc0a 	bl	800c37c <__lshift>
 800bb68:	4606      	mov	r6, r0
 800bb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d06e      	beq.n	800bc4e <_dtoa_r+0x90e>
 800bb70:	ee18 0a10 	vmov	r0, s16
 800bb74:	4631      	mov	r1, r6
 800bb76:	f000 fc71 	bl	800c45c <__mcmp>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	da67      	bge.n	800bc4e <_dtoa_r+0x90e>
 800bb7e:	9b00      	ldr	r3, [sp, #0]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	ee18 1a10 	vmov	r1, s16
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	220a      	movs	r2, #10
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 fa45 	bl	800c01c <__multadd>
 800bb92:	9b08      	ldr	r3, [sp, #32]
 800bb94:	ee08 0a10 	vmov	s16, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 81b1 	beq.w	800bf00 <_dtoa_r+0xbc0>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	4639      	mov	r1, r7
 800bba2:	220a      	movs	r2, #10
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 fa39 	bl	800c01c <__multadd>
 800bbaa:	9b02      	ldr	r3, [sp, #8]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	4607      	mov	r7, r0
 800bbb0:	f300 808e 	bgt.w	800bcd0 <_dtoa_r+0x990>
 800bbb4:	9b06      	ldr	r3, [sp, #24]
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	dc51      	bgt.n	800bc5e <_dtoa_r+0x91e>
 800bbba:	e089      	b.n	800bcd0 <_dtoa_r+0x990>
 800bbbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bbc2:	e74b      	b.n	800ba5c <_dtoa_r+0x71c>
 800bbc4:	9b03      	ldr	r3, [sp, #12]
 800bbc6:	1e5e      	subs	r6, r3, #1
 800bbc8:	9b07      	ldr	r3, [sp, #28]
 800bbca:	42b3      	cmp	r3, r6
 800bbcc:	bfbf      	itttt	lt
 800bbce:	9b07      	ldrlt	r3, [sp, #28]
 800bbd0:	9607      	strlt	r6, [sp, #28]
 800bbd2:	1af2      	sublt	r2, r6, r3
 800bbd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bbd6:	bfb6      	itet	lt
 800bbd8:	189b      	addlt	r3, r3, r2
 800bbda:	1b9e      	subge	r6, r3, r6
 800bbdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	bfb8      	it	lt
 800bbe2:	2600      	movlt	r6, #0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	bfb7      	itett	lt
 800bbe8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bbec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bbf0:	1a9d      	sublt	r5, r3, r2
 800bbf2:	2300      	movlt	r3, #0
 800bbf4:	e734      	b.n	800ba60 <_dtoa_r+0x720>
 800bbf6:	9e07      	ldr	r6, [sp, #28]
 800bbf8:	9d04      	ldr	r5, [sp, #16]
 800bbfa:	9f08      	ldr	r7, [sp, #32]
 800bbfc:	e73b      	b.n	800ba76 <_dtoa_r+0x736>
 800bbfe:	9a07      	ldr	r2, [sp, #28]
 800bc00:	e767      	b.n	800bad2 <_dtoa_r+0x792>
 800bc02:	9b06      	ldr	r3, [sp, #24]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	dc18      	bgt.n	800bc3a <_dtoa_r+0x8fa>
 800bc08:	f1ba 0f00 	cmp.w	sl, #0
 800bc0c:	d115      	bne.n	800bc3a <_dtoa_r+0x8fa>
 800bc0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc12:	b993      	cbnz	r3, 800bc3a <_dtoa_r+0x8fa>
 800bc14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc18:	0d1b      	lsrs	r3, r3, #20
 800bc1a:	051b      	lsls	r3, r3, #20
 800bc1c:	b183      	cbz	r3, 800bc40 <_dtoa_r+0x900>
 800bc1e:	9b04      	ldr	r3, [sp, #16]
 800bc20:	3301      	adds	r3, #1
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	9b05      	ldr	r3, [sp, #20]
 800bc26:	3301      	adds	r3, #1
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	f04f 0801 	mov.w	r8, #1
 800bc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f47f af6a 	bne.w	800bb0a <_dtoa_r+0x7ca>
 800bc36:	2001      	movs	r0, #1
 800bc38:	e76f      	b.n	800bb1a <_dtoa_r+0x7da>
 800bc3a:	f04f 0800 	mov.w	r8, #0
 800bc3e:	e7f6      	b.n	800bc2e <_dtoa_r+0x8ee>
 800bc40:	4698      	mov	r8, r3
 800bc42:	e7f4      	b.n	800bc2e <_dtoa_r+0x8ee>
 800bc44:	f43f af7d 	beq.w	800bb42 <_dtoa_r+0x802>
 800bc48:	4618      	mov	r0, r3
 800bc4a:	301c      	adds	r0, #28
 800bc4c:	e772      	b.n	800bb34 <_dtoa_r+0x7f4>
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dc37      	bgt.n	800bcc4 <_dtoa_r+0x984>
 800bc54:	9b06      	ldr	r3, [sp, #24]
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	dd34      	ble.n	800bcc4 <_dtoa_r+0x984>
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	9302      	str	r3, [sp, #8]
 800bc5e:	9b02      	ldr	r3, [sp, #8]
 800bc60:	b96b      	cbnz	r3, 800bc7e <_dtoa_r+0x93e>
 800bc62:	4631      	mov	r1, r6
 800bc64:	2205      	movs	r2, #5
 800bc66:	4620      	mov	r0, r4
 800bc68:	f000 f9d8 	bl	800c01c <__multadd>
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	4606      	mov	r6, r0
 800bc70:	ee18 0a10 	vmov	r0, s16
 800bc74:	f000 fbf2 	bl	800c45c <__mcmp>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	f73f adbb 	bgt.w	800b7f4 <_dtoa_r+0x4b4>
 800bc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc80:	9d01      	ldr	r5, [sp, #4]
 800bc82:	43db      	mvns	r3, r3
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	f04f 0800 	mov.w	r8, #0
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f000 f9a3 	bl	800bfd8 <_Bfree>
 800bc92:	2f00      	cmp	r7, #0
 800bc94:	f43f aea4 	beq.w	800b9e0 <_dtoa_r+0x6a0>
 800bc98:	f1b8 0f00 	cmp.w	r8, #0
 800bc9c:	d005      	beq.n	800bcaa <_dtoa_r+0x96a>
 800bc9e:	45b8      	cmp	r8, r7
 800bca0:	d003      	beq.n	800bcaa <_dtoa_r+0x96a>
 800bca2:	4641      	mov	r1, r8
 800bca4:	4620      	mov	r0, r4
 800bca6:	f000 f997 	bl	800bfd8 <_Bfree>
 800bcaa:	4639      	mov	r1, r7
 800bcac:	4620      	mov	r0, r4
 800bcae:	f000 f993 	bl	800bfd8 <_Bfree>
 800bcb2:	e695      	b.n	800b9e0 <_dtoa_r+0x6a0>
 800bcb4:	2600      	movs	r6, #0
 800bcb6:	4637      	mov	r7, r6
 800bcb8:	e7e1      	b.n	800bc7e <_dtoa_r+0x93e>
 800bcba:	9700      	str	r7, [sp, #0]
 800bcbc:	4637      	mov	r7, r6
 800bcbe:	e599      	b.n	800b7f4 <_dtoa_r+0x4b4>
 800bcc0:	40240000 	.word	0x40240000
 800bcc4:	9b08      	ldr	r3, [sp, #32]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f000 80ca 	beq.w	800be60 <_dtoa_r+0xb20>
 800bccc:	9b03      	ldr	r3, [sp, #12]
 800bcce:	9302      	str	r3, [sp, #8]
 800bcd0:	2d00      	cmp	r5, #0
 800bcd2:	dd05      	ble.n	800bce0 <_dtoa_r+0x9a0>
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	462a      	mov	r2, r5
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 fb4f 	bl	800c37c <__lshift>
 800bcde:	4607      	mov	r7, r0
 800bce0:	f1b8 0f00 	cmp.w	r8, #0
 800bce4:	d05b      	beq.n	800bd9e <_dtoa_r+0xa5e>
 800bce6:	6879      	ldr	r1, [r7, #4]
 800bce8:	4620      	mov	r0, r4
 800bcea:	f000 f935 	bl	800bf58 <_Balloc>
 800bcee:	4605      	mov	r5, r0
 800bcf0:	b928      	cbnz	r0, 800bcfe <_dtoa_r+0x9be>
 800bcf2:	4b87      	ldr	r3, [pc, #540]	; (800bf10 <_dtoa_r+0xbd0>)
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcfa:	f7ff bb3b 	b.w	800b374 <_dtoa_r+0x34>
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	3202      	adds	r2, #2
 800bd02:	0092      	lsls	r2, r2, #2
 800bd04:	f107 010c 	add.w	r1, r7, #12
 800bd08:	300c      	adds	r0, #12
 800bd0a:	f000 f90b 	bl	800bf24 <memcpy>
 800bd0e:	2201      	movs	r2, #1
 800bd10:	4629      	mov	r1, r5
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 fb32 	bl	800c37c <__lshift>
 800bd18:	9b01      	ldr	r3, [sp, #4]
 800bd1a:	f103 0901 	add.w	r9, r3, #1
 800bd1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bd22:	4413      	add	r3, r2
 800bd24:	9305      	str	r3, [sp, #20]
 800bd26:	f00a 0301 	and.w	r3, sl, #1
 800bd2a:	46b8      	mov	r8, r7
 800bd2c:	9304      	str	r3, [sp, #16]
 800bd2e:	4607      	mov	r7, r0
 800bd30:	4631      	mov	r1, r6
 800bd32:	ee18 0a10 	vmov	r0, s16
 800bd36:	f7ff fa76 	bl	800b226 <quorem>
 800bd3a:	4641      	mov	r1, r8
 800bd3c:	9002      	str	r0, [sp, #8]
 800bd3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd42:	ee18 0a10 	vmov	r0, s16
 800bd46:	f000 fb89 	bl	800c45c <__mcmp>
 800bd4a:	463a      	mov	r2, r7
 800bd4c:	9003      	str	r0, [sp, #12]
 800bd4e:	4631      	mov	r1, r6
 800bd50:	4620      	mov	r0, r4
 800bd52:	f000 fb9f 	bl	800c494 <__mdiff>
 800bd56:	68c2      	ldr	r2, [r0, #12]
 800bd58:	f109 3bff 	add.w	fp, r9, #4294967295
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	bb02      	cbnz	r2, 800bda2 <_dtoa_r+0xa62>
 800bd60:	4601      	mov	r1, r0
 800bd62:	ee18 0a10 	vmov	r0, s16
 800bd66:	f000 fb79 	bl	800c45c <__mcmp>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	4620      	mov	r0, r4
 800bd70:	9207      	str	r2, [sp, #28]
 800bd72:	f000 f931 	bl	800bfd8 <_Bfree>
 800bd76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd7a:	ea43 0102 	orr.w	r1, r3, r2
 800bd7e:	9b04      	ldr	r3, [sp, #16]
 800bd80:	430b      	orrs	r3, r1
 800bd82:	464d      	mov	r5, r9
 800bd84:	d10f      	bne.n	800bda6 <_dtoa_r+0xa66>
 800bd86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd8a:	d02a      	beq.n	800bde2 <_dtoa_r+0xaa2>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dd02      	ble.n	800bd98 <_dtoa_r+0xa58>
 800bd92:	9b02      	ldr	r3, [sp, #8]
 800bd94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd98:	f88b a000 	strb.w	sl, [fp]
 800bd9c:	e775      	b.n	800bc8a <_dtoa_r+0x94a>
 800bd9e:	4638      	mov	r0, r7
 800bda0:	e7ba      	b.n	800bd18 <_dtoa_r+0x9d8>
 800bda2:	2201      	movs	r2, #1
 800bda4:	e7e2      	b.n	800bd6c <_dtoa_r+0xa2c>
 800bda6:	9b03      	ldr	r3, [sp, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	db04      	blt.n	800bdb6 <_dtoa_r+0xa76>
 800bdac:	9906      	ldr	r1, [sp, #24]
 800bdae:	430b      	orrs	r3, r1
 800bdb0:	9904      	ldr	r1, [sp, #16]
 800bdb2:	430b      	orrs	r3, r1
 800bdb4:	d122      	bne.n	800bdfc <_dtoa_r+0xabc>
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	ddee      	ble.n	800bd98 <_dtoa_r+0xa58>
 800bdba:	ee18 1a10 	vmov	r1, s16
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f000 fadb 	bl	800c37c <__lshift>
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	ee08 0a10 	vmov	s16, r0
 800bdcc:	f000 fb46 	bl	800c45c <__mcmp>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	dc03      	bgt.n	800bddc <_dtoa_r+0xa9c>
 800bdd4:	d1e0      	bne.n	800bd98 <_dtoa_r+0xa58>
 800bdd6:	f01a 0f01 	tst.w	sl, #1
 800bdda:	d0dd      	beq.n	800bd98 <_dtoa_r+0xa58>
 800bddc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bde0:	d1d7      	bne.n	800bd92 <_dtoa_r+0xa52>
 800bde2:	2339      	movs	r3, #57	; 0x39
 800bde4:	f88b 3000 	strb.w	r3, [fp]
 800bde8:	462b      	mov	r3, r5
 800bdea:	461d      	mov	r5, r3
 800bdec:	3b01      	subs	r3, #1
 800bdee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdf2:	2a39      	cmp	r2, #57	; 0x39
 800bdf4:	d071      	beq.n	800beda <_dtoa_r+0xb9a>
 800bdf6:	3201      	adds	r2, #1
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	e746      	b.n	800bc8a <_dtoa_r+0x94a>
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	dd07      	ble.n	800be10 <_dtoa_r+0xad0>
 800be00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be04:	d0ed      	beq.n	800bde2 <_dtoa_r+0xaa2>
 800be06:	f10a 0301 	add.w	r3, sl, #1
 800be0a:	f88b 3000 	strb.w	r3, [fp]
 800be0e:	e73c      	b.n	800bc8a <_dtoa_r+0x94a>
 800be10:	9b05      	ldr	r3, [sp, #20]
 800be12:	f809 ac01 	strb.w	sl, [r9, #-1]
 800be16:	4599      	cmp	r9, r3
 800be18:	d047      	beq.n	800beaa <_dtoa_r+0xb6a>
 800be1a:	ee18 1a10 	vmov	r1, s16
 800be1e:	2300      	movs	r3, #0
 800be20:	220a      	movs	r2, #10
 800be22:	4620      	mov	r0, r4
 800be24:	f000 f8fa 	bl	800c01c <__multadd>
 800be28:	45b8      	cmp	r8, r7
 800be2a:	ee08 0a10 	vmov	s16, r0
 800be2e:	f04f 0300 	mov.w	r3, #0
 800be32:	f04f 020a 	mov.w	r2, #10
 800be36:	4641      	mov	r1, r8
 800be38:	4620      	mov	r0, r4
 800be3a:	d106      	bne.n	800be4a <_dtoa_r+0xb0a>
 800be3c:	f000 f8ee 	bl	800c01c <__multadd>
 800be40:	4680      	mov	r8, r0
 800be42:	4607      	mov	r7, r0
 800be44:	f109 0901 	add.w	r9, r9, #1
 800be48:	e772      	b.n	800bd30 <_dtoa_r+0x9f0>
 800be4a:	f000 f8e7 	bl	800c01c <__multadd>
 800be4e:	4639      	mov	r1, r7
 800be50:	4680      	mov	r8, r0
 800be52:	2300      	movs	r3, #0
 800be54:	220a      	movs	r2, #10
 800be56:	4620      	mov	r0, r4
 800be58:	f000 f8e0 	bl	800c01c <__multadd>
 800be5c:	4607      	mov	r7, r0
 800be5e:	e7f1      	b.n	800be44 <_dtoa_r+0xb04>
 800be60:	9b03      	ldr	r3, [sp, #12]
 800be62:	9302      	str	r3, [sp, #8]
 800be64:	9d01      	ldr	r5, [sp, #4]
 800be66:	ee18 0a10 	vmov	r0, s16
 800be6a:	4631      	mov	r1, r6
 800be6c:	f7ff f9db 	bl	800b226 <quorem>
 800be70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be74:	9b01      	ldr	r3, [sp, #4]
 800be76:	f805 ab01 	strb.w	sl, [r5], #1
 800be7a:	1aea      	subs	r2, r5, r3
 800be7c:	9b02      	ldr	r3, [sp, #8]
 800be7e:	4293      	cmp	r3, r2
 800be80:	dd09      	ble.n	800be96 <_dtoa_r+0xb56>
 800be82:	ee18 1a10 	vmov	r1, s16
 800be86:	2300      	movs	r3, #0
 800be88:	220a      	movs	r2, #10
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 f8c6 	bl	800c01c <__multadd>
 800be90:	ee08 0a10 	vmov	s16, r0
 800be94:	e7e7      	b.n	800be66 <_dtoa_r+0xb26>
 800be96:	9b02      	ldr	r3, [sp, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	bfc8      	it	gt
 800be9c:	461d      	movgt	r5, r3
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	bfd8      	it	le
 800bea2:	2501      	movle	r5, #1
 800bea4:	441d      	add	r5, r3
 800bea6:	f04f 0800 	mov.w	r8, #0
 800beaa:	ee18 1a10 	vmov	r1, s16
 800beae:	2201      	movs	r2, #1
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 fa63 	bl	800c37c <__lshift>
 800beb6:	4631      	mov	r1, r6
 800beb8:	ee08 0a10 	vmov	s16, r0
 800bebc:	f000 face 	bl	800c45c <__mcmp>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	dc91      	bgt.n	800bde8 <_dtoa_r+0xaa8>
 800bec4:	d102      	bne.n	800becc <_dtoa_r+0xb8c>
 800bec6:	f01a 0f01 	tst.w	sl, #1
 800beca:	d18d      	bne.n	800bde8 <_dtoa_r+0xaa8>
 800becc:	462b      	mov	r3, r5
 800bece:	461d      	mov	r5, r3
 800bed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bed4:	2a30      	cmp	r2, #48	; 0x30
 800bed6:	d0fa      	beq.n	800bece <_dtoa_r+0xb8e>
 800bed8:	e6d7      	b.n	800bc8a <_dtoa_r+0x94a>
 800beda:	9a01      	ldr	r2, [sp, #4]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d184      	bne.n	800bdea <_dtoa_r+0xaaa>
 800bee0:	9b00      	ldr	r3, [sp, #0]
 800bee2:	3301      	adds	r3, #1
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	2331      	movs	r3, #49	; 0x31
 800bee8:	7013      	strb	r3, [r2, #0]
 800beea:	e6ce      	b.n	800bc8a <_dtoa_r+0x94a>
 800beec:	4b09      	ldr	r3, [pc, #36]	; (800bf14 <_dtoa_r+0xbd4>)
 800beee:	f7ff ba95 	b.w	800b41c <_dtoa_r+0xdc>
 800bef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f47f aa6e 	bne.w	800b3d6 <_dtoa_r+0x96>
 800befa:	4b07      	ldr	r3, [pc, #28]	; (800bf18 <_dtoa_r+0xbd8>)
 800befc:	f7ff ba8e 	b.w	800b41c <_dtoa_r+0xdc>
 800bf00:	9b02      	ldr	r3, [sp, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	dcae      	bgt.n	800be64 <_dtoa_r+0xb24>
 800bf06:	9b06      	ldr	r3, [sp, #24]
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	f73f aea8 	bgt.w	800bc5e <_dtoa_r+0x91e>
 800bf0e:	e7a9      	b.n	800be64 <_dtoa_r+0xb24>
 800bf10:	0800d5df 	.word	0x0800d5df
 800bf14:	0800d53c 	.word	0x0800d53c
 800bf18:	0800d560 	.word	0x0800d560

0800bf1c <_localeconv_r>:
 800bf1c:	4800      	ldr	r0, [pc, #0]	; (800bf20 <_localeconv_r+0x4>)
 800bf1e:	4770      	bx	lr
 800bf20:	20000180 	.word	0x20000180

0800bf24 <memcpy>:
 800bf24:	440a      	add	r2, r1
 800bf26:	4291      	cmp	r1, r2
 800bf28:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf2c:	d100      	bne.n	800bf30 <memcpy+0xc>
 800bf2e:	4770      	bx	lr
 800bf30:	b510      	push	{r4, lr}
 800bf32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf3a:	4291      	cmp	r1, r2
 800bf3c:	d1f9      	bne.n	800bf32 <memcpy+0xe>
 800bf3e:	bd10      	pop	{r4, pc}

0800bf40 <__malloc_lock>:
 800bf40:	4801      	ldr	r0, [pc, #4]	; (800bf48 <__malloc_lock+0x8>)
 800bf42:	f000 bd30 	b.w	800c9a6 <__retarget_lock_acquire_recursive>
 800bf46:	bf00      	nop
 800bf48:	20000ac4 	.word	0x20000ac4

0800bf4c <__malloc_unlock>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	; (800bf54 <__malloc_unlock+0x8>)
 800bf4e:	f000 bd2b 	b.w	800c9a8 <__retarget_lock_release_recursive>
 800bf52:	bf00      	nop
 800bf54:	20000ac4 	.word	0x20000ac4

0800bf58 <_Balloc>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	460d      	mov	r5, r1
 800bf60:	b976      	cbnz	r6, 800bf80 <_Balloc+0x28>
 800bf62:	2010      	movs	r0, #16
 800bf64:	f7fe fbbe 	bl	800a6e4 <malloc>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	6260      	str	r0, [r4, #36]	; 0x24
 800bf6c:	b920      	cbnz	r0, 800bf78 <_Balloc+0x20>
 800bf6e:	4b18      	ldr	r3, [pc, #96]	; (800bfd0 <_Balloc+0x78>)
 800bf70:	4818      	ldr	r0, [pc, #96]	; (800bfd4 <_Balloc+0x7c>)
 800bf72:	2166      	movs	r1, #102	; 0x66
 800bf74:	f000 fce6 	bl	800c944 <__assert_func>
 800bf78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf7c:	6006      	str	r6, [r0, #0]
 800bf7e:	60c6      	str	r6, [r0, #12]
 800bf80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf82:	68f3      	ldr	r3, [r6, #12]
 800bf84:	b183      	cbz	r3, 800bfa8 <_Balloc+0x50>
 800bf86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf8e:	b9b8      	cbnz	r0, 800bfc0 <_Balloc+0x68>
 800bf90:	2101      	movs	r1, #1
 800bf92:	fa01 f605 	lsl.w	r6, r1, r5
 800bf96:	1d72      	adds	r2, r6, #5
 800bf98:	0092      	lsls	r2, r2, #2
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 fb60 	bl	800c660 <_calloc_r>
 800bfa0:	b160      	cbz	r0, 800bfbc <_Balloc+0x64>
 800bfa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfa6:	e00e      	b.n	800bfc6 <_Balloc+0x6e>
 800bfa8:	2221      	movs	r2, #33	; 0x21
 800bfaa:	2104      	movs	r1, #4
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fb57 	bl	800c660 <_calloc_r>
 800bfb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfb4:	60f0      	str	r0, [r6, #12]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e4      	bne.n	800bf86 <_Balloc+0x2e>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	bd70      	pop	{r4, r5, r6, pc}
 800bfc0:	6802      	ldr	r2, [r0, #0]
 800bfc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfcc:	e7f7      	b.n	800bfbe <_Balloc+0x66>
 800bfce:	bf00      	nop
 800bfd0:	0800d56d 	.word	0x0800d56d
 800bfd4:	0800d5f0 	.word	0x0800d5f0

0800bfd8 <_Bfree>:
 800bfd8:	b570      	push	{r4, r5, r6, lr}
 800bfda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfdc:	4605      	mov	r5, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	b976      	cbnz	r6, 800c000 <_Bfree+0x28>
 800bfe2:	2010      	movs	r0, #16
 800bfe4:	f7fe fb7e 	bl	800a6e4 <malloc>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	6268      	str	r0, [r5, #36]	; 0x24
 800bfec:	b920      	cbnz	r0, 800bff8 <_Bfree+0x20>
 800bfee:	4b09      	ldr	r3, [pc, #36]	; (800c014 <_Bfree+0x3c>)
 800bff0:	4809      	ldr	r0, [pc, #36]	; (800c018 <_Bfree+0x40>)
 800bff2:	218a      	movs	r1, #138	; 0x8a
 800bff4:	f000 fca6 	bl	800c944 <__assert_func>
 800bff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bffc:	6006      	str	r6, [r0, #0]
 800bffe:	60c6      	str	r6, [r0, #12]
 800c000:	b13c      	cbz	r4, 800c012 <_Bfree+0x3a>
 800c002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c004:	6862      	ldr	r2, [r4, #4]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c00c:	6021      	str	r1, [r4, #0]
 800c00e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	0800d56d 	.word	0x0800d56d
 800c018:	0800d5f0 	.word	0x0800d5f0

0800c01c <__multadd>:
 800c01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c020:	690d      	ldr	r5, [r1, #16]
 800c022:	4607      	mov	r7, r0
 800c024:	460c      	mov	r4, r1
 800c026:	461e      	mov	r6, r3
 800c028:	f101 0c14 	add.w	ip, r1, #20
 800c02c:	2000      	movs	r0, #0
 800c02e:	f8dc 3000 	ldr.w	r3, [ip]
 800c032:	b299      	uxth	r1, r3
 800c034:	fb02 6101 	mla	r1, r2, r1, r6
 800c038:	0c1e      	lsrs	r6, r3, #16
 800c03a:	0c0b      	lsrs	r3, r1, #16
 800c03c:	fb02 3306 	mla	r3, r2, r6, r3
 800c040:	b289      	uxth	r1, r1
 800c042:	3001      	adds	r0, #1
 800c044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c048:	4285      	cmp	r5, r0
 800c04a:	f84c 1b04 	str.w	r1, [ip], #4
 800c04e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c052:	dcec      	bgt.n	800c02e <__multadd+0x12>
 800c054:	b30e      	cbz	r6, 800c09a <__multadd+0x7e>
 800c056:	68a3      	ldr	r3, [r4, #8]
 800c058:	42ab      	cmp	r3, r5
 800c05a:	dc19      	bgt.n	800c090 <__multadd+0x74>
 800c05c:	6861      	ldr	r1, [r4, #4]
 800c05e:	4638      	mov	r0, r7
 800c060:	3101      	adds	r1, #1
 800c062:	f7ff ff79 	bl	800bf58 <_Balloc>
 800c066:	4680      	mov	r8, r0
 800c068:	b928      	cbnz	r0, 800c076 <__multadd+0x5a>
 800c06a:	4602      	mov	r2, r0
 800c06c:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <__multadd+0x84>)
 800c06e:	480d      	ldr	r0, [pc, #52]	; (800c0a4 <__multadd+0x88>)
 800c070:	21b5      	movs	r1, #181	; 0xb5
 800c072:	f000 fc67 	bl	800c944 <__assert_func>
 800c076:	6922      	ldr	r2, [r4, #16]
 800c078:	3202      	adds	r2, #2
 800c07a:	f104 010c 	add.w	r1, r4, #12
 800c07e:	0092      	lsls	r2, r2, #2
 800c080:	300c      	adds	r0, #12
 800c082:	f7ff ff4f 	bl	800bf24 <memcpy>
 800c086:	4621      	mov	r1, r4
 800c088:	4638      	mov	r0, r7
 800c08a:	f7ff ffa5 	bl	800bfd8 <_Bfree>
 800c08e:	4644      	mov	r4, r8
 800c090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c094:	3501      	adds	r5, #1
 800c096:	615e      	str	r6, [r3, #20]
 800c098:	6125      	str	r5, [r4, #16]
 800c09a:	4620      	mov	r0, r4
 800c09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a0:	0800d5df 	.word	0x0800d5df
 800c0a4:	0800d5f0 	.word	0x0800d5f0

0800c0a8 <__hi0bits>:
 800c0a8:	0c03      	lsrs	r3, r0, #16
 800c0aa:	041b      	lsls	r3, r3, #16
 800c0ac:	b9d3      	cbnz	r3, 800c0e4 <__hi0bits+0x3c>
 800c0ae:	0400      	lsls	r0, r0, #16
 800c0b0:	2310      	movs	r3, #16
 800c0b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0b6:	bf04      	itt	eq
 800c0b8:	0200      	lsleq	r0, r0, #8
 800c0ba:	3308      	addeq	r3, #8
 800c0bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0c0:	bf04      	itt	eq
 800c0c2:	0100      	lsleq	r0, r0, #4
 800c0c4:	3304      	addeq	r3, #4
 800c0c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0ca:	bf04      	itt	eq
 800c0cc:	0080      	lsleq	r0, r0, #2
 800c0ce:	3302      	addeq	r3, #2
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	db05      	blt.n	800c0e0 <__hi0bits+0x38>
 800c0d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0d8:	f103 0301 	add.w	r3, r3, #1
 800c0dc:	bf08      	it	eq
 800c0de:	2320      	moveq	r3, #32
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	4770      	bx	lr
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	e7e4      	b.n	800c0b2 <__hi0bits+0xa>

0800c0e8 <__lo0bits>:
 800c0e8:	6803      	ldr	r3, [r0, #0]
 800c0ea:	f013 0207 	ands.w	r2, r3, #7
 800c0ee:	4601      	mov	r1, r0
 800c0f0:	d00b      	beq.n	800c10a <__lo0bits+0x22>
 800c0f2:	07da      	lsls	r2, r3, #31
 800c0f4:	d423      	bmi.n	800c13e <__lo0bits+0x56>
 800c0f6:	0798      	lsls	r0, r3, #30
 800c0f8:	bf49      	itett	mi
 800c0fa:	085b      	lsrmi	r3, r3, #1
 800c0fc:	089b      	lsrpl	r3, r3, #2
 800c0fe:	2001      	movmi	r0, #1
 800c100:	600b      	strmi	r3, [r1, #0]
 800c102:	bf5c      	itt	pl
 800c104:	600b      	strpl	r3, [r1, #0]
 800c106:	2002      	movpl	r0, #2
 800c108:	4770      	bx	lr
 800c10a:	b298      	uxth	r0, r3
 800c10c:	b9a8      	cbnz	r0, 800c13a <__lo0bits+0x52>
 800c10e:	0c1b      	lsrs	r3, r3, #16
 800c110:	2010      	movs	r0, #16
 800c112:	b2da      	uxtb	r2, r3
 800c114:	b90a      	cbnz	r2, 800c11a <__lo0bits+0x32>
 800c116:	3008      	adds	r0, #8
 800c118:	0a1b      	lsrs	r3, r3, #8
 800c11a:	071a      	lsls	r2, r3, #28
 800c11c:	bf04      	itt	eq
 800c11e:	091b      	lsreq	r3, r3, #4
 800c120:	3004      	addeq	r0, #4
 800c122:	079a      	lsls	r2, r3, #30
 800c124:	bf04      	itt	eq
 800c126:	089b      	lsreq	r3, r3, #2
 800c128:	3002      	addeq	r0, #2
 800c12a:	07da      	lsls	r2, r3, #31
 800c12c:	d403      	bmi.n	800c136 <__lo0bits+0x4e>
 800c12e:	085b      	lsrs	r3, r3, #1
 800c130:	f100 0001 	add.w	r0, r0, #1
 800c134:	d005      	beq.n	800c142 <__lo0bits+0x5a>
 800c136:	600b      	str	r3, [r1, #0]
 800c138:	4770      	bx	lr
 800c13a:	4610      	mov	r0, r2
 800c13c:	e7e9      	b.n	800c112 <__lo0bits+0x2a>
 800c13e:	2000      	movs	r0, #0
 800c140:	4770      	bx	lr
 800c142:	2020      	movs	r0, #32
 800c144:	4770      	bx	lr
	...

0800c148 <__i2b>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	460c      	mov	r4, r1
 800c14c:	2101      	movs	r1, #1
 800c14e:	f7ff ff03 	bl	800bf58 <_Balloc>
 800c152:	4602      	mov	r2, r0
 800c154:	b928      	cbnz	r0, 800c162 <__i2b+0x1a>
 800c156:	4b05      	ldr	r3, [pc, #20]	; (800c16c <__i2b+0x24>)
 800c158:	4805      	ldr	r0, [pc, #20]	; (800c170 <__i2b+0x28>)
 800c15a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c15e:	f000 fbf1 	bl	800c944 <__assert_func>
 800c162:	2301      	movs	r3, #1
 800c164:	6144      	str	r4, [r0, #20]
 800c166:	6103      	str	r3, [r0, #16]
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	bf00      	nop
 800c16c:	0800d5df 	.word	0x0800d5df
 800c170:	0800d5f0 	.word	0x0800d5f0

0800c174 <__multiply>:
 800c174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c178:	4691      	mov	r9, r2
 800c17a:	690a      	ldr	r2, [r1, #16]
 800c17c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c180:	429a      	cmp	r2, r3
 800c182:	bfb8      	it	lt
 800c184:	460b      	movlt	r3, r1
 800c186:	460c      	mov	r4, r1
 800c188:	bfbc      	itt	lt
 800c18a:	464c      	movlt	r4, r9
 800c18c:	4699      	movlt	r9, r3
 800c18e:	6927      	ldr	r7, [r4, #16]
 800c190:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c194:	68a3      	ldr	r3, [r4, #8]
 800c196:	6861      	ldr	r1, [r4, #4]
 800c198:	eb07 060a 	add.w	r6, r7, sl
 800c19c:	42b3      	cmp	r3, r6
 800c19e:	b085      	sub	sp, #20
 800c1a0:	bfb8      	it	lt
 800c1a2:	3101      	addlt	r1, #1
 800c1a4:	f7ff fed8 	bl	800bf58 <_Balloc>
 800c1a8:	b930      	cbnz	r0, 800c1b8 <__multiply+0x44>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	4b44      	ldr	r3, [pc, #272]	; (800c2c0 <__multiply+0x14c>)
 800c1ae:	4845      	ldr	r0, [pc, #276]	; (800c2c4 <__multiply+0x150>)
 800c1b0:	f240 115d 	movw	r1, #349	; 0x15d
 800c1b4:	f000 fbc6 	bl	800c944 <__assert_func>
 800c1b8:	f100 0514 	add.w	r5, r0, #20
 800c1bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1c0:	462b      	mov	r3, r5
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	4543      	cmp	r3, r8
 800c1c6:	d321      	bcc.n	800c20c <__multiply+0x98>
 800c1c8:	f104 0314 	add.w	r3, r4, #20
 800c1cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1d0:	f109 0314 	add.w	r3, r9, #20
 800c1d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c1d8:	9202      	str	r2, [sp, #8]
 800c1da:	1b3a      	subs	r2, r7, r4
 800c1dc:	3a15      	subs	r2, #21
 800c1de:	f022 0203 	bic.w	r2, r2, #3
 800c1e2:	3204      	adds	r2, #4
 800c1e4:	f104 0115 	add.w	r1, r4, #21
 800c1e8:	428f      	cmp	r7, r1
 800c1ea:	bf38      	it	cc
 800c1ec:	2204      	movcc	r2, #4
 800c1ee:	9201      	str	r2, [sp, #4]
 800c1f0:	9a02      	ldr	r2, [sp, #8]
 800c1f2:	9303      	str	r3, [sp, #12]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d80c      	bhi.n	800c212 <__multiply+0x9e>
 800c1f8:	2e00      	cmp	r6, #0
 800c1fa:	dd03      	ble.n	800c204 <__multiply+0x90>
 800c1fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c200:	2b00      	cmp	r3, #0
 800c202:	d05a      	beq.n	800c2ba <__multiply+0x146>
 800c204:	6106      	str	r6, [r0, #16]
 800c206:	b005      	add	sp, #20
 800c208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20c:	f843 2b04 	str.w	r2, [r3], #4
 800c210:	e7d8      	b.n	800c1c4 <__multiply+0x50>
 800c212:	f8b3 a000 	ldrh.w	sl, [r3]
 800c216:	f1ba 0f00 	cmp.w	sl, #0
 800c21a:	d024      	beq.n	800c266 <__multiply+0xf2>
 800c21c:	f104 0e14 	add.w	lr, r4, #20
 800c220:	46a9      	mov	r9, r5
 800c222:	f04f 0c00 	mov.w	ip, #0
 800c226:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c22a:	f8d9 1000 	ldr.w	r1, [r9]
 800c22e:	fa1f fb82 	uxth.w	fp, r2
 800c232:	b289      	uxth	r1, r1
 800c234:	fb0a 110b 	mla	r1, sl, fp, r1
 800c238:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c23c:	f8d9 2000 	ldr.w	r2, [r9]
 800c240:	4461      	add	r1, ip
 800c242:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c246:	fb0a c20b 	mla	r2, sl, fp, ip
 800c24a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c24e:	b289      	uxth	r1, r1
 800c250:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c254:	4577      	cmp	r7, lr
 800c256:	f849 1b04 	str.w	r1, [r9], #4
 800c25a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c25e:	d8e2      	bhi.n	800c226 <__multiply+0xb2>
 800c260:	9a01      	ldr	r2, [sp, #4]
 800c262:	f845 c002 	str.w	ip, [r5, r2]
 800c266:	9a03      	ldr	r2, [sp, #12]
 800c268:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c26c:	3304      	adds	r3, #4
 800c26e:	f1b9 0f00 	cmp.w	r9, #0
 800c272:	d020      	beq.n	800c2b6 <__multiply+0x142>
 800c274:	6829      	ldr	r1, [r5, #0]
 800c276:	f104 0c14 	add.w	ip, r4, #20
 800c27a:	46ae      	mov	lr, r5
 800c27c:	f04f 0a00 	mov.w	sl, #0
 800c280:	f8bc b000 	ldrh.w	fp, [ip]
 800c284:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c288:	fb09 220b 	mla	r2, r9, fp, r2
 800c28c:	4492      	add	sl, r2
 800c28e:	b289      	uxth	r1, r1
 800c290:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c294:	f84e 1b04 	str.w	r1, [lr], #4
 800c298:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c29c:	f8be 1000 	ldrh.w	r1, [lr]
 800c2a0:	0c12      	lsrs	r2, r2, #16
 800c2a2:	fb09 1102 	mla	r1, r9, r2, r1
 800c2a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2aa:	4567      	cmp	r7, ip
 800c2ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2b0:	d8e6      	bhi.n	800c280 <__multiply+0x10c>
 800c2b2:	9a01      	ldr	r2, [sp, #4]
 800c2b4:	50a9      	str	r1, [r5, r2]
 800c2b6:	3504      	adds	r5, #4
 800c2b8:	e79a      	b.n	800c1f0 <__multiply+0x7c>
 800c2ba:	3e01      	subs	r6, #1
 800c2bc:	e79c      	b.n	800c1f8 <__multiply+0x84>
 800c2be:	bf00      	nop
 800c2c0:	0800d5df 	.word	0x0800d5df
 800c2c4:	0800d5f0 	.word	0x0800d5f0

0800c2c8 <__pow5mult>:
 800c2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2cc:	4615      	mov	r5, r2
 800c2ce:	f012 0203 	ands.w	r2, r2, #3
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	460f      	mov	r7, r1
 800c2d6:	d007      	beq.n	800c2e8 <__pow5mult+0x20>
 800c2d8:	4c25      	ldr	r4, [pc, #148]	; (800c370 <__pow5mult+0xa8>)
 800c2da:	3a01      	subs	r2, #1
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2e2:	f7ff fe9b 	bl	800c01c <__multadd>
 800c2e6:	4607      	mov	r7, r0
 800c2e8:	10ad      	asrs	r5, r5, #2
 800c2ea:	d03d      	beq.n	800c368 <__pow5mult+0xa0>
 800c2ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c2ee:	b97c      	cbnz	r4, 800c310 <__pow5mult+0x48>
 800c2f0:	2010      	movs	r0, #16
 800c2f2:	f7fe f9f7 	bl	800a6e4 <malloc>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	6270      	str	r0, [r6, #36]	; 0x24
 800c2fa:	b928      	cbnz	r0, 800c308 <__pow5mult+0x40>
 800c2fc:	4b1d      	ldr	r3, [pc, #116]	; (800c374 <__pow5mult+0xac>)
 800c2fe:	481e      	ldr	r0, [pc, #120]	; (800c378 <__pow5mult+0xb0>)
 800c300:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c304:	f000 fb1e 	bl	800c944 <__assert_func>
 800c308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c30c:	6004      	str	r4, [r0, #0]
 800c30e:	60c4      	str	r4, [r0, #12]
 800c310:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c318:	b94c      	cbnz	r4, 800c32e <__pow5mult+0x66>
 800c31a:	f240 2171 	movw	r1, #625	; 0x271
 800c31e:	4630      	mov	r0, r6
 800c320:	f7ff ff12 	bl	800c148 <__i2b>
 800c324:	2300      	movs	r3, #0
 800c326:	f8c8 0008 	str.w	r0, [r8, #8]
 800c32a:	4604      	mov	r4, r0
 800c32c:	6003      	str	r3, [r0, #0]
 800c32e:	f04f 0900 	mov.w	r9, #0
 800c332:	07eb      	lsls	r3, r5, #31
 800c334:	d50a      	bpl.n	800c34c <__pow5mult+0x84>
 800c336:	4639      	mov	r1, r7
 800c338:	4622      	mov	r2, r4
 800c33a:	4630      	mov	r0, r6
 800c33c:	f7ff ff1a 	bl	800c174 <__multiply>
 800c340:	4639      	mov	r1, r7
 800c342:	4680      	mov	r8, r0
 800c344:	4630      	mov	r0, r6
 800c346:	f7ff fe47 	bl	800bfd8 <_Bfree>
 800c34a:	4647      	mov	r7, r8
 800c34c:	106d      	asrs	r5, r5, #1
 800c34e:	d00b      	beq.n	800c368 <__pow5mult+0xa0>
 800c350:	6820      	ldr	r0, [r4, #0]
 800c352:	b938      	cbnz	r0, 800c364 <__pow5mult+0x9c>
 800c354:	4622      	mov	r2, r4
 800c356:	4621      	mov	r1, r4
 800c358:	4630      	mov	r0, r6
 800c35a:	f7ff ff0b 	bl	800c174 <__multiply>
 800c35e:	6020      	str	r0, [r4, #0]
 800c360:	f8c0 9000 	str.w	r9, [r0]
 800c364:	4604      	mov	r4, r0
 800c366:	e7e4      	b.n	800c332 <__pow5mult+0x6a>
 800c368:	4638      	mov	r0, r7
 800c36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c36e:	bf00      	nop
 800c370:	0800d740 	.word	0x0800d740
 800c374:	0800d56d 	.word	0x0800d56d
 800c378:	0800d5f0 	.word	0x0800d5f0

0800c37c <__lshift>:
 800c37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c380:	460c      	mov	r4, r1
 800c382:	6849      	ldr	r1, [r1, #4]
 800c384:	6923      	ldr	r3, [r4, #16]
 800c386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c38a:	68a3      	ldr	r3, [r4, #8]
 800c38c:	4607      	mov	r7, r0
 800c38e:	4691      	mov	r9, r2
 800c390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c394:	f108 0601 	add.w	r6, r8, #1
 800c398:	42b3      	cmp	r3, r6
 800c39a:	db0b      	blt.n	800c3b4 <__lshift+0x38>
 800c39c:	4638      	mov	r0, r7
 800c39e:	f7ff fddb 	bl	800bf58 <_Balloc>
 800c3a2:	4605      	mov	r5, r0
 800c3a4:	b948      	cbnz	r0, 800c3ba <__lshift+0x3e>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	4b2a      	ldr	r3, [pc, #168]	; (800c454 <__lshift+0xd8>)
 800c3aa:	482b      	ldr	r0, [pc, #172]	; (800c458 <__lshift+0xdc>)
 800c3ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3b0:	f000 fac8 	bl	800c944 <__assert_func>
 800c3b4:	3101      	adds	r1, #1
 800c3b6:	005b      	lsls	r3, r3, #1
 800c3b8:	e7ee      	b.n	800c398 <__lshift+0x1c>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	f100 0114 	add.w	r1, r0, #20
 800c3c0:	f100 0210 	add.w	r2, r0, #16
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	4553      	cmp	r3, sl
 800c3c8:	db37      	blt.n	800c43a <__lshift+0xbe>
 800c3ca:	6920      	ldr	r0, [r4, #16]
 800c3cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3d0:	f104 0314 	add.w	r3, r4, #20
 800c3d4:	f019 091f 	ands.w	r9, r9, #31
 800c3d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c3e0:	d02f      	beq.n	800c442 <__lshift+0xc6>
 800c3e2:	f1c9 0e20 	rsb	lr, r9, #32
 800c3e6:	468a      	mov	sl, r1
 800c3e8:	f04f 0c00 	mov.w	ip, #0
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	fa02 f209 	lsl.w	r2, r2, r9
 800c3f2:	ea42 020c 	orr.w	r2, r2, ip
 800c3f6:	f84a 2b04 	str.w	r2, [sl], #4
 800c3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3fe:	4298      	cmp	r0, r3
 800c400:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c404:	d8f2      	bhi.n	800c3ec <__lshift+0x70>
 800c406:	1b03      	subs	r3, r0, r4
 800c408:	3b15      	subs	r3, #21
 800c40a:	f023 0303 	bic.w	r3, r3, #3
 800c40e:	3304      	adds	r3, #4
 800c410:	f104 0215 	add.w	r2, r4, #21
 800c414:	4290      	cmp	r0, r2
 800c416:	bf38      	it	cc
 800c418:	2304      	movcc	r3, #4
 800c41a:	f841 c003 	str.w	ip, [r1, r3]
 800c41e:	f1bc 0f00 	cmp.w	ip, #0
 800c422:	d001      	beq.n	800c428 <__lshift+0xac>
 800c424:	f108 0602 	add.w	r6, r8, #2
 800c428:	3e01      	subs	r6, #1
 800c42a:	4638      	mov	r0, r7
 800c42c:	612e      	str	r6, [r5, #16]
 800c42e:	4621      	mov	r1, r4
 800c430:	f7ff fdd2 	bl	800bfd8 <_Bfree>
 800c434:	4628      	mov	r0, r5
 800c436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c43e:	3301      	adds	r3, #1
 800c440:	e7c1      	b.n	800c3c6 <__lshift+0x4a>
 800c442:	3904      	subs	r1, #4
 800c444:	f853 2b04 	ldr.w	r2, [r3], #4
 800c448:	f841 2f04 	str.w	r2, [r1, #4]!
 800c44c:	4298      	cmp	r0, r3
 800c44e:	d8f9      	bhi.n	800c444 <__lshift+0xc8>
 800c450:	e7ea      	b.n	800c428 <__lshift+0xac>
 800c452:	bf00      	nop
 800c454:	0800d5df 	.word	0x0800d5df
 800c458:	0800d5f0 	.word	0x0800d5f0

0800c45c <__mcmp>:
 800c45c:	b530      	push	{r4, r5, lr}
 800c45e:	6902      	ldr	r2, [r0, #16]
 800c460:	690c      	ldr	r4, [r1, #16]
 800c462:	1b12      	subs	r2, r2, r4
 800c464:	d10e      	bne.n	800c484 <__mcmp+0x28>
 800c466:	f100 0314 	add.w	r3, r0, #20
 800c46a:	3114      	adds	r1, #20
 800c46c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c470:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c474:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c478:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c47c:	42a5      	cmp	r5, r4
 800c47e:	d003      	beq.n	800c488 <__mcmp+0x2c>
 800c480:	d305      	bcc.n	800c48e <__mcmp+0x32>
 800c482:	2201      	movs	r2, #1
 800c484:	4610      	mov	r0, r2
 800c486:	bd30      	pop	{r4, r5, pc}
 800c488:	4283      	cmp	r3, r0
 800c48a:	d3f3      	bcc.n	800c474 <__mcmp+0x18>
 800c48c:	e7fa      	b.n	800c484 <__mcmp+0x28>
 800c48e:	f04f 32ff 	mov.w	r2, #4294967295
 800c492:	e7f7      	b.n	800c484 <__mcmp+0x28>

0800c494 <__mdiff>:
 800c494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	460c      	mov	r4, r1
 800c49a:	4606      	mov	r6, r0
 800c49c:	4611      	mov	r1, r2
 800c49e:	4620      	mov	r0, r4
 800c4a0:	4690      	mov	r8, r2
 800c4a2:	f7ff ffdb 	bl	800c45c <__mcmp>
 800c4a6:	1e05      	subs	r5, r0, #0
 800c4a8:	d110      	bne.n	800c4cc <__mdiff+0x38>
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff fd53 	bl	800bf58 <_Balloc>
 800c4b2:	b930      	cbnz	r0, 800c4c2 <__mdiff+0x2e>
 800c4b4:	4b3a      	ldr	r3, [pc, #232]	; (800c5a0 <__mdiff+0x10c>)
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	f240 2132 	movw	r1, #562	; 0x232
 800c4bc:	4839      	ldr	r0, [pc, #228]	; (800c5a4 <__mdiff+0x110>)
 800c4be:	f000 fa41 	bl	800c944 <__assert_func>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4cc:	bfa4      	itt	ge
 800c4ce:	4643      	movge	r3, r8
 800c4d0:	46a0      	movge	r8, r4
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c4d8:	bfa6      	itte	ge
 800c4da:	461c      	movge	r4, r3
 800c4dc:	2500      	movge	r5, #0
 800c4de:	2501      	movlt	r5, #1
 800c4e0:	f7ff fd3a 	bl	800bf58 <_Balloc>
 800c4e4:	b920      	cbnz	r0, 800c4f0 <__mdiff+0x5c>
 800c4e6:	4b2e      	ldr	r3, [pc, #184]	; (800c5a0 <__mdiff+0x10c>)
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c4ee:	e7e5      	b.n	800c4bc <__mdiff+0x28>
 800c4f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4f4:	6926      	ldr	r6, [r4, #16]
 800c4f6:	60c5      	str	r5, [r0, #12]
 800c4f8:	f104 0914 	add.w	r9, r4, #20
 800c4fc:	f108 0514 	add.w	r5, r8, #20
 800c500:	f100 0e14 	add.w	lr, r0, #20
 800c504:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c508:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c50c:	f108 0210 	add.w	r2, r8, #16
 800c510:	46f2      	mov	sl, lr
 800c512:	2100      	movs	r1, #0
 800c514:	f859 3b04 	ldr.w	r3, [r9], #4
 800c518:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c51c:	fa1f f883 	uxth.w	r8, r3
 800c520:	fa11 f18b 	uxtah	r1, r1, fp
 800c524:	0c1b      	lsrs	r3, r3, #16
 800c526:	eba1 0808 	sub.w	r8, r1, r8
 800c52a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c52e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c532:	fa1f f888 	uxth.w	r8, r8
 800c536:	1419      	asrs	r1, r3, #16
 800c538:	454e      	cmp	r6, r9
 800c53a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c53e:	f84a 3b04 	str.w	r3, [sl], #4
 800c542:	d8e7      	bhi.n	800c514 <__mdiff+0x80>
 800c544:	1b33      	subs	r3, r6, r4
 800c546:	3b15      	subs	r3, #21
 800c548:	f023 0303 	bic.w	r3, r3, #3
 800c54c:	3304      	adds	r3, #4
 800c54e:	3415      	adds	r4, #21
 800c550:	42a6      	cmp	r6, r4
 800c552:	bf38      	it	cc
 800c554:	2304      	movcc	r3, #4
 800c556:	441d      	add	r5, r3
 800c558:	4473      	add	r3, lr
 800c55a:	469e      	mov	lr, r3
 800c55c:	462e      	mov	r6, r5
 800c55e:	4566      	cmp	r6, ip
 800c560:	d30e      	bcc.n	800c580 <__mdiff+0xec>
 800c562:	f10c 0203 	add.w	r2, ip, #3
 800c566:	1b52      	subs	r2, r2, r5
 800c568:	f022 0203 	bic.w	r2, r2, #3
 800c56c:	3d03      	subs	r5, #3
 800c56e:	45ac      	cmp	ip, r5
 800c570:	bf38      	it	cc
 800c572:	2200      	movcc	r2, #0
 800c574:	441a      	add	r2, r3
 800c576:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c57a:	b17b      	cbz	r3, 800c59c <__mdiff+0x108>
 800c57c:	6107      	str	r7, [r0, #16]
 800c57e:	e7a3      	b.n	800c4c8 <__mdiff+0x34>
 800c580:	f856 8b04 	ldr.w	r8, [r6], #4
 800c584:	fa11 f288 	uxtah	r2, r1, r8
 800c588:	1414      	asrs	r4, r2, #16
 800c58a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c58e:	b292      	uxth	r2, r2
 800c590:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c594:	f84e 2b04 	str.w	r2, [lr], #4
 800c598:	1421      	asrs	r1, r4, #16
 800c59a:	e7e0      	b.n	800c55e <__mdiff+0xca>
 800c59c:	3f01      	subs	r7, #1
 800c59e:	e7ea      	b.n	800c576 <__mdiff+0xe2>
 800c5a0:	0800d5df 	.word	0x0800d5df
 800c5a4:	0800d5f0 	.word	0x0800d5f0

0800c5a8 <__d2b>:
 800c5a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5ac:	4689      	mov	r9, r1
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	ec57 6b10 	vmov	r6, r7, d0
 800c5b4:	4690      	mov	r8, r2
 800c5b6:	f7ff fccf 	bl	800bf58 <_Balloc>
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	b930      	cbnz	r0, 800c5cc <__d2b+0x24>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <__d2b+0xb0>)
 800c5c2:	4826      	ldr	r0, [pc, #152]	; (800c65c <__d2b+0xb4>)
 800c5c4:	f240 310a 	movw	r1, #778	; 0x30a
 800c5c8:	f000 f9bc 	bl	800c944 <__assert_func>
 800c5cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c5d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5d4:	bb35      	cbnz	r5, 800c624 <__d2b+0x7c>
 800c5d6:	2e00      	cmp	r6, #0
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	d028      	beq.n	800c62e <__d2b+0x86>
 800c5dc:	4668      	mov	r0, sp
 800c5de:	9600      	str	r6, [sp, #0]
 800c5e0:	f7ff fd82 	bl	800c0e8 <__lo0bits>
 800c5e4:	9900      	ldr	r1, [sp, #0]
 800c5e6:	b300      	cbz	r0, 800c62a <__d2b+0x82>
 800c5e8:	9a01      	ldr	r2, [sp, #4]
 800c5ea:	f1c0 0320 	rsb	r3, r0, #32
 800c5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f2:	430b      	orrs	r3, r1
 800c5f4:	40c2      	lsrs	r2, r0
 800c5f6:	6163      	str	r3, [r4, #20]
 800c5f8:	9201      	str	r2, [sp, #4]
 800c5fa:	9b01      	ldr	r3, [sp, #4]
 800c5fc:	61a3      	str	r3, [r4, #24]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	bf14      	ite	ne
 800c602:	2202      	movne	r2, #2
 800c604:	2201      	moveq	r2, #1
 800c606:	6122      	str	r2, [r4, #16]
 800c608:	b1d5      	cbz	r5, 800c640 <__d2b+0x98>
 800c60a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c60e:	4405      	add	r5, r0
 800c610:	f8c9 5000 	str.w	r5, [r9]
 800c614:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c618:	f8c8 0000 	str.w	r0, [r8]
 800c61c:	4620      	mov	r0, r4
 800c61e:	b003      	add	sp, #12
 800c620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c628:	e7d5      	b.n	800c5d6 <__d2b+0x2e>
 800c62a:	6161      	str	r1, [r4, #20]
 800c62c:	e7e5      	b.n	800c5fa <__d2b+0x52>
 800c62e:	a801      	add	r0, sp, #4
 800c630:	f7ff fd5a 	bl	800c0e8 <__lo0bits>
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	6163      	str	r3, [r4, #20]
 800c638:	2201      	movs	r2, #1
 800c63a:	6122      	str	r2, [r4, #16]
 800c63c:	3020      	adds	r0, #32
 800c63e:	e7e3      	b.n	800c608 <__d2b+0x60>
 800c640:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c644:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c648:	f8c9 0000 	str.w	r0, [r9]
 800c64c:	6918      	ldr	r0, [r3, #16]
 800c64e:	f7ff fd2b 	bl	800c0a8 <__hi0bits>
 800c652:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c656:	e7df      	b.n	800c618 <__d2b+0x70>
 800c658:	0800d5df 	.word	0x0800d5df
 800c65c:	0800d5f0 	.word	0x0800d5f0

0800c660 <_calloc_r>:
 800c660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c662:	fba1 2402 	umull	r2, r4, r1, r2
 800c666:	b94c      	cbnz	r4, 800c67c <_calloc_r+0x1c>
 800c668:	4611      	mov	r1, r2
 800c66a:	9201      	str	r2, [sp, #4]
 800c66c:	f7fe f8be 	bl	800a7ec <_malloc_r>
 800c670:	9a01      	ldr	r2, [sp, #4]
 800c672:	4605      	mov	r5, r0
 800c674:	b930      	cbnz	r0, 800c684 <_calloc_r+0x24>
 800c676:	4628      	mov	r0, r5
 800c678:	b003      	add	sp, #12
 800c67a:	bd30      	pop	{r4, r5, pc}
 800c67c:	220c      	movs	r2, #12
 800c67e:	6002      	str	r2, [r0, #0]
 800c680:	2500      	movs	r5, #0
 800c682:	e7f8      	b.n	800c676 <_calloc_r+0x16>
 800c684:	4621      	mov	r1, r4
 800c686:	f7fe f83d 	bl	800a704 <memset>
 800c68a:	e7f4      	b.n	800c676 <_calloc_r+0x16>

0800c68c <__ssputs_r>:
 800c68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c690:	688e      	ldr	r6, [r1, #8]
 800c692:	429e      	cmp	r6, r3
 800c694:	4682      	mov	sl, r0
 800c696:	460c      	mov	r4, r1
 800c698:	4690      	mov	r8, r2
 800c69a:	461f      	mov	r7, r3
 800c69c:	d838      	bhi.n	800c710 <__ssputs_r+0x84>
 800c69e:	898a      	ldrh	r2, [r1, #12]
 800c6a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6a4:	d032      	beq.n	800c70c <__ssputs_r+0x80>
 800c6a6:	6825      	ldr	r5, [r4, #0]
 800c6a8:	6909      	ldr	r1, [r1, #16]
 800c6aa:	eba5 0901 	sub.w	r9, r5, r1
 800c6ae:	6965      	ldr	r5, [r4, #20]
 800c6b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	444b      	add	r3, r9
 800c6bc:	106d      	asrs	r5, r5, #1
 800c6be:	429d      	cmp	r5, r3
 800c6c0:	bf38      	it	cc
 800c6c2:	461d      	movcc	r5, r3
 800c6c4:	0553      	lsls	r3, r2, #21
 800c6c6:	d531      	bpl.n	800c72c <__ssputs_r+0xa0>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	f7fe f88f 	bl	800a7ec <_malloc_r>
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	b950      	cbnz	r0, 800c6e8 <__ssputs_r+0x5c>
 800c6d2:	230c      	movs	r3, #12
 800c6d4:	f8ca 3000 	str.w	r3, [sl]
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6de:	81a3      	strh	r3, [r4, #12]
 800c6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e8:	6921      	ldr	r1, [r4, #16]
 800c6ea:	464a      	mov	r2, r9
 800c6ec:	f7ff fc1a 	bl	800bf24 <memcpy>
 800c6f0:	89a3      	ldrh	r3, [r4, #12]
 800c6f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6fa:	81a3      	strh	r3, [r4, #12]
 800c6fc:	6126      	str	r6, [r4, #16]
 800c6fe:	6165      	str	r5, [r4, #20]
 800c700:	444e      	add	r6, r9
 800c702:	eba5 0509 	sub.w	r5, r5, r9
 800c706:	6026      	str	r6, [r4, #0]
 800c708:	60a5      	str	r5, [r4, #8]
 800c70a:	463e      	mov	r6, r7
 800c70c:	42be      	cmp	r6, r7
 800c70e:	d900      	bls.n	800c712 <__ssputs_r+0x86>
 800c710:	463e      	mov	r6, r7
 800c712:	6820      	ldr	r0, [r4, #0]
 800c714:	4632      	mov	r2, r6
 800c716:	4641      	mov	r1, r8
 800c718:	f000 f959 	bl	800c9ce <memmove>
 800c71c:	68a3      	ldr	r3, [r4, #8]
 800c71e:	1b9b      	subs	r3, r3, r6
 800c720:	60a3      	str	r3, [r4, #8]
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	4433      	add	r3, r6
 800c726:	6023      	str	r3, [r4, #0]
 800c728:	2000      	movs	r0, #0
 800c72a:	e7db      	b.n	800c6e4 <__ssputs_r+0x58>
 800c72c:	462a      	mov	r2, r5
 800c72e:	f000 f968 	bl	800ca02 <_realloc_r>
 800c732:	4606      	mov	r6, r0
 800c734:	2800      	cmp	r0, #0
 800c736:	d1e1      	bne.n	800c6fc <__ssputs_r+0x70>
 800c738:	6921      	ldr	r1, [r4, #16]
 800c73a:	4650      	mov	r0, sl
 800c73c:	f7fd ffea 	bl	800a714 <_free_r>
 800c740:	e7c7      	b.n	800c6d2 <__ssputs_r+0x46>
	...

0800c744 <_svfiprintf_r>:
 800c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	4698      	mov	r8, r3
 800c74a:	898b      	ldrh	r3, [r1, #12]
 800c74c:	061b      	lsls	r3, r3, #24
 800c74e:	b09d      	sub	sp, #116	; 0x74
 800c750:	4607      	mov	r7, r0
 800c752:	460d      	mov	r5, r1
 800c754:	4614      	mov	r4, r2
 800c756:	d50e      	bpl.n	800c776 <_svfiprintf_r+0x32>
 800c758:	690b      	ldr	r3, [r1, #16]
 800c75a:	b963      	cbnz	r3, 800c776 <_svfiprintf_r+0x32>
 800c75c:	2140      	movs	r1, #64	; 0x40
 800c75e:	f7fe f845 	bl	800a7ec <_malloc_r>
 800c762:	6028      	str	r0, [r5, #0]
 800c764:	6128      	str	r0, [r5, #16]
 800c766:	b920      	cbnz	r0, 800c772 <_svfiprintf_r+0x2e>
 800c768:	230c      	movs	r3, #12
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	f04f 30ff 	mov.w	r0, #4294967295
 800c770:	e0d1      	b.n	800c916 <_svfiprintf_r+0x1d2>
 800c772:	2340      	movs	r3, #64	; 0x40
 800c774:	616b      	str	r3, [r5, #20]
 800c776:	2300      	movs	r3, #0
 800c778:	9309      	str	r3, [sp, #36]	; 0x24
 800c77a:	2320      	movs	r3, #32
 800c77c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c780:	f8cd 800c 	str.w	r8, [sp, #12]
 800c784:	2330      	movs	r3, #48	; 0x30
 800c786:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c930 <_svfiprintf_r+0x1ec>
 800c78a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c78e:	f04f 0901 	mov.w	r9, #1
 800c792:	4623      	mov	r3, r4
 800c794:	469a      	mov	sl, r3
 800c796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c79a:	b10a      	cbz	r2, 800c7a0 <_svfiprintf_r+0x5c>
 800c79c:	2a25      	cmp	r2, #37	; 0x25
 800c79e:	d1f9      	bne.n	800c794 <_svfiprintf_r+0x50>
 800c7a0:	ebba 0b04 	subs.w	fp, sl, r4
 800c7a4:	d00b      	beq.n	800c7be <_svfiprintf_r+0x7a>
 800c7a6:	465b      	mov	r3, fp
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4638      	mov	r0, r7
 800c7ae:	f7ff ff6d 	bl	800c68c <__ssputs_r>
 800c7b2:	3001      	adds	r0, #1
 800c7b4:	f000 80aa 	beq.w	800c90c <_svfiprintf_r+0x1c8>
 800c7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ba:	445a      	add	r2, fp
 800c7bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c7be:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f000 80a2 	beq.w	800c90c <_svfiprintf_r+0x1c8>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d2:	f10a 0a01 	add.w	sl, sl, #1
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	9307      	str	r3, [sp, #28]
 800c7da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7de:	931a      	str	r3, [sp, #104]	; 0x68
 800c7e0:	4654      	mov	r4, sl
 800c7e2:	2205      	movs	r2, #5
 800c7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e8:	4851      	ldr	r0, [pc, #324]	; (800c930 <_svfiprintf_r+0x1ec>)
 800c7ea:	f7f3 fcf9 	bl	80001e0 <memchr>
 800c7ee:	9a04      	ldr	r2, [sp, #16]
 800c7f0:	b9d8      	cbnz	r0, 800c82a <_svfiprintf_r+0xe6>
 800c7f2:	06d0      	lsls	r0, r2, #27
 800c7f4:	bf44      	itt	mi
 800c7f6:	2320      	movmi	r3, #32
 800c7f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7fc:	0711      	lsls	r1, r2, #28
 800c7fe:	bf44      	itt	mi
 800c800:	232b      	movmi	r3, #43	; 0x2b
 800c802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c806:	f89a 3000 	ldrb.w	r3, [sl]
 800c80a:	2b2a      	cmp	r3, #42	; 0x2a
 800c80c:	d015      	beq.n	800c83a <_svfiprintf_r+0xf6>
 800c80e:	9a07      	ldr	r2, [sp, #28]
 800c810:	4654      	mov	r4, sl
 800c812:	2000      	movs	r0, #0
 800c814:	f04f 0c0a 	mov.w	ip, #10
 800c818:	4621      	mov	r1, r4
 800c81a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c81e:	3b30      	subs	r3, #48	; 0x30
 800c820:	2b09      	cmp	r3, #9
 800c822:	d94e      	bls.n	800c8c2 <_svfiprintf_r+0x17e>
 800c824:	b1b0      	cbz	r0, 800c854 <_svfiprintf_r+0x110>
 800c826:	9207      	str	r2, [sp, #28]
 800c828:	e014      	b.n	800c854 <_svfiprintf_r+0x110>
 800c82a:	eba0 0308 	sub.w	r3, r0, r8
 800c82e:	fa09 f303 	lsl.w	r3, r9, r3
 800c832:	4313      	orrs	r3, r2
 800c834:	9304      	str	r3, [sp, #16]
 800c836:	46a2      	mov	sl, r4
 800c838:	e7d2      	b.n	800c7e0 <_svfiprintf_r+0x9c>
 800c83a:	9b03      	ldr	r3, [sp, #12]
 800c83c:	1d19      	adds	r1, r3, #4
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	9103      	str	r1, [sp, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	bfbb      	ittet	lt
 800c846:	425b      	neglt	r3, r3
 800c848:	f042 0202 	orrlt.w	r2, r2, #2
 800c84c:	9307      	strge	r3, [sp, #28]
 800c84e:	9307      	strlt	r3, [sp, #28]
 800c850:	bfb8      	it	lt
 800c852:	9204      	strlt	r2, [sp, #16]
 800c854:	7823      	ldrb	r3, [r4, #0]
 800c856:	2b2e      	cmp	r3, #46	; 0x2e
 800c858:	d10c      	bne.n	800c874 <_svfiprintf_r+0x130>
 800c85a:	7863      	ldrb	r3, [r4, #1]
 800c85c:	2b2a      	cmp	r3, #42	; 0x2a
 800c85e:	d135      	bne.n	800c8cc <_svfiprintf_r+0x188>
 800c860:	9b03      	ldr	r3, [sp, #12]
 800c862:	1d1a      	adds	r2, r3, #4
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	9203      	str	r2, [sp, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	bfb8      	it	lt
 800c86c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c870:	3402      	adds	r4, #2
 800c872:	9305      	str	r3, [sp, #20]
 800c874:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c940 <_svfiprintf_r+0x1fc>
 800c878:	7821      	ldrb	r1, [r4, #0]
 800c87a:	2203      	movs	r2, #3
 800c87c:	4650      	mov	r0, sl
 800c87e:	f7f3 fcaf 	bl	80001e0 <memchr>
 800c882:	b140      	cbz	r0, 800c896 <_svfiprintf_r+0x152>
 800c884:	2340      	movs	r3, #64	; 0x40
 800c886:	eba0 000a 	sub.w	r0, r0, sl
 800c88a:	fa03 f000 	lsl.w	r0, r3, r0
 800c88e:	9b04      	ldr	r3, [sp, #16]
 800c890:	4303      	orrs	r3, r0
 800c892:	3401      	adds	r4, #1
 800c894:	9304      	str	r3, [sp, #16]
 800c896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89a:	4826      	ldr	r0, [pc, #152]	; (800c934 <_svfiprintf_r+0x1f0>)
 800c89c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8a0:	2206      	movs	r2, #6
 800c8a2:	f7f3 fc9d 	bl	80001e0 <memchr>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d038      	beq.n	800c91c <_svfiprintf_r+0x1d8>
 800c8aa:	4b23      	ldr	r3, [pc, #140]	; (800c938 <_svfiprintf_r+0x1f4>)
 800c8ac:	bb1b      	cbnz	r3, 800c8f6 <_svfiprintf_r+0x1b2>
 800c8ae:	9b03      	ldr	r3, [sp, #12]
 800c8b0:	3307      	adds	r3, #7
 800c8b2:	f023 0307 	bic.w	r3, r3, #7
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	9303      	str	r3, [sp, #12]
 800c8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8bc:	4433      	add	r3, r6
 800c8be:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c0:	e767      	b.n	800c792 <_svfiprintf_r+0x4e>
 800c8c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	2001      	movs	r0, #1
 800c8ca:	e7a5      	b.n	800c818 <_svfiprintf_r+0xd4>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	3401      	adds	r4, #1
 800c8d0:	9305      	str	r3, [sp, #20]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	f04f 0c0a 	mov.w	ip, #10
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8de:	3a30      	subs	r2, #48	; 0x30
 800c8e0:	2a09      	cmp	r2, #9
 800c8e2:	d903      	bls.n	800c8ec <_svfiprintf_r+0x1a8>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d0c5      	beq.n	800c874 <_svfiprintf_r+0x130>
 800c8e8:	9105      	str	r1, [sp, #20]
 800c8ea:	e7c3      	b.n	800c874 <_svfiprintf_r+0x130>
 800c8ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e7f0      	b.n	800c8d8 <_svfiprintf_r+0x194>
 800c8f6:	ab03      	add	r3, sp, #12
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	462a      	mov	r2, r5
 800c8fc:	4b0f      	ldr	r3, [pc, #60]	; (800c93c <_svfiprintf_r+0x1f8>)
 800c8fe:	a904      	add	r1, sp, #16
 800c900:	4638      	mov	r0, r7
 800c902:	f7fe f887 	bl	800aa14 <_printf_float>
 800c906:	1c42      	adds	r2, r0, #1
 800c908:	4606      	mov	r6, r0
 800c90a:	d1d6      	bne.n	800c8ba <_svfiprintf_r+0x176>
 800c90c:	89ab      	ldrh	r3, [r5, #12]
 800c90e:	065b      	lsls	r3, r3, #25
 800c910:	f53f af2c 	bmi.w	800c76c <_svfiprintf_r+0x28>
 800c914:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c916:	b01d      	add	sp, #116	; 0x74
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	ab03      	add	r3, sp, #12
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	462a      	mov	r2, r5
 800c922:	4b06      	ldr	r3, [pc, #24]	; (800c93c <_svfiprintf_r+0x1f8>)
 800c924:	a904      	add	r1, sp, #16
 800c926:	4638      	mov	r0, r7
 800c928:	f7fe fb18 	bl	800af5c <_printf_i>
 800c92c:	e7eb      	b.n	800c906 <_svfiprintf_r+0x1c2>
 800c92e:	bf00      	nop
 800c930:	0800d74c 	.word	0x0800d74c
 800c934:	0800d756 	.word	0x0800d756
 800c938:	0800aa15 	.word	0x0800aa15
 800c93c:	0800c68d 	.word	0x0800c68d
 800c940:	0800d752 	.word	0x0800d752

0800c944 <__assert_func>:
 800c944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c946:	4614      	mov	r4, r2
 800c948:	461a      	mov	r2, r3
 800c94a:	4b09      	ldr	r3, [pc, #36]	; (800c970 <__assert_func+0x2c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4605      	mov	r5, r0
 800c950:	68d8      	ldr	r0, [r3, #12]
 800c952:	b14c      	cbz	r4, 800c968 <__assert_func+0x24>
 800c954:	4b07      	ldr	r3, [pc, #28]	; (800c974 <__assert_func+0x30>)
 800c956:	9100      	str	r1, [sp, #0]
 800c958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c95c:	4906      	ldr	r1, [pc, #24]	; (800c978 <__assert_func+0x34>)
 800c95e:	462b      	mov	r3, r5
 800c960:	f000 f80e 	bl	800c980 <fiprintf>
 800c964:	f000 faa4 	bl	800ceb0 <abort>
 800c968:	4b04      	ldr	r3, [pc, #16]	; (800c97c <__assert_func+0x38>)
 800c96a:	461c      	mov	r4, r3
 800c96c:	e7f3      	b.n	800c956 <__assert_func+0x12>
 800c96e:	bf00      	nop
 800c970:	2000002c 	.word	0x2000002c
 800c974:	0800d75d 	.word	0x0800d75d
 800c978:	0800d76a 	.word	0x0800d76a
 800c97c:	0800d798 	.word	0x0800d798

0800c980 <fiprintf>:
 800c980:	b40e      	push	{r1, r2, r3}
 800c982:	b503      	push	{r0, r1, lr}
 800c984:	4601      	mov	r1, r0
 800c986:	ab03      	add	r3, sp, #12
 800c988:	4805      	ldr	r0, [pc, #20]	; (800c9a0 <fiprintf+0x20>)
 800c98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98e:	6800      	ldr	r0, [r0, #0]
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	f000 f88f 	bl	800cab4 <_vfiprintf_r>
 800c996:	b002      	add	sp, #8
 800c998:	f85d eb04 	ldr.w	lr, [sp], #4
 800c99c:	b003      	add	sp, #12
 800c99e:	4770      	bx	lr
 800c9a0:	2000002c 	.word	0x2000002c

0800c9a4 <__retarget_lock_init_recursive>:
 800c9a4:	4770      	bx	lr

0800c9a6 <__retarget_lock_acquire_recursive>:
 800c9a6:	4770      	bx	lr

0800c9a8 <__retarget_lock_release_recursive>:
 800c9a8:	4770      	bx	lr

0800c9aa <__ascii_mbtowc>:
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	b901      	cbnz	r1, 800c9b0 <__ascii_mbtowc+0x6>
 800c9ae:	a901      	add	r1, sp, #4
 800c9b0:	b142      	cbz	r2, 800c9c4 <__ascii_mbtowc+0x1a>
 800c9b2:	b14b      	cbz	r3, 800c9c8 <__ascii_mbtowc+0x1e>
 800c9b4:	7813      	ldrb	r3, [r2, #0]
 800c9b6:	600b      	str	r3, [r1, #0]
 800c9b8:	7812      	ldrb	r2, [r2, #0]
 800c9ba:	1e10      	subs	r0, r2, #0
 800c9bc:	bf18      	it	ne
 800c9be:	2001      	movne	r0, #1
 800c9c0:	b002      	add	sp, #8
 800c9c2:	4770      	bx	lr
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	e7fb      	b.n	800c9c0 <__ascii_mbtowc+0x16>
 800c9c8:	f06f 0001 	mvn.w	r0, #1
 800c9cc:	e7f8      	b.n	800c9c0 <__ascii_mbtowc+0x16>

0800c9ce <memmove>:
 800c9ce:	4288      	cmp	r0, r1
 800c9d0:	b510      	push	{r4, lr}
 800c9d2:	eb01 0402 	add.w	r4, r1, r2
 800c9d6:	d902      	bls.n	800c9de <memmove+0x10>
 800c9d8:	4284      	cmp	r4, r0
 800c9da:	4623      	mov	r3, r4
 800c9dc:	d807      	bhi.n	800c9ee <memmove+0x20>
 800c9de:	1e43      	subs	r3, r0, #1
 800c9e0:	42a1      	cmp	r1, r4
 800c9e2:	d008      	beq.n	800c9f6 <memmove+0x28>
 800c9e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9ec:	e7f8      	b.n	800c9e0 <memmove+0x12>
 800c9ee:	4402      	add	r2, r0
 800c9f0:	4601      	mov	r1, r0
 800c9f2:	428a      	cmp	r2, r1
 800c9f4:	d100      	bne.n	800c9f8 <memmove+0x2a>
 800c9f6:	bd10      	pop	{r4, pc}
 800c9f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca00:	e7f7      	b.n	800c9f2 <memmove+0x24>

0800ca02 <_realloc_r>:
 800ca02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca06:	4680      	mov	r8, r0
 800ca08:	4614      	mov	r4, r2
 800ca0a:	460e      	mov	r6, r1
 800ca0c:	b921      	cbnz	r1, 800ca18 <_realloc_r+0x16>
 800ca0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca12:	4611      	mov	r1, r2
 800ca14:	f7fd beea 	b.w	800a7ec <_malloc_r>
 800ca18:	b92a      	cbnz	r2, 800ca26 <_realloc_r+0x24>
 800ca1a:	f7fd fe7b 	bl	800a714 <_free_r>
 800ca1e:	4625      	mov	r5, r4
 800ca20:	4628      	mov	r0, r5
 800ca22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca26:	f000 fc67 	bl	800d2f8 <_malloc_usable_size_r>
 800ca2a:	4284      	cmp	r4, r0
 800ca2c:	4607      	mov	r7, r0
 800ca2e:	d802      	bhi.n	800ca36 <_realloc_r+0x34>
 800ca30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca34:	d812      	bhi.n	800ca5c <_realloc_r+0x5a>
 800ca36:	4621      	mov	r1, r4
 800ca38:	4640      	mov	r0, r8
 800ca3a:	f7fd fed7 	bl	800a7ec <_malloc_r>
 800ca3e:	4605      	mov	r5, r0
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d0ed      	beq.n	800ca20 <_realloc_r+0x1e>
 800ca44:	42bc      	cmp	r4, r7
 800ca46:	4622      	mov	r2, r4
 800ca48:	4631      	mov	r1, r6
 800ca4a:	bf28      	it	cs
 800ca4c:	463a      	movcs	r2, r7
 800ca4e:	f7ff fa69 	bl	800bf24 <memcpy>
 800ca52:	4631      	mov	r1, r6
 800ca54:	4640      	mov	r0, r8
 800ca56:	f7fd fe5d 	bl	800a714 <_free_r>
 800ca5a:	e7e1      	b.n	800ca20 <_realloc_r+0x1e>
 800ca5c:	4635      	mov	r5, r6
 800ca5e:	e7df      	b.n	800ca20 <_realloc_r+0x1e>

0800ca60 <__sfputc_r>:
 800ca60:	6893      	ldr	r3, [r2, #8]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	b410      	push	{r4}
 800ca68:	6093      	str	r3, [r2, #8]
 800ca6a:	da08      	bge.n	800ca7e <__sfputc_r+0x1e>
 800ca6c:	6994      	ldr	r4, [r2, #24]
 800ca6e:	42a3      	cmp	r3, r4
 800ca70:	db01      	blt.n	800ca76 <__sfputc_r+0x16>
 800ca72:	290a      	cmp	r1, #10
 800ca74:	d103      	bne.n	800ca7e <__sfputc_r+0x1e>
 800ca76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca7a:	f000 b94b 	b.w	800cd14 <__swbuf_r>
 800ca7e:	6813      	ldr	r3, [r2, #0]
 800ca80:	1c58      	adds	r0, r3, #1
 800ca82:	6010      	str	r0, [r2, #0]
 800ca84:	7019      	strb	r1, [r3, #0]
 800ca86:	4608      	mov	r0, r1
 800ca88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <__sfputs_r>:
 800ca8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca90:	4606      	mov	r6, r0
 800ca92:	460f      	mov	r7, r1
 800ca94:	4614      	mov	r4, r2
 800ca96:	18d5      	adds	r5, r2, r3
 800ca98:	42ac      	cmp	r4, r5
 800ca9a:	d101      	bne.n	800caa0 <__sfputs_r+0x12>
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e007      	b.n	800cab0 <__sfputs_r+0x22>
 800caa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa4:	463a      	mov	r2, r7
 800caa6:	4630      	mov	r0, r6
 800caa8:	f7ff ffda 	bl	800ca60 <__sfputc_r>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d1f3      	bne.n	800ca98 <__sfputs_r+0xa>
 800cab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cab4 <_vfiprintf_r>:
 800cab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab8:	460d      	mov	r5, r1
 800caba:	b09d      	sub	sp, #116	; 0x74
 800cabc:	4614      	mov	r4, r2
 800cabe:	4698      	mov	r8, r3
 800cac0:	4606      	mov	r6, r0
 800cac2:	b118      	cbz	r0, 800cacc <_vfiprintf_r+0x18>
 800cac4:	6983      	ldr	r3, [r0, #24]
 800cac6:	b90b      	cbnz	r3, 800cacc <_vfiprintf_r+0x18>
 800cac8:	f000 fb14 	bl	800d0f4 <__sinit>
 800cacc:	4b89      	ldr	r3, [pc, #548]	; (800ccf4 <_vfiprintf_r+0x240>)
 800cace:	429d      	cmp	r5, r3
 800cad0:	d11b      	bne.n	800cb0a <_vfiprintf_r+0x56>
 800cad2:	6875      	ldr	r5, [r6, #4]
 800cad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cad6:	07d9      	lsls	r1, r3, #31
 800cad8:	d405      	bmi.n	800cae6 <_vfiprintf_r+0x32>
 800cada:	89ab      	ldrh	r3, [r5, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d402      	bmi.n	800cae6 <_vfiprintf_r+0x32>
 800cae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cae2:	f7ff ff60 	bl	800c9a6 <__retarget_lock_acquire_recursive>
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	071b      	lsls	r3, r3, #28
 800caea:	d501      	bpl.n	800caf0 <_vfiprintf_r+0x3c>
 800caec:	692b      	ldr	r3, [r5, #16]
 800caee:	b9eb      	cbnz	r3, 800cb2c <_vfiprintf_r+0x78>
 800caf0:	4629      	mov	r1, r5
 800caf2:	4630      	mov	r0, r6
 800caf4:	f000 f96e 	bl	800cdd4 <__swsetup_r>
 800caf8:	b1c0      	cbz	r0, 800cb2c <_vfiprintf_r+0x78>
 800cafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cafc:	07dc      	lsls	r4, r3, #31
 800cafe:	d50e      	bpl.n	800cb1e <_vfiprintf_r+0x6a>
 800cb00:	f04f 30ff 	mov.w	r0, #4294967295
 800cb04:	b01d      	add	sp, #116	; 0x74
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	4b7b      	ldr	r3, [pc, #492]	; (800ccf8 <_vfiprintf_r+0x244>)
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	d101      	bne.n	800cb14 <_vfiprintf_r+0x60>
 800cb10:	68b5      	ldr	r5, [r6, #8]
 800cb12:	e7df      	b.n	800cad4 <_vfiprintf_r+0x20>
 800cb14:	4b79      	ldr	r3, [pc, #484]	; (800ccfc <_vfiprintf_r+0x248>)
 800cb16:	429d      	cmp	r5, r3
 800cb18:	bf08      	it	eq
 800cb1a:	68f5      	ldreq	r5, [r6, #12]
 800cb1c:	e7da      	b.n	800cad4 <_vfiprintf_r+0x20>
 800cb1e:	89ab      	ldrh	r3, [r5, #12]
 800cb20:	0598      	lsls	r0, r3, #22
 800cb22:	d4ed      	bmi.n	800cb00 <_vfiprintf_r+0x4c>
 800cb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb26:	f7ff ff3f 	bl	800c9a8 <__retarget_lock_release_recursive>
 800cb2a:	e7e9      	b.n	800cb00 <_vfiprintf_r+0x4c>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb30:	2320      	movs	r3, #32
 800cb32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb36:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb3a:	2330      	movs	r3, #48	; 0x30
 800cb3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd00 <_vfiprintf_r+0x24c>
 800cb40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb44:	f04f 0901 	mov.w	r9, #1
 800cb48:	4623      	mov	r3, r4
 800cb4a:	469a      	mov	sl, r3
 800cb4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb50:	b10a      	cbz	r2, 800cb56 <_vfiprintf_r+0xa2>
 800cb52:	2a25      	cmp	r2, #37	; 0x25
 800cb54:	d1f9      	bne.n	800cb4a <_vfiprintf_r+0x96>
 800cb56:	ebba 0b04 	subs.w	fp, sl, r4
 800cb5a:	d00b      	beq.n	800cb74 <_vfiprintf_r+0xc0>
 800cb5c:	465b      	mov	r3, fp
 800cb5e:	4622      	mov	r2, r4
 800cb60:	4629      	mov	r1, r5
 800cb62:	4630      	mov	r0, r6
 800cb64:	f7ff ff93 	bl	800ca8e <__sfputs_r>
 800cb68:	3001      	adds	r0, #1
 800cb6a:	f000 80aa 	beq.w	800ccc2 <_vfiprintf_r+0x20e>
 800cb6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb70:	445a      	add	r2, fp
 800cb72:	9209      	str	r2, [sp, #36]	; 0x24
 800cb74:	f89a 3000 	ldrb.w	r3, [sl]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 80a2 	beq.w	800ccc2 <_vfiprintf_r+0x20e>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f04f 32ff 	mov.w	r2, #4294967295
 800cb84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb88:	f10a 0a01 	add.w	sl, sl, #1
 800cb8c:	9304      	str	r3, [sp, #16]
 800cb8e:	9307      	str	r3, [sp, #28]
 800cb90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb94:	931a      	str	r3, [sp, #104]	; 0x68
 800cb96:	4654      	mov	r4, sl
 800cb98:	2205      	movs	r2, #5
 800cb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9e:	4858      	ldr	r0, [pc, #352]	; (800cd00 <_vfiprintf_r+0x24c>)
 800cba0:	f7f3 fb1e 	bl	80001e0 <memchr>
 800cba4:	9a04      	ldr	r2, [sp, #16]
 800cba6:	b9d8      	cbnz	r0, 800cbe0 <_vfiprintf_r+0x12c>
 800cba8:	06d1      	lsls	r1, r2, #27
 800cbaa:	bf44      	itt	mi
 800cbac:	2320      	movmi	r3, #32
 800cbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbb2:	0713      	lsls	r3, r2, #28
 800cbb4:	bf44      	itt	mi
 800cbb6:	232b      	movmi	r3, #43	; 0x2b
 800cbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbc2:	d015      	beq.n	800cbf0 <_vfiprintf_r+0x13c>
 800cbc4:	9a07      	ldr	r2, [sp, #28]
 800cbc6:	4654      	mov	r4, sl
 800cbc8:	2000      	movs	r0, #0
 800cbca:	f04f 0c0a 	mov.w	ip, #10
 800cbce:	4621      	mov	r1, r4
 800cbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbd4:	3b30      	subs	r3, #48	; 0x30
 800cbd6:	2b09      	cmp	r3, #9
 800cbd8:	d94e      	bls.n	800cc78 <_vfiprintf_r+0x1c4>
 800cbda:	b1b0      	cbz	r0, 800cc0a <_vfiprintf_r+0x156>
 800cbdc:	9207      	str	r2, [sp, #28]
 800cbde:	e014      	b.n	800cc0a <_vfiprintf_r+0x156>
 800cbe0:	eba0 0308 	sub.w	r3, r0, r8
 800cbe4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	9304      	str	r3, [sp, #16]
 800cbec:	46a2      	mov	sl, r4
 800cbee:	e7d2      	b.n	800cb96 <_vfiprintf_r+0xe2>
 800cbf0:	9b03      	ldr	r3, [sp, #12]
 800cbf2:	1d19      	adds	r1, r3, #4
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	9103      	str	r1, [sp, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	bfbb      	ittet	lt
 800cbfc:	425b      	neglt	r3, r3
 800cbfe:	f042 0202 	orrlt.w	r2, r2, #2
 800cc02:	9307      	strge	r3, [sp, #28]
 800cc04:	9307      	strlt	r3, [sp, #28]
 800cc06:	bfb8      	it	lt
 800cc08:	9204      	strlt	r2, [sp, #16]
 800cc0a:	7823      	ldrb	r3, [r4, #0]
 800cc0c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc0e:	d10c      	bne.n	800cc2a <_vfiprintf_r+0x176>
 800cc10:	7863      	ldrb	r3, [r4, #1]
 800cc12:	2b2a      	cmp	r3, #42	; 0x2a
 800cc14:	d135      	bne.n	800cc82 <_vfiprintf_r+0x1ce>
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	1d1a      	adds	r2, r3, #4
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	9203      	str	r2, [sp, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bfb8      	it	lt
 800cc22:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc26:	3402      	adds	r4, #2
 800cc28:	9305      	str	r3, [sp, #20]
 800cc2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd10 <_vfiprintf_r+0x25c>
 800cc2e:	7821      	ldrb	r1, [r4, #0]
 800cc30:	2203      	movs	r2, #3
 800cc32:	4650      	mov	r0, sl
 800cc34:	f7f3 fad4 	bl	80001e0 <memchr>
 800cc38:	b140      	cbz	r0, 800cc4c <_vfiprintf_r+0x198>
 800cc3a:	2340      	movs	r3, #64	; 0x40
 800cc3c:	eba0 000a 	sub.w	r0, r0, sl
 800cc40:	fa03 f000 	lsl.w	r0, r3, r0
 800cc44:	9b04      	ldr	r3, [sp, #16]
 800cc46:	4303      	orrs	r3, r0
 800cc48:	3401      	adds	r4, #1
 800cc4a:	9304      	str	r3, [sp, #16]
 800cc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc50:	482c      	ldr	r0, [pc, #176]	; (800cd04 <_vfiprintf_r+0x250>)
 800cc52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc56:	2206      	movs	r2, #6
 800cc58:	f7f3 fac2 	bl	80001e0 <memchr>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d03f      	beq.n	800cce0 <_vfiprintf_r+0x22c>
 800cc60:	4b29      	ldr	r3, [pc, #164]	; (800cd08 <_vfiprintf_r+0x254>)
 800cc62:	bb1b      	cbnz	r3, 800ccac <_vfiprintf_r+0x1f8>
 800cc64:	9b03      	ldr	r3, [sp, #12]
 800cc66:	3307      	adds	r3, #7
 800cc68:	f023 0307 	bic.w	r3, r3, #7
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	9303      	str	r3, [sp, #12]
 800cc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc72:	443b      	add	r3, r7
 800cc74:	9309      	str	r3, [sp, #36]	; 0x24
 800cc76:	e767      	b.n	800cb48 <_vfiprintf_r+0x94>
 800cc78:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc7c:	460c      	mov	r4, r1
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e7a5      	b.n	800cbce <_vfiprintf_r+0x11a>
 800cc82:	2300      	movs	r3, #0
 800cc84:	3401      	adds	r4, #1
 800cc86:	9305      	str	r3, [sp, #20]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	f04f 0c0a 	mov.w	ip, #10
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc94:	3a30      	subs	r2, #48	; 0x30
 800cc96:	2a09      	cmp	r2, #9
 800cc98:	d903      	bls.n	800cca2 <_vfiprintf_r+0x1ee>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d0c5      	beq.n	800cc2a <_vfiprintf_r+0x176>
 800cc9e:	9105      	str	r1, [sp, #20]
 800cca0:	e7c3      	b.n	800cc2a <_vfiprintf_r+0x176>
 800cca2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cca6:	4604      	mov	r4, r0
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e7f0      	b.n	800cc8e <_vfiprintf_r+0x1da>
 800ccac:	ab03      	add	r3, sp, #12
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	462a      	mov	r2, r5
 800ccb2:	4b16      	ldr	r3, [pc, #88]	; (800cd0c <_vfiprintf_r+0x258>)
 800ccb4:	a904      	add	r1, sp, #16
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f7fd feac 	bl	800aa14 <_printf_float>
 800ccbc:	4607      	mov	r7, r0
 800ccbe:	1c78      	adds	r0, r7, #1
 800ccc0:	d1d6      	bne.n	800cc70 <_vfiprintf_r+0x1bc>
 800ccc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccc4:	07d9      	lsls	r1, r3, #31
 800ccc6:	d405      	bmi.n	800ccd4 <_vfiprintf_r+0x220>
 800ccc8:	89ab      	ldrh	r3, [r5, #12]
 800ccca:	059a      	lsls	r2, r3, #22
 800cccc:	d402      	bmi.n	800ccd4 <_vfiprintf_r+0x220>
 800ccce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd0:	f7ff fe6a 	bl	800c9a8 <__retarget_lock_release_recursive>
 800ccd4:	89ab      	ldrh	r3, [r5, #12]
 800ccd6:	065b      	lsls	r3, r3, #25
 800ccd8:	f53f af12 	bmi.w	800cb00 <_vfiprintf_r+0x4c>
 800ccdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccde:	e711      	b.n	800cb04 <_vfiprintf_r+0x50>
 800cce0:	ab03      	add	r3, sp, #12
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	462a      	mov	r2, r5
 800cce6:	4b09      	ldr	r3, [pc, #36]	; (800cd0c <_vfiprintf_r+0x258>)
 800cce8:	a904      	add	r1, sp, #16
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7fe f936 	bl	800af5c <_printf_i>
 800ccf0:	e7e4      	b.n	800ccbc <_vfiprintf_r+0x208>
 800ccf2:	bf00      	nop
 800ccf4:	0800d8c4 	.word	0x0800d8c4
 800ccf8:	0800d8e4 	.word	0x0800d8e4
 800ccfc:	0800d8a4 	.word	0x0800d8a4
 800cd00:	0800d74c 	.word	0x0800d74c
 800cd04:	0800d756 	.word	0x0800d756
 800cd08:	0800aa15 	.word	0x0800aa15
 800cd0c:	0800ca8f 	.word	0x0800ca8f
 800cd10:	0800d752 	.word	0x0800d752

0800cd14 <__swbuf_r>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	460e      	mov	r6, r1
 800cd18:	4614      	mov	r4, r2
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	b118      	cbz	r0, 800cd26 <__swbuf_r+0x12>
 800cd1e:	6983      	ldr	r3, [r0, #24]
 800cd20:	b90b      	cbnz	r3, 800cd26 <__swbuf_r+0x12>
 800cd22:	f000 f9e7 	bl	800d0f4 <__sinit>
 800cd26:	4b21      	ldr	r3, [pc, #132]	; (800cdac <__swbuf_r+0x98>)
 800cd28:	429c      	cmp	r4, r3
 800cd2a:	d12b      	bne.n	800cd84 <__swbuf_r+0x70>
 800cd2c:	686c      	ldr	r4, [r5, #4]
 800cd2e:	69a3      	ldr	r3, [r4, #24]
 800cd30:	60a3      	str	r3, [r4, #8]
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	071a      	lsls	r2, r3, #28
 800cd36:	d52f      	bpl.n	800cd98 <__swbuf_r+0x84>
 800cd38:	6923      	ldr	r3, [r4, #16]
 800cd3a:	b36b      	cbz	r3, 800cd98 <__swbuf_r+0x84>
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	6820      	ldr	r0, [r4, #0]
 800cd40:	1ac0      	subs	r0, r0, r3
 800cd42:	6963      	ldr	r3, [r4, #20]
 800cd44:	b2f6      	uxtb	r6, r6
 800cd46:	4283      	cmp	r3, r0
 800cd48:	4637      	mov	r7, r6
 800cd4a:	dc04      	bgt.n	800cd56 <__swbuf_r+0x42>
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f000 f93c 	bl	800cfcc <_fflush_r>
 800cd54:	bb30      	cbnz	r0, 800cda4 <__swbuf_r+0x90>
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	60a3      	str	r3, [r4, #8]
 800cd5c:	6823      	ldr	r3, [r4, #0]
 800cd5e:	1c5a      	adds	r2, r3, #1
 800cd60:	6022      	str	r2, [r4, #0]
 800cd62:	701e      	strb	r6, [r3, #0]
 800cd64:	6963      	ldr	r3, [r4, #20]
 800cd66:	3001      	adds	r0, #1
 800cd68:	4283      	cmp	r3, r0
 800cd6a:	d004      	beq.n	800cd76 <__swbuf_r+0x62>
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	07db      	lsls	r3, r3, #31
 800cd70:	d506      	bpl.n	800cd80 <__swbuf_r+0x6c>
 800cd72:	2e0a      	cmp	r6, #10
 800cd74:	d104      	bne.n	800cd80 <__swbuf_r+0x6c>
 800cd76:	4621      	mov	r1, r4
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f000 f927 	bl	800cfcc <_fflush_r>
 800cd7e:	b988      	cbnz	r0, 800cda4 <__swbuf_r+0x90>
 800cd80:	4638      	mov	r0, r7
 800cd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd84:	4b0a      	ldr	r3, [pc, #40]	; (800cdb0 <__swbuf_r+0x9c>)
 800cd86:	429c      	cmp	r4, r3
 800cd88:	d101      	bne.n	800cd8e <__swbuf_r+0x7a>
 800cd8a:	68ac      	ldr	r4, [r5, #8]
 800cd8c:	e7cf      	b.n	800cd2e <__swbuf_r+0x1a>
 800cd8e:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <__swbuf_r+0xa0>)
 800cd90:	429c      	cmp	r4, r3
 800cd92:	bf08      	it	eq
 800cd94:	68ec      	ldreq	r4, [r5, #12]
 800cd96:	e7ca      	b.n	800cd2e <__swbuf_r+0x1a>
 800cd98:	4621      	mov	r1, r4
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f000 f81a 	bl	800cdd4 <__swsetup_r>
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d0cb      	beq.n	800cd3c <__swbuf_r+0x28>
 800cda4:	f04f 37ff 	mov.w	r7, #4294967295
 800cda8:	e7ea      	b.n	800cd80 <__swbuf_r+0x6c>
 800cdaa:	bf00      	nop
 800cdac:	0800d8c4 	.word	0x0800d8c4
 800cdb0:	0800d8e4 	.word	0x0800d8e4
 800cdb4:	0800d8a4 	.word	0x0800d8a4

0800cdb8 <__ascii_wctomb>:
 800cdb8:	b149      	cbz	r1, 800cdce <__ascii_wctomb+0x16>
 800cdba:	2aff      	cmp	r2, #255	; 0xff
 800cdbc:	bf85      	ittet	hi
 800cdbe:	238a      	movhi	r3, #138	; 0x8a
 800cdc0:	6003      	strhi	r3, [r0, #0]
 800cdc2:	700a      	strbls	r2, [r1, #0]
 800cdc4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cdc8:	bf98      	it	ls
 800cdca:	2001      	movls	r0, #1
 800cdcc:	4770      	bx	lr
 800cdce:	4608      	mov	r0, r1
 800cdd0:	4770      	bx	lr
	...

0800cdd4 <__swsetup_r>:
 800cdd4:	4b32      	ldr	r3, [pc, #200]	; (800cea0 <__swsetup_r+0xcc>)
 800cdd6:	b570      	push	{r4, r5, r6, lr}
 800cdd8:	681d      	ldr	r5, [r3, #0]
 800cdda:	4606      	mov	r6, r0
 800cddc:	460c      	mov	r4, r1
 800cdde:	b125      	cbz	r5, 800cdea <__swsetup_r+0x16>
 800cde0:	69ab      	ldr	r3, [r5, #24]
 800cde2:	b913      	cbnz	r3, 800cdea <__swsetup_r+0x16>
 800cde4:	4628      	mov	r0, r5
 800cde6:	f000 f985 	bl	800d0f4 <__sinit>
 800cdea:	4b2e      	ldr	r3, [pc, #184]	; (800cea4 <__swsetup_r+0xd0>)
 800cdec:	429c      	cmp	r4, r3
 800cdee:	d10f      	bne.n	800ce10 <__swsetup_r+0x3c>
 800cdf0:	686c      	ldr	r4, [r5, #4]
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdf8:	0719      	lsls	r1, r3, #28
 800cdfa:	d42c      	bmi.n	800ce56 <__swsetup_r+0x82>
 800cdfc:	06dd      	lsls	r5, r3, #27
 800cdfe:	d411      	bmi.n	800ce24 <__swsetup_r+0x50>
 800ce00:	2309      	movs	r3, #9
 800ce02:	6033      	str	r3, [r6, #0]
 800ce04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce08:	81a3      	strh	r3, [r4, #12]
 800ce0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0e:	e03e      	b.n	800ce8e <__swsetup_r+0xba>
 800ce10:	4b25      	ldr	r3, [pc, #148]	; (800cea8 <__swsetup_r+0xd4>)
 800ce12:	429c      	cmp	r4, r3
 800ce14:	d101      	bne.n	800ce1a <__swsetup_r+0x46>
 800ce16:	68ac      	ldr	r4, [r5, #8]
 800ce18:	e7eb      	b.n	800cdf2 <__swsetup_r+0x1e>
 800ce1a:	4b24      	ldr	r3, [pc, #144]	; (800ceac <__swsetup_r+0xd8>)
 800ce1c:	429c      	cmp	r4, r3
 800ce1e:	bf08      	it	eq
 800ce20:	68ec      	ldreq	r4, [r5, #12]
 800ce22:	e7e6      	b.n	800cdf2 <__swsetup_r+0x1e>
 800ce24:	0758      	lsls	r0, r3, #29
 800ce26:	d512      	bpl.n	800ce4e <__swsetup_r+0x7a>
 800ce28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce2a:	b141      	cbz	r1, 800ce3e <__swsetup_r+0x6a>
 800ce2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce30:	4299      	cmp	r1, r3
 800ce32:	d002      	beq.n	800ce3a <__swsetup_r+0x66>
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7fd fc6d 	bl	800a714 <_free_r>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ce3e:	89a3      	ldrh	r3, [r4, #12]
 800ce40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce44:	81a3      	strh	r3, [r4, #12]
 800ce46:	2300      	movs	r3, #0
 800ce48:	6063      	str	r3, [r4, #4]
 800ce4a:	6923      	ldr	r3, [r4, #16]
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	f043 0308 	orr.w	r3, r3, #8
 800ce54:	81a3      	strh	r3, [r4, #12]
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	b94b      	cbnz	r3, 800ce6e <__swsetup_r+0x9a>
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce64:	d003      	beq.n	800ce6e <__swsetup_r+0x9a>
 800ce66:	4621      	mov	r1, r4
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f000 fa05 	bl	800d278 <__smakebuf_r>
 800ce6e:	89a0      	ldrh	r0, [r4, #12]
 800ce70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce74:	f010 0301 	ands.w	r3, r0, #1
 800ce78:	d00a      	beq.n	800ce90 <__swsetup_r+0xbc>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	60a3      	str	r3, [r4, #8]
 800ce7e:	6963      	ldr	r3, [r4, #20]
 800ce80:	425b      	negs	r3, r3
 800ce82:	61a3      	str	r3, [r4, #24]
 800ce84:	6923      	ldr	r3, [r4, #16]
 800ce86:	b943      	cbnz	r3, 800ce9a <__swsetup_r+0xc6>
 800ce88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce8c:	d1ba      	bne.n	800ce04 <__swsetup_r+0x30>
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}
 800ce90:	0781      	lsls	r1, r0, #30
 800ce92:	bf58      	it	pl
 800ce94:	6963      	ldrpl	r3, [r4, #20]
 800ce96:	60a3      	str	r3, [r4, #8]
 800ce98:	e7f4      	b.n	800ce84 <__swsetup_r+0xb0>
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	e7f7      	b.n	800ce8e <__swsetup_r+0xba>
 800ce9e:	bf00      	nop
 800cea0:	2000002c 	.word	0x2000002c
 800cea4:	0800d8c4 	.word	0x0800d8c4
 800cea8:	0800d8e4 	.word	0x0800d8e4
 800ceac:	0800d8a4 	.word	0x0800d8a4

0800ceb0 <abort>:
 800ceb0:	b508      	push	{r3, lr}
 800ceb2:	2006      	movs	r0, #6
 800ceb4:	f000 fa50 	bl	800d358 <raise>
 800ceb8:	2001      	movs	r0, #1
 800ceba:	f7f4 feb7 	bl	8001c2c <_exit>
	...

0800cec0 <__sflush_r>:
 800cec0:	898a      	ldrh	r2, [r1, #12]
 800cec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec6:	4605      	mov	r5, r0
 800cec8:	0710      	lsls	r0, r2, #28
 800ceca:	460c      	mov	r4, r1
 800cecc:	d458      	bmi.n	800cf80 <__sflush_r+0xc0>
 800cece:	684b      	ldr	r3, [r1, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	dc05      	bgt.n	800cee0 <__sflush_r+0x20>
 800ced4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	dc02      	bgt.n	800cee0 <__sflush_r+0x20>
 800ceda:	2000      	movs	r0, #0
 800cedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cee2:	2e00      	cmp	r6, #0
 800cee4:	d0f9      	beq.n	800ceda <__sflush_r+0x1a>
 800cee6:	2300      	movs	r3, #0
 800cee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ceec:	682f      	ldr	r7, [r5, #0]
 800ceee:	602b      	str	r3, [r5, #0]
 800cef0:	d032      	beq.n	800cf58 <__sflush_r+0x98>
 800cef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	075a      	lsls	r2, r3, #29
 800cef8:	d505      	bpl.n	800cf06 <__sflush_r+0x46>
 800cefa:	6863      	ldr	r3, [r4, #4]
 800cefc:	1ac0      	subs	r0, r0, r3
 800cefe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf00:	b10b      	cbz	r3, 800cf06 <__sflush_r+0x46>
 800cf02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf04:	1ac0      	subs	r0, r0, r3
 800cf06:	2300      	movs	r3, #0
 800cf08:	4602      	mov	r2, r0
 800cf0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf0c:	6a21      	ldr	r1, [r4, #32]
 800cf0e:	4628      	mov	r0, r5
 800cf10:	47b0      	blx	r6
 800cf12:	1c43      	adds	r3, r0, #1
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	d106      	bne.n	800cf26 <__sflush_r+0x66>
 800cf18:	6829      	ldr	r1, [r5, #0]
 800cf1a:	291d      	cmp	r1, #29
 800cf1c:	d82c      	bhi.n	800cf78 <__sflush_r+0xb8>
 800cf1e:	4a2a      	ldr	r2, [pc, #168]	; (800cfc8 <__sflush_r+0x108>)
 800cf20:	40ca      	lsrs	r2, r1
 800cf22:	07d6      	lsls	r6, r2, #31
 800cf24:	d528      	bpl.n	800cf78 <__sflush_r+0xb8>
 800cf26:	2200      	movs	r2, #0
 800cf28:	6062      	str	r2, [r4, #4]
 800cf2a:	04d9      	lsls	r1, r3, #19
 800cf2c:	6922      	ldr	r2, [r4, #16]
 800cf2e:	6022      	str	r2, [r4, #0]
 800cf30:	d504      	bpl.n	800cf3c <__sflush_r+0x7c>
 800cf32:	1c42      	adds	r2, r0, #1
 800cf34:	d101      	bne.n	800cf3a <__sflush_r+0x7a>
 800cf36:	682b      	ldr	r3, [r5, #0]
 800cf38:	b903      	cbnz	r3, 800cf3c <__sflush_r+0x7c>
 800cf3a:	6560      	str	r0, [r4, #84]	; 0x54
 800cf3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf3e:	602f      	str	r7, [r5, #0]
 800cf40:	2900      	cmp	r1, #0
 800cf42:	d0ca      	beq.n	800ceda <__sflush_r+0x1a>
 800cf44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf48:	4299      	cmp	r1, r3
 800cf4a:	d002      	beq.n	800cf52 <__sflush_r+0x92>
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f7fd fbe1 	bl	800a714 <_free_r>
 800cf52:	2000      	movs	r0, #0
 800cf54:	6360      	str	r0, [r4, #52]	; 0x34
 800cf56:	e7c1      	b.n	800cedc <__sflush_r+0x1c>
 800cf58:	6a21      	ldr	r1, [r4, #32]
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	47b0      	blx	r6
 800cf60:	1c41      	adds	r1, r0, #1
 800cf62:	d1c7      	bne.n	800cef4 <__sflush_r+0x34>
 800cf64:	682b      	ldr	r3, [r5, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0c4      	beq.n	800cef4 <__sflush_r+0x34>
 800cf6a:	2b1d      	cmp	r3, #29
 800cf6c:	d001      	beq.n	800cf72 <__sflush_r+0xb2>
 800cf6e:	2b16      	cmp	r3, #22
 800cf70:	d101      	bne.n	800cf76 <__sflush_r+0xb6>
 800cf72:	602f      	str	r7, [r5, #0]
 800cf74:	e7b1      	b.n	800ceda <__sflush_r+0x1a>
 800cf76:	89a3      	ldrh	r3, [r4, #12]
 800cf78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf7c:	81a3      	strh	r3, [r4, #12]
 800cf7e:	e7ad      	b.n	800cedc <__sflush_r+0x1c>
 800cf80:	690f      	ldr	r7, [r1, #16]
 800cf82:	2f00      	cmp	r7, #0
 800cf84:	d0a9      	beq.n	800ceda <__sflush_r+0x1a>
 800cf86:	0793      	lsls	r3, r2, #30
 800cf88:	680e      	ldr	r6, [r1, #0]
 800cf8a:	bf08      	it	eq
 800cf8c:	694b      	ldreq	r3, [r1, #20]
 800cf8e:	600f      	str	r7, [r1, #0]
 800cf90:	bf18      	it	ne
 800cf92:	2300      	movne	r3, #0
 800cf94:	eba6 0807 	sub.w	r8, r6, r7
 800cf98:	608b      	str	r3, [r1, #8]
 800cf9a:	f1b8 0f00 	cmp.w	r8, #0
 800cf9e:	dd9c      	ble.n	800ceda <__sflush_r+0x1a>
 800cfa0:	6a21      	ldr	r1, [r4, #32]
 800cfa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfa4:	4643      	mov	r3, r8
 800cfa6:	463a      	mov	r2, r7
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	47b0      	blx	r6
 800cfac:	2800      	cmp	r0, #0
 800cfae:	dc06      	bgt.n	800cfbe <__sflush_r+0xfe>
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfb6:	81a3      	strh	r3, [r4, #12]
 800cfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbc:	e78e      	b.n	800cedc <__sflush_r+0x1c>
 800cfbe:	4407      	add	r7, r0
 800cfc0:	eba8 0800 	sub.w	r8, r8, r0
 800cfc4:	e7e9      	b.n	800cf9a <__sflush_r+0xda>
 800cfc6:	bf00      	nop
 800cfc8:	20400001 	.word	0x20400001

0800cfcc <_fflush_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	690b      	ldr	r3, [r1, #16]
 800cfd0:	4605      	mov	r5, r0
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	b913      	cbnz	r3, 800cfdc <_fflush_r+0x10>
 800cfd6:	2500      	movs	r5, #0
 800cfd8:	4628      	mov	r0, r5
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	b118      	cbz	r0, 800cfe6 <_fflush_r+0x1a>
 800cfde:	6983      	ldr	r3, [r0, #24]
 800cfe0:	b90b      	cbnz	r3, 800cfe6 <_fflush_r+0x1a>
 800cfe2:	f000 f887 	bl	800d0f4 <__sinit>
 800cfe6:	4b14      	ldr	r3, [pc, #80]	; (800d038 <_fflush_r+0x6c>)
 800cfe8:	429c      	cmp	r4, r3
 800cfea:	d11b      	bne.n	800d024 <_fflush_r+0x58>
 800cfec:	686c      	ldr	r4, [r5, #4]
 800cfee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0ef      	beq.n	800cfd6 <_fflush_r+0xa>
 800cff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cff8:	07d0      	lsls	r0, r2, #31
 800cffa:	d404      	bmi.n	800d006 <_fflush_r+0x3a>
 800cffc:	0599      	lsls	r1, r3, #22
 800cffe:	d402      	bmi.n	800d006 <_fflush_r+0x3a>
 800d000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d002:	f7ff fcd0 	bl	800c9a6 <__retarget_lock_acquire_recursive>
 800d006:	4628      	mov	r0, r5
 800d008:	4621      	mov	r1, r4
 800d00a:	f7ff ff59 	bl	800cec0 <__sflush_r>
 800d00e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d010:	07da      	lsls	r2, r3, #31
 800d012:	4605      	mov	r5, r0
 800d014:	d4e0      	bmi.n	800cfd8 <_fflush_r+0xc>
 800d016:	89a3      	ldrh	r3, [r4, #12]
 800d018:	059b      	lsls	r3, r3, #22
 800d01a:	d4dd      	bmi.n	800cfd8 <_fflush_r+0xc>
 800d01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d01e:	f7ff fcc3 	bl	800c9a8 <__retarget_lock_release_recursive>
 800d022:	e7d9      	b.n	800cfd8 <_fflush_r+0xc>
 800d024:	4b05      	ldr	r3, [pc, #20]	; (800d03c <_fflush_r+0x70>)
 800d026:	429c      	cmp	r4, r3
 800d028:	d101      	bne.n	800d02e <_fflush_r+0x62>
 800d02a:	68ac      	ldr	r4, [r5, #8]
 800d02c:	e7df      	b.n	800cfee <_fflush_r+0x22>
 800d02e:	4b04      	ldr	r3, [pc, #16]	; (800d040 <_fflush_r+0x74>)
 800d030:	429c      	cmp	r4, r3
 800d032:	bf08      	it	eq
 800d034:	68ec      	ldreq	r4, [r5, #12]
 800d036:	e7da      	b.n	800cfee <_fflush_r+0x22>
 800d038:	0800d8c4 	.word	0x0800d8c4
 800d03c:	0800d8e4 	.word	0x0800d8e4
 800d040:	0800d8a4 	.word	0x0800d8a4

0800d044 <std>:
 800d044:	2300      	movs	r3, #0
 800d046:	b510      	push	{r4, lr}
 800d048:	4604      	mov	r4, r0
 800d04a:	e9c0 3300 	strd	r3, r3, [r0]
 800d04e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d052:	6083      	str	r3, [r0, #8]
 800d054:	8181      	strh	r1, [r0, #12]
 800d056:	6643      	str	r3, [r0, #100]	; 0x64
 800d058:	81c2      	strh	r2, [r0, #14]
 800d05a:	6183      	str	r3, [r0, #24]
 800d05c:	4619      	mov	r1, r3
 800d05e:	2208      	movs	r2, #8
 800d060:	305c      	adds	r0, #92	; 0x5c
 800d062:	f7fd fb4f 	bl	800a704 <memset>
 800d066:	4b05      	ldr	r3, [pc, #20]	; (800d07c <std+0x38>)
 800d068:	6263      	str	r3, [r4, #36]	; 0x24
 800d06a:	4b05      	ldr	r3, [pc, #20]	; (800d080 <std+0x3c>)
 800d06c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d06e:	4b05      	ldr	r3, [pc, #20]	; (800d084 <std+0x40>)
 800d070:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d072:	4b05      	ldr	r3, [pc, #20]	; (800d088 <std+0x44>)
 800d074:	6224      	str	r4, [r4, #32]
 800d076:	6323      	str	r3, [r4, #48]	; 0x30
 800d078:	bd10      	pop	{r4, pc}
 800d07a:	bf00      	nop
 800d07c:	0800d391 	.word	0x0800d391
 800d080:	0800d3b3 	.word	0x0800d3b3
 800d084:	0800d3eb 	.word	0x0800d3eb
 800d088:	0800d40f 	.word	0x0800d40f

0800d08c <_cleanup_r>:
 800d08c:	4901      	ldr	r1, [pc, #4]	; (800d094 <_cleanup_r+0x8>)
 800d08e:	f000 b8af 	b.w	800d1f0 <_fwalk_reent>
 800d092:	bf00      	nop
 800d094:	0800cfcd 	.word	0x0800cfcd

0800d098 <__sfmoreglue>:
 800d098:	b570      	push	{r4, r5, r6, lr}
 800d09a:	2268      	movs	r2, #104	; 0x68
 800d09c:	1e4d      	subs	r5, r1, #1
 800d09e:	4355      	muls	r5, r2
 800d0a0:	460e      	mov	r6, r1
 800d0a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0a6:	f7fd fba1 	bl	800a7ec <_malloc_r>
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	b140      	cbz	r0, 800d0c0 <__sfmoreglue+0x28>
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	e9c0 1600 	strd	r1, r6, [r0]
 800d0b4:	300c      	adds	r0, #12
 800d0b6:	60a0      	str	r0, [r4, #8]
 800d0b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d0bc:	f7fd fb22 	bl	800a704 <memset>
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	bd70      	pop	{r4, r5, r6, pc}

0800d0c4 <__sfp_lock_acquire>:
 800d0c4:	4801      	ldr	r0, [pc, #4]	; (800d0cc <__sfp_lock_acquire+0x8>)
 800d0c6:	f7ff bc6e 	b.w	800c9a6 <__retarget_lock_acquire_recursive>
 800d0ca:	bf00      	nop
 800d0cc:	20000ac5 	.word	0x20000ac5

0800d0d0 <__sfp_lock_release>:
 800d0d0:	4801      	ldr	r0, [pc, #4]	; (800d0d8 <__sfp_lock_release+0x8>)
 800d0d2:	f7ff bc69 	b.w	800c9a8 <__retarget_lock_release_recursive>
 800d0d6:	bf00      	nop
 800d0d8:	20000ac5 	.word	0x20000ac5

0800d0dc <__sinit_lock_acquire>:
 800d0dc:	4801      	ldr	r0, [pc, #4]	; (800d0e4 <__sinit_lock_acquire+0x8>)
 800d0de:	f7ff bc62 	b.w	800c9a6 <__retarget_lock_acquire_recursive>
 800d0e2:	bf00      	nop
 800d0e4:	20000ac6 	.word	0x20000ac6

0800d0e8 <__sinit_lock_release>:
 800d0e8:	4801      	ldr	r0, [pc, #4]	; (800d0f0 <__sinit_lock_release+0x8>)
 800d0ea:	f7ff bc5d 	b.w	800c9a8 <__retarget_lock_release_recursive>
 800d0ee:	bf00      	nop
 800d0f0:	20000ac6 	.word	0x20000ac6

0800d0f4 <__sinit>:
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	f7ff fff0 	bl	800d0dc <__sinit_lock_acquire>
 800d0fc:	69a3      	ldr	r3, [r4, #24]
 800d0fe:	b11b      	cbz	r3, 800d108 <__sinit+0x14>
 800d100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d104:	f7ff bff0 	b.w	800d0e8 <__sinit_lock_release>
 800d108:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d10c:	6523      	str	r3, [r4, #80]	; 0x50
 800d10e:	4b13      	ldr	r3, [pc, #76]	; (800d15c <__sinit+0x68>)
 800d110:	4a13      	ldr	r2, [pc, #76]	; (800d160 <__sinit+0x6c>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	62a2      	str	r2, [r4, #40]	; 0x28
 800d116:	42a3      	cmp	r3, r4
 800d118:	bf04      	itt	eq
 800d11a:	2301      	moveq	r3, #1
 800d11c:	61a3      	streq	r3, [r4, #24]
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 f820 	bl	800d164 <__sfp>
 800d124:	6060      	str	r0, [r4, #4]
 800d126:	4620      	mov	r0, r4
 800d128:	f000 f81c 	bl	800d164 <__sfp>
 800d12c:	60a0      	str	r0, [r4, #8]
 800d12e:	4620      	mov	r0, r4
 800d130:	f000 f818 	bl	800d164 <__sfp>
 800d134:	2200      	movs	r2, #0
 800d136:	60e0      	str	r0, [r4, #12]
 800d138:	2104      	movs	r1, #4
 800d13a:	6860      	ldr	r0, [r4, #4]
 800d13c:	f7ff ff82 	bl	800d044 <std>
 800d140:	68a0      	ldr	r0, [r4, #8]
 800d142:	2201      	movs	r2, #1
 800d144:	2109      	movs	r1, #9
 800d146:	f7ff ff7d 	bl	800d044 <std>
 800d14a:	68e0      	ldr	r0, [r4, #12]
 800d14c:	2202      	movs	r2, #2
 800d14e:	2112      	movs	r1, #18
 800d150:	f7ff ff78 	bl	800d044 <std>
 800d154:	2301      	movs	r3, #1
 800d156:	61a3      	str	r3, [r4, #24]
 800d158:	e7d2      	b.n	800d100 <__sinit+0xc>
 800d15a:	bf00      	nop
 800d15c:	0800d528 	.word	0x0800d528
 800d160:	0800d08d 	.word	0x0800d08d

0800d164 <__sfp>:
 800d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d166:	4607      	mov	r7, r0
 800d168:	f7ff ffac 	bl	800d0c4 <__sfp_lock_acquire>
 800d16c:	4b1e      	ldr	r3, [pc, #120]	; (800d1e8 <__sfp+0x84>)
 800d16e:	681e      	ldr	r6, [r3, #0]
 800d170:	69b3      	ldr	r3, [r6, #24]
 800d172:	b913      	cbnz	r3, 800d17a <__sfp+0x16>
 800d174:	4630      	mov	r0, r6
 800d176:	f7ff ffbd 	bl	800d0f4 <__sinit>
 800d17a:	3648      	adds	r6, #72	; 0x48
 800d17c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d180:	3b01      	subs	r3, #1
 800d182:	d503      	bpl.n	800d18c <__sfp+0x28>
 800d184:	6833      	ldr	r3, [r6, #0]
 800d186:	b30b      	cbz	r3, 800d1cc <__sfp+0x68>
 800d188:	6836      	ldr	r6, [r6, #0]
 800d18a:	e7f7      	b.n	800d17c <__sfp+0x18>
 800d18c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d190:	b9d5      	cbnz	r5, 800d1c8 <__sfp+0x64>
 800d192:	4b16      	ldr	r3, [pc, #88]	; (800d1ec <__sfp+0x88>)
 800d194:	60e3      	str	r3, [r4, #12]
 800d196:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d19a:	6665      	str	r5, [r4, #100]	; 0x64
 800d19c:	f7ff fc02 	bl	800c9a4 <__retarget_lock_init_recursive>
 800d1a0:	f7ff ff96 	bl	800d0d0 <__sfp_lock_release>
 800d1a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d1a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d1ac:	6025      	str	r5, [r4, #0]
 800d1ae:	61a5      	str	r5, [r4, #24]
 800d1b0:	2208      	movs	r2, #8
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1b8:	f7fd faa4 	bl	800a704 <memset>
 800d1bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d1c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1c8:	3468      	adds	r4, #104	; 0x68
 800d1ca:	e7d9      	b.n	800d180 <__sfp+0x1c>
 800d1cc:	2104      	movs	r1, #4
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	f7ff ff62 	bl	800d098 <__sfmoreglue>
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	6030      	str	r0, [r6, #0]
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d1d5      	bne.n	800d188 <__sfp+0x24>
 800d1dc:	f7ff ff78 	bl	800d0d0 <__sfp_lock_release>
 800d1e0:	230c      	movs	r3, #12
 800d1e2:	603b      	str	r3, [r7, #0]
 800d1e4:	e7ee      	b.n	800d1c4 <__sfp+0x60>
 800d1e6:	bf00      	nop
 800d1e8:	0800d528 	.word	0x0800d528
 800d1ec:	ffff0001 	.word	0xffff0001

0800d1f0 <_fwalk_reent>:
 800d1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	4688      	mov	r8, r1
 800d1f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1fc:	2700      	movs	r7, #0
 800d1fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d202:	f1b9 0901 	subs.w	r9, r9, #1
 800d206:	d505      	bpl.n	800d214 <_fwalk_reent+0x24>
 800d208:	6824      	ldr	r4, [r4, #0]
 800d20a:	2c00      	cmp	r4, #0
 800d20c:	d1f7      	bne.n	800d1fe <_fwalk_reent+0xe>
 800d20e:	4638      	mov	r0, r7
 800d210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d214:	89ab      	ldrh	r3, [r5, #12]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d907      	bls.n	800d22a <_fwalk_reent+0x3a>
 800d21a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d21e:	3301      	adds	r3, #1
 800d220:	d003      	beq.n	800d22a <_fwalk_reent+0x3a>
 800d222:	4629      	mov	r1, r5
 800d224:	4630      	mov	r0, r6
 800d226:	47c0      	blx	r8
 800d228:	4307      	orrs	r7, r0
 800d22a:	3568      	adds	r5, #104	; 0x68
 800d22c:	e7e9      	b.n	800d202 <_fwalk_reent+0x12>

0800d22e <__swhatbuf_r>:
 800d22e:	b570      	push	{r4, r5, r6, lr}
 800d230:	460e      	mov	r6, r1
 800d232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d236:	2900      	cmp	r1, #0
 800d238:	b096      	sub	sp, #88	; 0x58
 800d23a:	4614      	mov	r4, r2
 800d23c:	461d      	mov	r5, r3
 800d23e:	da08      	bge.n	800d252 <__swhatbuf_r+0x24>
 800d240:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	602a      	str	r2, [r5, #0]
 800d248:	061a      	lsls	r2, r3, #24
 800d24a:	d410      	bmi.n	800d26e <__swhatbuf_r+0x40>
 800d24c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d250:	e00e      	b.n	800d270 <__swhatbuf_r+0x42>
 800d252:	466a      	mov	r2, sp
 800d254:	f000 f902 	bl	800d45c <_fstat_r>
 800d258:	2800      	cmp	r0, #0
 800d25a:	dbf1      	blt.n	800d240 <__swhatbuf_r+0x12>
 800d25c:	9a01      	ldr	r2, [sp, #4]
 800d25e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d262:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d266:	425a      	negs	r2, r3
 800d268:	415a      	adcs	r2, r3
 800d26a:	602a      	str	r2, [r5, #0]
 800d26c:	e7ee      	b.n	800d24c <__swhatbuf_r+0x1e>
 800d26e:	2340      	movs	r3, #64	; 0x40
 800d270:	2000      	movs	r0, #0
 800d272:	6023      	str	r3, [r4, #0]
 800d274:	b016      	add	sp, #88	; 0x58
 800d276:	bd70      	pop	{r4, r5, r6, pc}

0800d278 <__smakebuf_r>:
 800d278:	898b      	ldrh	r3, [r1, #12]
 800d27a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d27c:	079d      	lsls	r5, r3, #30
 800d27e:	4606      	mov	r6, r0
 800d280:	460c      	mov	r4, r1
 800d282:	d507      	bpl.n	800d294 <__smakebuf_r+0x1c>
 800d284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	6123      	str	r3, [r4, #16]
 800d28c:	2301      	movs	r3, #1
 800d28e:	6163      	str	r3, [r4, #20]
 800d290:	b002      	add	sp, #8
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	ab01      	add	r3, sp, #4
 800d296:	466a      	mov	r2, sp
 800d298:	f7ff ffc9 	bl	800d22e <__swhatbuf_r>
 800d29c:	9900      	ldr	r1, [sp, #0]
 800d29e:	4605      	mov	r5, r0
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f7fd faa3 	bl	800a7ec <_malloc_r>
 800d2a6:	b948      	cbnz	r0, 800d2bc <__smakebuf_r+0x44>
 800d2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ac:	059a      	lsls	r2, r3, #22
 800d2ae:	d4ef      	bmi.n	800d290 <__smakebuf_r+0x18>
 800d2b0:	f023 0303 	bic.w	r3, r3, #3
 800d2b4:	f043 0302 	orr.w	r3, r3, #2
 800d2b8:	81a3      	strh	r3, [r4, #12]
 800d2ba:	e7e3      	b.n	800d284 <__smakebuf_r+0xc>
 800d2bc:	4b0d      	ldr	r3, [pc, #52]	; (800d2f4 <__smakebuf_r+0x7c>)
 800d2be:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	6020      	str	r0, [r4, #0]
 800d2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c8:	81a3      	strh	r3, [r4, #12]
 800d2ca:	9b00      	ldr	r3, [sp, #0]
 800d2cc:	6163      	str	r3, [r4, #20]
 800d2ce:	9b01      	ldr	r3, [sp, #4]
 800d2d0:	6120      	str	r0, [r4, #16]
 800d2d2:	b15b      	cbz	r3, 800d2ec <__smakebuf_r+0x74>
 800d2d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f000 f8d1 	bl	800d480 <_isatty_r>
 800d2de:	b128      	cbz	r0, 800d2ec <__smakebuf_r+0x74>
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	f023 0303 	bic.w	r3, r3, #3
 800d2e6:	f043 0301 	orr.w	r3, r3, #1
 800d2ea:	81a3      	strh	r3, [r4, #12]
 800d2ec:	89a0      	ldrh	r0, [r4, #12]
 800d2ee:	4305      	orrs	r5, r0
 800d2f0:	81a5      	strh	r5, [r4, #12]
 800d2f2:	e7cd      	b.n	800d290 <__smakebuf_r+0x18>
 800d2f4:	0800d08d 	.word	0x0800d08d

0800d2f8 <_malloc_usable_size_r>:
 800d2f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2fc:	1f18      	subs	r0, r3, #4
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	bfbc      	itt	lt
 800d302:	580b      	ldrlt	r3, [r1, r0]
 800d304:	18c0      	addlt	r0, r0, r3
 800d306:	4770      	bx	lr

0800d308 <_raise_r>:
 800d308:	291f      	cmp	r1, #31
 800d30a:	b538      	push	{r3, r4, r5, lr}
 800d30c:	4604      	mov	r4, r0
 800d30e:	460d      	mov	r5, r1
 800d310:	d904      	bls.n	800d31c <_raise_r+0x14>
 800d312:	2316      	movs	r3, #22
 800d314:	6003      	str	r3, [r0, #0]
 800d316:	f04f 30ff 	mov.w	r0, #4294967295
 800d31a:	bd38      	pop	{r3, r4, r5, pc}
 800d31c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d31e:	b112      	cbz	r2, 800d326 <_raise_r+0x1e>
 800d320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d324:	b94b      	cbnz	r3, 800d33a <_raise_r+0x32>
 800d326:	4620      	mov	r0, r4
 800d328:	f000 f830 	bl	800d38c <_getpid_r>
 800d32c:	462a      	mov	r2, r5
 800d32e:	4601      	mov	r1, r0
 800d330:	4620      	mov	r0, r4
 800d332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d336:	f000 b817 	b.w	800d368 <_kill_r>
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d00a      	beq.n	800d354 <_raise_r+0x4c>
 800d33e:	1c59      	adds	r1, r3, #1
 800d340:	d103      	bne.n	800d34a <_raise_r+0x42>
 800d342:	2316      	movs	r3, #22
 800d344:	6003      	str	r3, [r0, #0]
 800d346:	2001      	movs	r0, #1
 800d348:	e7e7      	b.n	800d31a <_raise_r+0x12>
 800d34a:	2400      	movs	r4, #0
 800d34c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d350:	4628      	mov	r0, r5
 800d352:	4798      	blx	r3
 800d354:	2000      	movs	r0, #0
 800d356:	e7e0      	b.n	800d31a <_raise_r+0x12>

0800d358 <raise>:
 800d358:	4b02      	ldr	r3, [pc, #8]	; (800d364 <raise+0xc>)
 800d35a:	4601      	mov	r1, r0
 800d35c:	6818      	ldr	r0, [r3, #0]
 800d35e:	f7ff bfd3 	b.w	800d308 <_raise_r>
 800d362:	bf00      	nop
 800d364:	2000002c 	.word	0x2000002c

0800d368 <_kill_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d07      	ldr	r5, [pc, #28]	; (800d388 <_kill_r+0x20>)
 800d36c:	2300      	movs	r3, #0
 800d36e:	4604      	mov	r4, r0
 800d370:	4608      	mov	r0, r1
 800d372:	4611      	mov	r1, r2
 800d374:	602b      	str	r3, [r5, #0]
 800d376:	f7f4 fc49 	bl	8001c0c <_kill>
 800d37a:	1c43      	adds	r3, r0, #1
 800d37c:	d102      	bne.n	800d384 <_kill_r+0x1c>
 800d37e:	682b      	ldr	r3, [r5, #0]
 800d380:	b103      	cbz	r3, 800d384 <_kill_r+0x1c>
 800d382:	6023      	str	r3, [r4, #0]
 800d384:	bd38      	pop	{r3, r4, r5, pc}
 800d386:	bf00      	nop
 800d388:	20000ac0 	.word	0x20000ac0

0800d38c <_getpid_r>:
 800d38c:	f7f4 bc36 	b.w	8001bfc <_getpid>

0800d390 <__sread>:
 800d390:	b510      	push	{r4, lr}
 800d392:	460c      	mov	r4, r1
 800d394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d398:	f000 f894 	bl	800d4c4 <_read_r>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	bfab      	itete	ge
 800d3a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d3a4:	181b      	addge	r3, r3, r0
 800d3a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3aa:	bfac      	ite	ge
 800d3ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3ae:	81a3      	strhlt	r3, [r4, #12]
 800d3b0:	bd10      	pop	{r4, pc}

0800d3b2 <__swrite>:
 800d3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b6:	461f      	mov	r7, r3
 800d3b8:	898b      	ldrh	r3, [r1, #12]
 800d3ba:	05db      	lsls	r3, r3, #23
 800d3bc:	4605      	mov	r5, r0
 800d3be:	460c      	mov	r4, r1
 800d3c0:	4616      	mov	r6, r2
 800d3c2:	d505      	bpl.n	800d3d0 <__swrite+0x1e>
 800d3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f000 f868 	bl	800d4a0 <_lseek_r>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3da:	81a3      	strh	r3, [r4, #12]
 800d3dc:	4632      	mov	r2, r6
 800d3de:	463b      	mov	r3, r7
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e6:	f000 b817 	b.w	800d418 <_write_r>

0800d3ea <__sseek>:
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f2:	f000 f855 	bl	800d4a0 <_lseek_r>
 800d3f6:	1c43      	adds	r3, r0, #1
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	bf15      	itete	ne
 800d3fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d406:	81a3      	strheq	r3, [r4, #12]
 800d408:	bf18      	it	ne
 800d40a:	81a3      	strhne	r3, [r4, #12]
 800d40c:	bd10      	pop	{r4, pc}

0800d40e <__sclose>:
 800d40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d412:	f000 b813 	b.w	800d43c <_close_r>
	...

0800d418 <_write_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4d07      	ldr	r5, [pc, #28]	; (800d438 <_write_r+0x20>)
 800d41c:	4604      	mov	r4, r0
 800d41e:	4608      	mov	r0, r1
 800d420:	4611      	mov	r1, r2
 800d422:	2200      	movs	r2, #0
 800d424:	602a      	str	r2, [r5, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	f7f4 fc27 	bl	8001c7a <_write>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_write_r+0x1e>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_write_r+0x1e>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	20000ac0 	.word	0x20000ac0

0800d43c <_close_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d06      	ldr	r5, [pc, #24]	; (800d458 <_close_r+0x1c>)
 800d440:	2300      	movs	r3, #0
 800d442:	4604      	mov	r4, r0
 800d444:	4608      	mov	r0, r1
 800d446:	602b      	str	r3, [r5, #0]
 800d448:	f7f4 fc33 	bl	8001cb2 <_close>
 800d44c:	1c43      	adds	r3, r0, #1
 800d44e:	d102      	bne.n	800d456 <_close_r+0x1a>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	b103      	cbz	r3, 800d456 <_close_r+0x1a>
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	bd38      	pop	{r3, r4, r5, pc}
 800d458:	20000ac0 	.word	0x20000ac0

0800d45c <_fstat_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4d07      	ldr	r5, [pc, #28]	; (800d47c <_fstat_r+0x20>)
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	4608      	mov	r0, r1
 800d466:	4611      	mov	r1, r2
 800d468:	602b      	str	r3, [r5, #0]
 800d46a:	f7f4 fc2e 	bl	8001cca <_fstat>
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	d102      	bne.n	800d478 <_fstat_r+0x1c>
 800d472:	682b      	ldr	r3, [r5, #0]
 800d474:	b103      	cbz	r3, 800d478 <_fstat_r+0x1c>
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	bd38      	pop	{r3, r4, r5, pc}
 800d47a:	bf00      	nop
 800d47c:	20000ac0 	.word	0x20000ac0

0800d480 <_isatty_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4d06      	ldr	r5, [pc, #24]	; (800d49c <_isatty_r+0x1c>)
 800d484:	2300      	movs	r3, #0
 800d486:	4604      	mov	r4, r0
 800d488:	4608      	mov	r0, r1
 800d48a:	602b      	str	r3, [r5, #0]
 800d48c:	f7f4 fc2d 	bl	8001cea <_isatty>
 800d490:	1c43      	adds	r3, r0, #1
 800d492:	d102      	bne.n	800d49a <_isatty_r+0x1a>
 800d494:	682b      	ldr	r3, [r5, #0]
 800d496:	b103      	cbz	r3, 800d49a <_isatty_r+0x1a>
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	bd38      	pop	{r3, r4, r5, pc}
 800d49c:	20000ac0 	.word	0x20000ac0

0800d4a0 <_lseek_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4d07      	ldr	r5, [pc, #28]	; (800d4c0 <_lseek_r+0x20>)
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	4608      	mov	r0, r1
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	602a      	str	r2, [r5, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	f7f4 fc26 	bl	8001d00 <_lseek>
 800d4b4:	1c43      	adds	r3, r0, #1
 800d4b6:	d102      	bne.n	800d4be <_lseek_r+0x1e>
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	b103      	cbz	r3, 800d4be <_lseek_r+0x1e>
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	bd38      	pop	{r3, r4, r5, pc}
 800d4c0:	20000ac0 	.word	0x20000ac0

0800d4c4 <_read_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4d07      	ldr	r5, [pc, #28]	; (800d4e4 <_read_r+0x20>)
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	4608      	mov	r0, r1
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	602a      	str	r2, [r5, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	f7f4 fbb4 	bl	8001c40 <_read>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	d102      	bne.n	800d4e2 <_read_r+0x1e>
 800d4dc:	682b      	ldr	r3, [r5, #0]
 800d4de:	b103      	cbz	r3, 800d4e2 <_read_r+0x1e>
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	20000ac0 	.word	0x20000ac0

0800d4e8 <_init>:
 800d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ea:	bf00      	nop
 800d4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ee:	bc08      	pop	{r3}
 800d4f0:	469e      	mov	lr, r3
 800d4f2:	4770      	bx	lr

0800d4f4 <_fini>:
 800d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f6:	bf00      	nop
 800d4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fa:	bc08      	pop	{r3}
 800d4fc:	469e      	mov	lr, r3
 800d4fe:	4770      	bx	lr
